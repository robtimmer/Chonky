{"version":3,"file":"chonky.cjs.production.min.js","sources":["../src/util/hooks-helpers.ts","../src/types/sort.types.ts","../src/util/logger.ts","../src/util/file-helper.ts","../src/redux/files-transforms.ts","../src/action-definitions/option-ids.ts","../src/redux/selectors.ts","../src/types/file-view.types.ts","../src/types/icons.types.ts","../src/redux/thunks/file-actions.thunks.ts","../src/redux/thunks/dispatchers.thunks.ts","../src/util/i18n.ts","../src/util/helpers.ts","../src/action-definitions/essential.ts","../src/redux/thunks/index.ts","../src/action-definitions/default.ts","../src/action-definitions/extra.ts","../src/action-definitions/index.ts","../src/redux/state.ts","../src/redux/reducers.ts","../src/redux/store.ts","../src/components/internal/ChonkyIconPlaceholder.tsx","../src/util/default-config.ts","../src/util/icon-helper.ts","../src/util/styles.ts","../src/components/internal/ChonkyBusinessLogic.tsx","../src/util/file-browser-handle.ts","../src/util/dnd-fallback.ts","../src/components/file-list/DnDFileListDragLayer.tsx","../src/types/dnd.types.ts","../src/components/internal/HotkeyListener.tsx","../src/components/internal/ChonkyPresentationLayer.tsx","../src/components/external/FileContextMenu-hooks.ts","../src/components/external/FileBrowser.tsx","../src/redux/watchers.ts","../src/components/external/FileNavbar-hooks.ts","../src/types/action.types.ts","../src/util/dnd.ts","../src/components/external/TextPlaceholder.tsx","../src/components/file-list/FileEntry-hooks.tsx","../src/util/file-actions.ts","../src/components/external/ToolbarButton.tsx","../src/components/external/FolderChainButton.tsx","../src/components/external/FileNavbar.tsx","../src/components/external/ToolbarDropdownButton.tsx","../src/components/external/ToolbarDropdown.tsx","../src/components/external/ToolbarInfo.tsx","../src/components/external/ToolbarSearch.tsx","../src/components/external/FileToolbar.tsx","../src/components/file-list/FileListEmpty.tsx","../src/components/internal/ClickableWrapper.tsx","../src/components/internal/ClickableWrapper-hooks.tsx","../src/components/file-list/FileEntryName.tsx","../src/components/file-list/CompactEntry.tsx","../src/components/file-list/DnDFileEntry.tsx","../src/components/file-list/FileThumbnail.tsx","../src/components/file-list/GridEntryDndIndicator.tsx","../src/components/file-list/GridEntryPreview.tsx","../src/components/file-list/GridEntry.tsx","../src/components/file-list/ListEntry.tsx","../src/components/file-list/FileEntry.tsx","../src/components/file-list/GridContainer.tsx","../src/components/file-list/ListContainer.tsx","../src/components/file-list/FileList.tsx","../src/components/external/FileContextMenu.tsx","../src/components/external/FullFileBrowser.tsx","../src/extensions/file-map.ts"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\n\nexport const useDebounce = <T>(\n    value: T,\n    delay: number\n): [T, React.Dispatch<React.SetStateAction<T>>] => {\n    const [debouncedValue, setDebouncedValue] = useState(value);\n\n    useEffect(() => {\n        const handler = setTimeout(() => {\n            setDebouncedValue(value);\n        }, delay);\n\n        return () => {\n            clearTimeout(handler);\n        };\n    }, [value, delay]);\n\n    return [debouncedValue, setDebouncedValue];\n};\n\nconst UNINITIALIZED_SENTINEL = {};\nexport const useStaticValue = <T>(factory: () => T): T => {\n    const valueRef = useRef<T>(UNINITIALIZED_SENTINEL as T);\n    if (valueRef.current === UNINITIALIZED_SENTINEL) valueRef.current = factory();\n    return valueRef.current;\n};\n\nexport const useInstanceVariable = <T>(value: T) => {\n    const ref = useRef(value);\n    useEffect(() => {\n        ref.current = value;\n    }, [ref, value]);\n    return ref;\n};\n","import { Nullable } from 'tsdef';\n\nimport { FileData } from './file.types';\n\nexport type FileSortKeySelector = (file: Nullable<FileData>) => any;\n\nexport enum SortOrder {\n    ASC = 'asc',\n    DESC = 'desc',\n}\n","export class Logger {\n    public static error(...args: any[]): void {\n        // eslint-disable-next-line no-console\n        console.error('[Chonky runtime error]', ...args);\n    }\n\n    public static warn(...args: any[]): void {\n        // eslint-disable-next-line no-console\n        console.warn('[Chonky runtime warning]', ...args);\n    }\n\n    public static debug(...args: any[]): void {\n        // eslint-disable-next-line no-console\n        console.debug('[Chonky runtime debug]', ...args);\n    }\n\n    public static formatBullets(bullets: string[]): string {\n        return `\\n- ${bullets.join('\\n- ')}`;\n    }\n}\n","import { Nullable } from 'tsdef';\n\nimport { FileData } from '../types/file.types';\nimport { Logger } from './logger';\n\nexport class FileHelper {\n    public static isDirectory(file: Nullable<FileData>): file is FileData {\n        // Not a directory by default\n        return !!file && file.isDir === true;\n    }\n\n    public static isHidden(file: Nullable<FileData>): file is FileData {\n        // Not hidden by default\n        return !!file && file.isHidden === true;\n    }\n\n    public static isSymlink(file: Nullable<FileData>): file is FileData {\n        // Not a symlink by default\n        return !!file && file.isSymlink === true;\n    }\n\n    public static isEncrypted(file: Nullable<FileData>): file is FileData {\n        // Not encrypted by default\n        return !!file && file.isEncrypted === true;\n    }\n\n    public static isClickable(file: Nullable<FileData>): file is FileData {\n        // Clickable by default\n        return !!file;\n    }\n\n    public static isOpenable(file: Nullable<FileData>): file is FileData {\n        // Openable by default\n        return !!file && file.openable !== false;\n    }\n\n    public static isSelectable(file: Nullable<FileData>): file is FileData {\n        // Selectable by default\n        return !!file && file.selectable !== false;\n    }\n\n    public static isDraggable(file: Nullable<FileData>): file is FileData {\n        // File & folders are draggable by default, `null` is not\n        return !!file && file.draggable !== false;\n    }\n\n    public static isDroppable(file: Nullable<FileData>): file is FileData {\n        // Folders are droppable by default, files are not\n        if (!file) return false;\n        if (file.isDir && file.droppable !== false) return true;\n        return file.droppable === true;\n    }\n\n    public static isDndOpenable(file: Nullable<FileData>): file is FileData {\n        // Folders are DnD openable by default, files are not\n        if (!FileHelper.isOpenable(file)) return false;\n        if (file.isDir && file.dndOpenable !== false) return true;\n        return file.dndOpenable === true;\n    }\n\n    public static getModDate(file: Nullable<FileData>): Nullable<Date> {\n        if (!file || file.modDate === null || file.modDate === undefined) return null;\n        return FileHelper.parseDate(file.modDate);\n    }\n\n    public static parseDate(maybeDate: Date | string | any): Nullable<Date> {\n        if (typeof maybeDate === 'string' || typeof maybeDate === 'number') {\n            // We allow users to provide string and numerical representations of dates.\n            try {\n                return new Date(maybeDate);\n            } catch (error) {\n                Logger.error(\n                    `Could not convert provided string/number into a date: ${error.message} `,\n                    'Invalid value:',\n                    maybeDate\n                );\n            }\n        }\n        if (maybeDate instanceof Date && !isNaN(maybeDate.getTime())) {\n            // We only allow valid dates objects\n            return maybeDate;\n        }\n\n        // If we have an invalid date representation, we just return null.\n        Logger.warn('Unsupported date representation:', maybeDate);\n        return null;\n    }\n\n    public static getChildrenCount(file: Nullable<FileData>): Nullable<number> {\n        if (!file || typeof file.childrenCount !== 'number') return null;\n\n        return file.childrenCount;\n    }\n}\n","import { Nullable } from 'tsdef';\n\nimport { FileAction } from '../types/action.types';\nimport { FileArray } from '../types/file.types';\nimport { Logger } from '../util/logger';\n\ninterface SanitizeFiles {\n    (mode: 'files', rawArray: FileArray | any): {\n        sanitizedArray: FileArray;\n        errorMessages: string[];\n    };\n    (mode: 'folderChain', rawArray: Nullable<FileArray> | any): {\n        sanitizedArray: FileArray;\n        errorMessages: string[];\n    };\n    (mode: 'fileActions', rawArray: FileAction[] | any): {\n        sanitizedArray: FileAction[];\n        errorMessages: string[];\n    };\n}\n\nexport const sanitizeInputArray: SanitizeFiles = (mode: string, rawArray: any[]) => {\n    const sanitizedFiles = [];\n    const errorMessages: string[] = [];\n\n    if ((mode === 'folderChain' || mode === 'fileActions') && !rawArray) {\n        // Do nothing, we allow folder chain to be null.\n    } else if (!Array.isArray(rawArray)) {\n        errorMessages.push(\n            `Expected \"${mode}\" prop to be an array, got \"${typeof rawArray}\" instead.`\n        );\n    } else {\n        let nonObjectFileCount = 0;\n        let missingFieldFileCount = 0;\n        const seenIds = new Set<string>();\n        const duplicateIds = new Set<string>();\n\n        for (let i = 0; i < rawArray.length; ++i) {\n            const item = rawArray[i];\n            if (!item) {\n                if (mode === 'fileActions') nonObjectFileCount++;\n                else sanitizedFiles.push(null);\n            } else if (typeof item !== 'object') {\n                nonObjectFileCount++;\n            } else {\n                if (!item.id || (mode !== 'fileActions' && !item.name)) {\n                    missingFieldFileCount++;\n                } else if (seenIds.has(item.id)) {\n                    duplicateIds.add(item.id);\n                } else {\n                    seenIds.add(item.id);\n                    sanitizedFiles.push(item);\n                }\n            }\n        }\n\n        if (nonObjectFileCount) {\n            errorMessages.push(\n                `Detected ${nonObjectFileCount} file(s) of invalid type. Remember ` +\n                    `that \"files\" array should contain either objects or nulls.`\n            );\n        }\n        if (missingFieldFileCount) {\n            errorMessages.push(\n                `Detected ${missingFieldFileCount} file(s) that are missing the ` +\n                    `required fields. Remember that file object should define an ` +\n                    `\"id\" and a \"name\".`\n            );\n        }\n        if (duplicateIds.size > 0) {\n            const repeatedIdsString = '\"' + Array.from(duplicateIds).join('\", \"') + '\"';\n            errorMessages.push(\n                `Detected ${duplicateIds.size} file IDs that are used multiple ` +\n                    `times. Remember that each file should have a unique IDs. The ` +\n                    `following IDs were seen multiple times: ${repeatedIdsString}`\n            );\n        }\n    }\n\n    if (errorMessages.length > 0) {\n        const errorMessageString = '\\n- ' + errorMessages.join('\\n- ');\n        let arrayString: string;\n        let itemString: string;\n        if (mode === 'folderChain') {\n            arrayString = 'folder chain';\n            itemString = 'files';\n        } else if (mode === 'fileActions') {\n            arrayString = 'file actions';\n            itemString = 'file actions';\n        } else {\n            // mode === 'files'\n            arrayString = 'files';\n            itemString = 'files';\n        }\n\n        Logger.error(\n            `Errors were detected when sanitizing the ${arrayString} array. ` +\n                `Offending ${itemString} were removed from the array. Summary of ` +\n                `validation errors: ${errorMessageString}`\n        );\n    }\n\n    return {\n        sanitizedArray: sanitizedFiles,\n        errorMessages,\n    };\n};\n","/**\n * We have option IDs in a separate file to avoid circular deps...\n */\nexport const OptionIds = {\n    ShowHiddenFiles: 'show_hidden_files',\n    ShowFoldersFirst: 'show_folders_first',\n    DarkMode: 'dark_mode',\n};\n","import sort from 'fast-sort';\nimport FuzzySearch from 'fuzzy-search';\nimport { Nilable, Nullable } from 'tsdef';\n\nimport { createSelector } from '@reduxjs/toolkit';\n\nimport { OptionIds } from '../action-definitions/option-ids';\nimport { FileArray, FileData, FileFilter } from '../types/file.types';\nimport { RootState } from '../types/redux.types';\nimport { FileSortKeySelector, SortOrder } from '../types/sort.types';\nimport { FileHelper } from '../util/file-helper';\n\n// Raw selectors\nexport const selectInstanceId = (state: RootState) => state.instanceId;\nexport const selectExternalFileActionHandler = (state: RootState) => state.externalFileActionHandler;\n\nexport const selectFileActionMap = (state: RootState) => state.fileActionMap;\nexport const selectFileActionIds = (state: RootState) => state.fileActionIds;\nexport const selectFileActionData = (fileActionId: string) => (state: RootState) =>\n    selectFileActionMap(state)[fileActionId];\nexport const selectToolbarItems = (state: RootState) => state.toolbarItems;\nexport const selectContextMenuItems = (state: RootState) => state.contextMenuItems;\n\nexport const selectFolderChain = (state: RootState) => state.folderChain;\nexport const selectCurrentFolder = (state: RootState) => {\n    const folderChain = selectFolderChain(state);\n    const currentFolder = folderChain.length > 0 ? folderChain[folderChain.length - 1] : null;\n    return currentFolder;\n};\nexport const selectParentFolder = (state: RootState) => {\n    const folderChain = selectFolderChain(state);\n    const parentFolder = folderChain.length > 1 ? folderChain[folderChain.length - 2] : null;\n    return parentFolder;\n};\n\nexport const selectRawFiles = (state: RootState) => state.rawFiles;\nexport const selectFileMap = (state: RootState) => state.fileMap;\nexport const selectCleanFileIds = (state: RootState) => state.cleanFileIds;\nexport const selectFileData = (fileId: Nullable<string>) => (state: RootState) =>\n    fileId ? selectFileMap(state)[fileId] : null;\n\nexport const selectHiddenFileIdMap = (state: RootState) => state.hiddenFileIdMap;\nexport const selectHiddenFileCount = (state: RootState) => Object.keys(selectHiddenFileIdMap(state)).length;\n\nexport const selectFocusSearchInput = (state: RootState) => state.focusSearchInput;\nexport const selectSearchString = (state: RootState) => state.searchString;\n\nexport const selectSelectionMap = (state: RootState) => state.selectionMap;\nexport const selectSelectedFileIds = (state: RootState) => Object.keys(selectSelectionMap(state));\nexport const selectSelectionSize = (state: RootState) => selectSelectedFileIds(state).length;\nexport const selectIsFileSelected = (fileId: Nullable<string>) => (state: RootState) =>\n    !!fileId && !!selectSelectionMap(state)[fileId];\nexport const selectSelectedFiles = (state: RootState) => {\n    const fileMap = selectFileMap(state);\n    return Object.keys(selectSelectionMap(state)).map(id => fileMap[id]);\n};\nexport const selectSelectedFilesForAction = (fileActionId: string) => (state: RootState) => {\n    const { fileActionMap } = state;\n    const action = fileActionMap[fileActionId];\n    if (!action || !action.requiresSelection) return undefined;\n\n    return getSelectedFiles(state, action.fileFilter);\n};\nexport const selectSelectedFilesForActionCount = (fileActionId: string) => (state: RootState) =>\n    getSelectedFilesForAction(state, fileActionId)?.length;\nexport const selectDisableSelection = (state: RootState) => state.disableSelection;\n\nexport const selectFileViewConfig = (state: RootState) => state.fileViewConfig;\n\nexport const selectSortActionId = (state: RootState) => state.sortActionId;\nexport const selectSortOrder = (state: RootState) => state.sortOrder;\n\nexport const selectOptionMap = (state: RootState) => state.optionMap;\nexport const selectOptionValue = (optionId: string) => (state: RootState) => selectOptionMap(state)[optionId];\n\nexport const selectThumbnailGenerator = (state: RootState) => state.thumbnailGenerator;\nexport const selectDoubleClickDelay = (state: RootState) => state.doubleClickDelay;\nexport const selectIsDnDDisabled = (state: RootState) => state.disableDragAndDrop;\nexport const selectClearSelectionOnOutsideClick = (state: RootState) => state.clearSelectionOnOutsideClick;\n\nexport const selectContextMenuMounted = (state: RootState) => state.contextMenuMounted;\nexport const selectContextMenuConfig = (state: RootState) => state.contextMenuConfig;\nexport const selectContextMenuTriggerFile = (state: RootState) => {\n    const config = selectContextMenuConfig(state);\n    if (!config || !config.triggerFileId) return null;\n    const fileMap = selectFileMap(state);\n    return fileMap[config.triggerFileId] ?? null;\n};\n\n// Raw selectors\nconst getFileActionMap = (state: RootState) => state.fileActionMap;\nconst getOptionMap = (state: RootState) => state.optionMap;\nconst getFileMap = (state: RootState) => state.fileMap;\nconst getFileIds = (state: RootState) => state.fileIds;\nconst getCleanFileIds = (state: RootState) => state.cleanFileIds;\nconst getSortActionId = (state: RootState) => state.sortActionId;\nconst getSortOrder = (state: RootState) => state.sortOrder;\nconst getSearchString = (state: RootState) => state.searchString;\nconst _getLastClick = (state: RootState) => state.lastClick;\n\n// Memoized selectors\nconst makeGetAction = (fileActionSelector: (state: RootState) => Nullable<string>) =>\n    createSelector([getFileActionMap, fileActionSelector], (fileActionMap, fileActionId) =>\n        fileActionId && fileActionMap[fileActionId] ? fileActionMap[fileActionId] : null\n    );\nconst makeGetOptionValue = (optionId: string, defaultValue: any = undefined) =>\n    createSelector([getOptionMap], optionMap => {\n        const value = optionMap[optionId];\n        if (value === undefined) {\n            return defaultValue;\n        }\n        return value;\n    });\nconst makeGetFiles = (fileIdsSelector: (state: RootState) => Nullable<string>[]) =>\n    createSelector(\n        [getFileMap, fileIdsSelector],\n        (fileMap, fileIds): FileArray => fileIds.map(fileId => (fileId && fileMap[fileId] ? fileMap[fileId] : null))\n    );\nconst getSortedFileIds = createSelector(\n    [\n        getFileIds,\n        getSortOrder,\n        makeGetFiles(getFileIds),\n        makeGetAction(getSortActionId),\n        makeGetOptionValue(OptionIds.ShowFoldersFirst, false),\n    ],\n    (fileIds, sortOrder, files, sortAction, showFolderFirst) => {\n        if (!sortAction) {\n            // We allow users to set the sort action ID to `null` if they want to use their\n            // own sorting mechanisms instead of relying on Chonky built-in sort.\n            return fileIds;\n        }\n\n        const prepareSortKeySelector = (selector: FileSortKeySelector) => (file: Nullable<FileData>) => selector(file);\n\n        const sortFunctions: {\n            asc?: (file: FileData) => any;\n            desc?: (file: FileData) => any;\n        }[] = [];\n\n        if (showFolderFirst) {\n            // If option is undefined (relevant actions is not enabled), we don't show\n            // folders first.\n            sortFunctions.push({\n                desc: prepareSortKeySelector(FileHelper.isDirectory),\n            });\n        }\n        if (sortAction.sortKeySelector) {\n            const configKeyName = sortOrder === SortOrder.ASC ? 'asc' : 'desc';\n            sortFunctions.push({\n                [configKeyName]: prepareSortKeySelector(sortAction.sortKeySelector),\n            });\n        }\n        if (sortFunctions.length === 0) return fileIds;\n\n        // We copy the array because `fast-sort` mutates it\n        const sortedFileIds = sort([...files])\n            .by(sortFunctions as any)\n            .map(file => (file ? file.id : null));\n        return sortedFileIds;\n    }\n);\nconst getSearcher = createSelector(\n    [makeGetFiles(getCleanFileIds)],\n    cleanFiles => new FuzzySearch(cleanFiles as FileData[], ['name'], { caseSensitive: false })\n);\nconst getSearchFilteredFileIds = createSelector(\n    [getCleanFileIds, getSearchString, getSearcher],\n    (cleanFileIds, searchString, searcher) =>\n        searchString ? searcher.search(searchString).map(f => f.id) : cleanFileIds\n);\nconst getHiddenFileIdMap = createSelector(\n    [getSearchFilteredFileIds, makeGetFiles(getCleanFileIds), makeGetOptionValue(OptionIds.ShowHiddenFiles)],\n    (searchFilteredFileIds, cleanFiles, showHiddenFiles) => {\n        const searchFilteredFileIdsSet = new Set(searchFilteredFileIds);\n        const hiddenFileIdMap: any = {};\n        cleanFiles.forEach(file => {\n            if (!file) return;\n            else if (!searchFilteredFileIdsSet.has(file.id)) {\n                // Hidden by seach\n                hiddenFileIdMap[file.id] = true;\n            } else if (!showHiddenFiles && FileHelper.isHidden(file)) {\n                // Hidden by options\n                hiddenFileIdMap[file.id] = true;\n            }\n        });\n        return hiddenFileIdMap;\n    }\n);\nconst getDisplayFileIds = createSelector(\n    [getSortedFileIds, getHiddenFileIdMap],\n    /** Returns files that will actually be shown to the user. */\n    (sortedFileIds, hiddenFileIdMap) => sortedFileIds.filter(id => !id || !hiddenFileIdMap[id])\n);\nconst getLastClickIndex = createSelector(\n    [_getLastClick, getSortedFileIds],\n    /** Returns the last click index after ensuring it is actually still valid. */\n    (lastClick, displayFileIds) => {\n        if (\n            !lastClick ||\n            lastClick.index > displayFileIds.length - 1 ||\n            lastClick.fileId != displayFileIds[lastClick.index]\n        ) {\n            return null;\n        }\n        return lastClick.index;\n    }\n);\n\nexport const selectors = {\n    // Raw selectors\n    getFileActionMap,\n    getOptionMap,\n    getFileMap,\n    getFileIds,\n    getCleanFileIds,\n    getSortActionId,\n    getSortOrder,\n    getSearchString,\n    _getLastClick,\n\n    // Memoized selectors\n    getSortedFileIds,\n    getSearcher,\n    getSearchFilteredFileIds,\n    getHiddenFileIdMap,\n    getDisplayFileIds,\n    getLastClickIndex,\n\n    // Parametrized selectors\n    makeGetAction,\n    makeGetOptionValue,\n    makeGetFiles,\n};\n\n// Selectors meant to be used outside of Redux code\nexport const getFileData = (state: RootState, fileId: Nullable<string>) =>\n    fileId ? selectFileMap(state)[fileId] : null;\nexport const getIsFileSelected = (state: RootState, file: FileData) => {\n    // !!! We deliberately don't use `FileHelper.isSelectable` here as we want to\n    //     reflect the state of Redux store accurately.\n    return !!selectSelectionMap(state)[file.id];\n};\nexport const getSelectedFiles = (state: RootState, ...filters: Nilable<FileFilter>[]) => {\n    const { fileMap, selectionMap } = state;\n\n    const selectedFiles = Object.keys(selectionMap).map(id => fileMap[id]);\n    const filteredSelectedFiles = filters.reduce(\n        (prevFiles, filter) => (filter ? prevFiles.filter(filter) : prevFiles),\n        selectedFiles\n    );\n    return filteredSelectedFiles;\n};\nexport const getSelectedFilesForAction = (state: RootState, fileActionId: string) =>\n    selectSelectedFilesForAction(fileActionId)(state);\n","export enum FileViewMode {\n    List = 'list',\n    Compact = 'compact',\n    Grid = 'grid',\n}\n\nexport type FileViewConfigList = {\n    mode: FileViewMode.List;\n    entryHeight: number;\n};\n\nexport type FileViewConfigGrid = {\n    mode: FileViewMode.Compact | FileViewMode.Grid;\n    entryWidth: number;\n    entryHeight: number;\n};\n\nexport type FileViewConfig = FileViewConfigList | FileViewConfigGrid;\n","import React from 'react';\n\nexport enum ChonkyIconName {\n    // Misc\n    loading = 'loading',\n    dropdown = 'dropdown',\n    placeholder = 'placeholder',\n\n    // File Actions: Drag & drop\n    dndDragging = 'dndDragging',\n    dndCanDrop = 'dndCanDrop',\n    dndCannotDrop = 'dndCannotDrop',\n\n    // File Actions: File operations\n    openFiles = 'openFiles',\n    openParentFolder = 'openParentFolder',\n    copy = 'copy',\n    paste = 'paste',\n    share = 'share',\n    search = 'search',\n    selectAllFiles = 'selectAllFiles',\n    clearSelection = 'clearSelection',\n\n    // File Actions: Sorting & options\n    sortAsc = 'sortAsc',\n    sortDesc = 'sortDesc',\n    toggleOn = 'toggleOn',\n    toggleOff = 'toggleOff',\n\n    // File Actions: File Views\n    list = 'list',\n    compact = 'compact',\n    smallThumbnail = 'smallThumbnail',\n    largeThumbnail = 'largeThumbnail',\n\n    // File Actions: Unsorted\n    folder = 'folder',\n    folderCreate = 'folderCreate',\n    folderOpen = 'folderOpen',\n    folderChainSeparator = 'folderChainSeparator',\n    download = 'download',\n    upload = 'upload',\n    trash = 'trash',\n    fallbackIcon = 'fallbackIcon',\n\n    // File modifiers\n    symlink = 'symlink',\n    hidden = 'hidden',\n\n    // Generic file types\n    file = 'file',\n    license = 'license',\n    code = 'code',\n    config = 'config',\n    model = 'model',\n    database = 'database',\n    text = 'text',\n    archive = 'archive',\n    image = 'image',\n    video = 'video',\n    info = 'info',\n    key = 'key',\n    lock = 'lock',\n    music = 'music',\n    terminal = 'terminal',\n    users = 'users',\n\n    // OS file types\n    linux = 'linux',\n    ubuntu = 'ubuntu',\n    windows = 'windows',\n\n    // Programming language file types\n    rust = 'rust',\n    python = 'python',\n    nodejs = 'nodejs',\n    php = 'php',\n\n    // Development tools file types\n    git = 'git',\n\n    // Brands file types\n    adobe = 'adobe',\n\n    // Other program file types\n    pdf = 'pdf',\n    excel = 'excel',\n    word = 'word',\n    flash = 'flash',\n}\n\nexport interface FileIconData {\n    icon: ChonkyIconName | string;\n    colorCode: number;\n}\n\nexport interface ChonkyIconProps {\n    icon: ChonkyIconName | string;\n    spin?: boolean;\n    className?: string;\n    fixedWidth?: boolean;\n    style?: React.CSSProperties;\n}\n","import { Nilable } from 'tsdef';\n\nimport { ChonkyActions, DefaultFileActions, EssentialFileActions } from '../../action-definitions/index';\nimport { FileActionGroup, FileActionMenuItem } from '../../types/action-menus.types';\nimport { FileAction } from '../../types/action.types';\nimport { ChonkyThunk } from '../../types/redux.types';\nimport { SortOrder } from '../../types/sort.types';\nimport { sanitizeInputArray } from '../files-transforms';\nimport { reduxActions } from '../reducers';\nimport { selectCleanFileIds, selectFileMap, selectHiddenFileIdMap, selectSelectionMap } from '../selectors';\n\n/**\n * Merges multiple file action arrays into one while removing duplicates\n */\nconst mergeFileActionsArrays = (...fileActionArrays: FileAction[][]): FileAction[] => {\n    const seenActionIds = new Set<string>();\n    const addToSeen = (a: FileAction) => !!seenActionIds.add(a.id);\n    const wasNotSeen = (a: FileAction) => !seenActionIds.has(a.id);\n\n    const duplicateFreeArrays = fileActionArrays.map(arr => {\n        const duplicateFreeArray = arr.filter(wasNotSeen);\n        duplicateFreeArray.map(addToSeen);\n        return duplicateFreeArray;\n    });\n    return new Array<FileAction>().concat(...duplicateFreeArrays);\n};\n\nexport const thunkUpdateRawFileActions = (\n    rawFileActions: FileAction[] | any,\n    disableDefaultFileActions: Nilable<boolean | string[]>\n): ChonkyThunk => dispatch => {\n    const { sanitizedArray, errorMessages } = sanitizeInputArray('fileActions', rawFileActions);\n\n    // Add default actions unless user disabled them\n    let defaultActionsToAdd: FileAction[];\n    if (Array.isArray(disableDefaultFileActions)) {\n        const disabledActionIds = new Set(disableDefaultFileActions);\n        defaultActionsToAdd = DefaultFileActions.filter(action => !disabledActionIds.has(action.id));\n    } else if (disableDefaultFileActions) {\n        defaultActionsToAdd = [];\n    } else {\n        defaultActionsToAdd = DefaultFileActions;\n    }\n\n    const fileActions = mergeFileActionsArrays(sanitizedArray, EssentialFileActions, defaultActionsToAdd);\n    const optionDefaults: any = {};\n    fileActions.map(a => (a.option ? (optionDefaults[a.option.id] = a.option.defaultValue) : null));\n\n    dispatch(reduxActions.setRawFileActions(rawFileActions));\n    dispatch(reduxActions.setFileActionsErrorMessages(errorMessages));\n    dispatch(reduxActions.setFileActions(fileActions));\n    dispatch(reduxActions.setOptionDefaults(optionDefaults));\n    dispatch(thunkUpdateToolbarNContextMenuItems(fileActions));\n};\n\nexport const thunkUpdateToolbarNContextMenuItems = (fileActions: FileAction[]): ChonkyThunk => dispatch => {\n    const excludedToolbarFileActionIds = new Set<string>([\n        // TODO: Move decision to exclude actions somewhere else, as users' custom\n        //  components might not give these actions special treatment like Chonky does.\n        ChonkyActions.OpenParentFolder.id,\n    ]);\n\n    type SeenGroupMap = { [groupName: string]: FileActionGroup };\n\n    const toolbarItems: FileActionMenuItem[] = [];\n    const seenToolbarGroups: SeenGroupMap = {};\n\n    const contextMenuItems: FileActionMenuItem[] = [];\n    const seenContextMenuGroups: SeenGroupMap = {};\n\n    const getGroup = (itemArray: FileActionMenuItem[], seenMap: SeenGroupMap, groupName: string): FileActionGroup => {\n        if (seenMap[groupName]) return seenMap[groupName];\n        const group: FileActionGroup = { name: groupName, fileActionIds: [] };\n        itemArray.push(group);\n        seenMap[groupName] = group;\n        return group;\n    };\n\n    for (const action of fileActions) {\n        const button = action.button;\n        if (!button) continue;\n\n        if (button.toolbar && !excludedToolbarFileActionIds.has(action.id)) {\n            if (button.group) {\n                const group = getGroup(toolbarItems, seenToolbarGroups, button.group);\n                group.fileActionIds.push(action.id);\n            } else {\n                toolbarItems.push(action.id);\n            }\n        }\n\n        if (button.contextMenu) {\n            if (button.group) {\n                const group = getGroup(contextMenuItems, seenContextMenuGroups, button.group);\n                group.fileActionIds.push(action.id);\n            } else {\n                contextMenuItems.push(action.id);\n            }\n        }\n    }\n\n    dispatch(reduxActions.updateFileActionMenuItems([toolbarItems, contextMenuItems]));\n};\n\nexport const thunkUpdateDefaultFileViewActionId = (fileActionId: Nilable<string>): ChonkyThunk => (\n    dispatch,\n    getState\n) => {\n    const { fileActionMap } = getState();\n    const action = fileActionId ? fileActionMap[fileActionId] : null;\n    if (action && action.fileViewConfig) {\n        dispatch(reduxActions.setFileViewConfig(action.fileViewConfig));\n    }\n};\n\nexport const thunkActivateSortAction = (fileActionId: Nilable<string>): ChonkyThunk => (dispatch, getState) => {\n    if (!fileActionId) return;\n\n    const { sortActionId: oldActionId, sortOrder: oldOrder, fileActionMap } = getState();\n    const action = fileActionMap[fileActionId];\n    if (!action || !action.sortKeySelector) return;\n\n    let order = oldOrder === SortOrder.ASC ? SortOrder.DESC : SortOrder.ASC;\n    if (oldActionId !== fileActionId) {\n        order = SortOrder.ASC;\n    }\n\n    dispatch(reduxActions.setSort({ actionId: fileActionId, order: order }));\n};\n\nexport const thunkApplySelectionTransform = (action: FileAction): ChonkyThunk => (dispatch, getState) => {\n    const selectionTransform = action.selectionTransform;\n    if (!selectionTransform) return;\n\n    const state = getState();\n    const prevSelection = new Set<string>(Object.keys(selectSelectionMap(state)));\n    const hiddenFileIds = new Set<string>(Object.keys(selectHiddenFileIdMap(state)));\n\n    const newSelection = selectionTransform({\n        prevSelection,\n        fileIds: selectCleanFileIds(state),\n        fileMap: selectFileMap(state),\n        hiddenFileIds,\n    });\n    if (!newSelection) return;\n\n    if (newSelection.size === 0) {\n        dispatch(reduxActions.clearSelection());\n    } else {\n        dispatch(reduxActions.selectFiles({ fileIds: Array.from(newSelection), reset: true }));\n    }\n};\n","import { MaybePromise, Undefinable } from 'tsdef';\n\nimport { FileActionData, FileActionState } from '../../types/action-handler.types';\nimport { FileAction } from '../../types/action.types';\nimport { ChonkyDispatch, ChonkyThunk } from '../../types/redux.types';\nimport { Logger } from '../../util/logger';\nimport { reduxActions } from '../reducers';\nimport {\n    selectContextMenuTriggerFile, selectExternalFileActionHandler, selectFileActionMap,\n    selectInstanceId, selectSelectedFiles\n} from '../selectors';\nimport { thunkActivateSortAction, thunkApplySelectionTransform } from './file-actions.thunks';\n\n/**\n * Thunk that dispatches actions to the external (user-provided) action handler.\n */\nexport const thunkDispatchFileAction = (data: FileActionData<FileAction>): ChonkyThunk => (_dispatch, getState) => {\n    Logger.debug(`FILE ACTION DISPATCH: [${data.id}]`, 'data:', data);\n    const state = getState();\n    const action = selectFileActionMap(state)[data.id];\n    const externalFileActionHandler = selectExternalFileActionHandler(state);\n    if (action) {\n        if (externalFileActionHandler) {\n            Promise.resolve(externalFileActionHandler(data)).catch(error =>\n                Logger.error(`User-defined file action handler threw an error: ${error.message}`)\n            );\n        }\n    } else {\n        Logger.warn(\n            `Internal components dispatched the \"${data.id}\" file action, but such ` + `action was not registered.`\n        );\n    }\n};\n\n/**\n * Thunk that is used by internal components (and potentially the user) to \"request\"\n * actions. When action is requested, Chonky \"prepares\" the action data by extracting it\n * from Redux state. Once action data is ready, Chonky executes some side effect and/or\n * dispatches the action to the external action handler.\n */\nexport const thunkRequestFileAction = <Action extends FileAction>(\n    action: Action,\n    payload: Action['__payloadType']\n): ChonkyThunk => (dispatch, getState) => {\n    Logger.debug(`FILE ACTION REQUEST: [${action.id}]`, 'action:', action, 'payload:', payload);\n    const state = getState();\n    const instanceId = selectInstanceId(state);\n\n    if (!selectFileActionMap(state)[action.id]) {\n        Logger.warn(\n            `The action \"${action.id}\" was requested, but it is not registered. The ` +\n                `action will still be dispatched, but this might indicate a bug in ` +\n                `the code. Please register your actions by passing them to ` +\n                `\"fileActions\" prop.`\n        );\n    }\n\n    // Determine files for the action if action requires selection\n    const selectedFiles = selectSelectedFiles(state);\n    const selectedFilesForAction = action.fileFilter ? selectedFiles.filter(action.fileFilter) : selectedFiles;\n    if (action.requiresSelection && selectedFilesForAction.length === 0) {\n        Logger.warn(\n            `Internal components requested the \"${action.id}\" file ` +\n                `action, but the selection for this action was empty. This ` +\n                `might a bug in the code of the presentational components.`\n        );\n        return;\n    }\n\n    const contextMenuTriggerFile = selectContextMenuTriggerFile(state);\n    const actionState: FileActionState<{}> = {\n        instanceId,\n        selectedFiles,\n        selectedFilesForAction,\n        contextMenuTriggerFile,\n    };\n\n    // === Update sort state if necessary\n    const sortKeySelector = action.sortKeySelector;\n    if (sortKeySelector) dispatch(thunkActivateSortAction(action.id));\n\n    // === Update file view state if necessary\n    const fileViewConfig = action.fileViewConfig;\n    if (fileViewConfig) dispatch(reduxActions.setFileViewConfig(fileViewConfig));\n\n    // === Update option state if necessary\n    const option = action.option;\n    if (option) dispatch(reduxActions.toggleOption(option.id));\n\n    // === Apply selection transform if necessary\n    const selectionTransform = action.selectionTransform;\n    if (selectionTransform) dispatch(thunkApplySelectionTransform(action));\n\n    // Apply the effect\n    const effect = action.effect;\n    let maybeEffectPromise: MaybePromise<boolean | undefined> = undefined;\n    if (effect) {\n        try {\n            maybeEffectPromise = effect({\n                action,\n                payload,\n                state: actionState,\n                reduxDispatch: dispatch,\n                getReduxState: getState,\n            }) as MaybePromise<boolean | undefined>;\n        } catch (error) {\n            Logger.error(`User-defined effect function for action ${action.id} threw an ` + `error: ${error.message}`);\n        }\n    }\n\n    // Dispatch the action to user code. Deliberately call it after all other\n    // operations are over.\n    return Promise.resolve(maybeEffectPromise)\n        .then(effectResult => {\n            const data: FileActionData<Action> = {\n                id: action.id,\n                action,\n                payload,\n                state: actionState,\n            };\n            triggerDispatchAfterEffect(dispatch, data, effectResult);\n        })\n        .catch(error => {\n            Logger.error(\n                `User-defined effect function for action ${action.id} returned a ` +\n                    `promise that was rejected: ${error.message}`\n            );\n            const data: FileActionData<Action> = {\n                id: action.id,\n                action,\n                payload,\n                state: actionState,\n            };\n            triggerDispatchAfterEffect(dispatch, data, undefined);\n        });\n};\n\nexport const triggerDispatchAfterEffect = <Action extends FileAction>(\n    dispatch: ChonkyDispatch,\n    data: FileActionData<Action>,\n    effectResult: Undefinable<boolean>\n) => {\n    const preventDispatch = effectResult === true;\n    if (!preventDispatch) dispatch(thunkDispatchFileAction(data));\n};\n","import filesize from 'filesize';\nimport { createContext, useContext, useMemo } from 'react';\nimport { IntlShape, useIntl } from 'react-intl';\nimport { Nullable, Undefinable } from 'tsdef';\n\nimport { FileAction } from '../types/action.types';\nimport { FileData } from '../types/file.types';\nimport { ChonkyFormatters } from '../types/i18n.types';\nimport { FileHelper } from './file-helper';\n\nexport enum I18nNamespace {\n    Toolbar = 'toolbar',\n    FileList = 'fileList',\n    FileEntry = 'fileEntry',\n    FileContextMenu = 'contextMenu',\n\n    FileActions = 'actions',\n    FileActionGroups = 'actionGroups',\n}\n\nexport const getI18nId = (namespace: I18nNamespace, stringId: string): string =>\n    `chonky.${namespace}.${stringId}`;\n\nexport const getActionI18nId = (actionId: string, stringId: string): string =>\n    `chonky.${I18nNamespace.FileActions}.${actionId}.${stringId}`;\n\nexport const useLocalizedFileActionGroup = (groupName: string) => {\n    const intl = useIntl();\n    return useMemo(() => {\n        return intl.formatMessage({\n            id: getI18nId(I18nNamespace.FileActionGroups, groupName),\n            defaultMessage: groupName,\n        });\n    }, [groupName, intl]);\n};\n\nexport const useLocalizedFileActionStrings = (action: Nullable<FileAction>) => {\n    const intl = useIntl();\n    return useMemo(() => {\n        if (!action) {\n            return {\n                buttonName: '',\n                buttonTooltip: undefined,\n            };\n        }\n\n        const buttonName = intl.formatMessage({\n            id: getActionI18nId(action.id, 'button.name'),\n            defaultMessage: action.button?.name,\n        });\n\n        let buttonTooltip: Undefinable<string> = undefined;\n        if (action.button?.tooltip) {\n            // We only translate the tooltip if the original action has a tooltip.\n            buttonTooltip = intl.formatMessage({\n                id: getActionI18nId(action.id, 'button.tooltip'),\n                defaultMessage: action.button?.tooltip,\n            });\n        }\n\n        return {\n            buttonName,\n            buttonTooltip,\n        };\n    }, [action, intl]);\n};\n\nexport const useLocalizedFileEntryStrings = (file: Nullable<FileData>) => {\n    const intl = useIntl();\n    const formatters = useContext(ChonkyFormattersContext);\n    return useMemo(() => {\n        return {\n            fileModDateString: formatters.formatFileModDate(intl, file),\n            fileSizeString: formatters.formatFileSize(intl, file),\n        };\n    }, [file, formatters, intl]);\n};\n\nexport const defaultFormatters: ChonkyFormatters = {\n    formatFileModDate: (\n        intl: IntlShape,\n        file: Nullable<FileData>\n    ): Nullable<string> => {\n        const safeModDate = FileHelper.getModDate(file);\n        if (safeModDate) {\n            return intl.formatDate(safeModDate, {\n                dateStyle: 'medium',\n                timeStyle: 'short',\n            });\n        } else {\n            return null;\n        }\n    },\n    formatFileSize: (_intl: IntlShape, file: Nullable<FileData>): Nullable<string> => {\n        if (!file || typeof file.size !== 'number') return null;\n\n        const size = file.size;\n        const sizeData = filesize(size, { bits: false, output: 'object' }) as any;\n        if (sizeData.symbol === 'B') {\n            return `${Math.round(sizeData.value / 10) / 100.0} KB`;\n        } else if (sizeData.symbol === 'KB') {\n            return `${Math.round(sizeData.value)} ${sizeData.symbol}`;\n        }\n        return `${sizeData.value} ${sizeData.symbol}`;\n    },\n};\n\nexport const ChonkyFormattersContext = createContext(defaultFormatters);\n","// Used in React hooks to indicate empty deps are intentional.\nimport { MaybePromise, Nullable, WritableProps } from 'tsdef';\n\nimport { FileAction, FileActionEffect } from '../types/action.types';\nimport { Logger } from './logger';\n\n// Used in contexts that need to provide some default value for a function.\n// eslint-disable-next-line no-unused-vars,@typescript-eslint/no-unused-vars\nexport const NOOP_FUNCTION = (...args: any[]) => {\n    Logger.warn(\n        `The \"NOOP_FUNCTION\" from the constants module was called. ` +\n            `This can indicate a bug in one of the components. Supplied args:`,\n        args\n    );\n};\n\nexport const isPromise = <T>(value: MaybePromise<T> | any): value is Promise<T> => {\n    if (typeof value !== 'object' || !value) return false;\n    const then = (value as Promise<T>).then;\n    return then && typeof then === 'function';\n};\n\nexport const defineFileAction = <Action extends FileAction>(\n    action: Action,\n    effect?: FileActionEffect<FileAction>\n): WritableProps<Action> => {\n    if (action.__payloadType !== undefined && (action.hotkeys || action.button)) {\n        const errorMessage =\n            `Invalid definition was provided for file action \"${action.id}\". Actions ` +\n            `that specify hotkeys or buttons cannot define a payload type. If ` +\n            `your application requires this functionality, define two actions ` +\n            `and chain them using effects.`;\n        Logger.error(errorMessage);\n        throw new Error(errorMessage);\n    }\n\n    action.effect = effect;\n    return action;\n};\n\n/**\n * Recursively check the current element and the parent elements, going bottom-up.\n * Returns the first element to match the predicate, otherwise returns null if such\n * element is not found.\n */\nexport const findElementAmongAncestors = (\n    maybeElement: HTMLElement | any,\n    predicate: (maybeElement: HTMLElement | any) => boolean\n): Nullable<HTMLElement> => {\n    if (!maybeElement) return maybeElement;\n\n    if (predicate(maybeElement)) return maybeElement;\n\n    if (maybeElement.parentElement) {\n        return findElementAmongAncestors(maybeElement.parentElement, predicate);\n    }\n\n    return null;\n};\n\nexport const elementIsInsideButton = (buttonCandidate: HTMLElement | any): boolean => {\n    return !!findElementAmongAncestors(\n        buttonCandidate,\n        (element: any) => element.tagName && element.tagName.toLowerCase() === 'button'\n    );\n};\n\nexport const getValueOrFallback = <T extends any>(\n    value: T | undefined,\n    fallback: T,\n    desiredType?: 'boolean' | 'string' | 'number'\n): NonNullable<T> => {\n    if (desiredType) {\n        return (typeof value === desiredType ? value : fallback) as NonNullable<T>;\n    }\n    return (value !== undefined ? value : fallback) as NonNullable<T>;\n};\n","import { reduxActions } from '../redux/reducers';\nimport {\n    getFileData, getIsFileSelected, selectDisableSelection, selectors, selectParentFolder,\n    selectSelectionSize\n} from '../redux/selectors';\nimport { reduxThunks } from '../redux/thunks';\nimport { thunkRequestFileAction } from '../redux/thunks/dispatchers.thunks';\nimport {\n    ChangeSelectionPayload, EndDragNDropPayload, KeyboardClickFilePayload, MouseClickFilePayload,\n    MoveFilesPayload, OpenFileContextMenuPayload, OpenFilesPayload, StartDragNDropPayload\n} from '../types/action-payloads.types';\nimport { ChonkyIconName } from '../types/icons.types';\nimport { FileHelper } from '../util/file-helper';\nimport { defineFileAction } from '../util/helpers';\nimport { Logger } from '../util/logger';\nimport { ChonkyActions } from './index';\n\nexport const EssentialActions = {\n    /**\n     * Action that is dispatched when the user clicks on a file entry using their mouse.\n     * Both single clicks and double clicks trigger this action.\n     */\n    MouseClickFile: defineFileAction(\n        {\n            id: 'mouse_click_file',\n            __payloadType: {} as MouseClickFilePayload,\n        } as const,\n        ({ payload, reduxDispatch, getReduxState }) => {\n            if (payload.clickType === 'double') {\n                if (FileHelper.isOpenable(payload.file)) {\n                    reduxDispatch(\n                        thunkRequestFileAction(ChonkyActions.OpenFiles, {\n                            targetFile: payload.file,\n\n                            // To simulate Windows Explorer and Nautilus behaviour,\n                            // a double click on a file only opens that file even if\n                            // there is a selection.\n                            files: [payload.file],\n                        })\n                    );\n                }\n            } else {\n                // We're dealing with a single click\n\n                const disableSelection = selectDisableSelection(getReduxState());\n                if (FileHelper.isSelectable(payload.file) && !disableSelection) {\n                    if (payload.ctrlKey) {\n                        // Multiple selection\n                        reduxDispatch(\n                            reduxActions.toggleSelection({\n                                fileId: payload.file.id,\n                                exclusive: false,\n                            })\n                        );\n                        reduxDispatch(\n                            reduxActions.setLastClickIndex({\n                                index: payload.fileDisplayIndex,\n                                fileId: payload.file.id,\n                            })\n                        );\n                    } else if (payload.shiftKey) {\n                        // Range selection\n                        const lastClickIndex = selectors.getLastClickIndex(getReduxState());\n                        if (typeof lastClickIndex === 'number') {\n                            // We have the index of the previous click\n                            let rangeStart = lastClickIndex;\n                            let rangeEnd = payload.fileDisplayIndex;\n                            if (rangeStart > rangeEnd) {\n                                [rangeStart, rangeEnd] = [rangeEnd, rangeStart];\n                            }\n\n                            reduxDispatch(reduxThunks.selectRange({ rangeStart, rangeEnd }));\n                        } else {\n                            // Since we can't do a range selection, do a\n                            // multiple selection\n                            reduxDispatch(\n                                reduxActions.toggleSelection({\n                                    fileId: payload.file.id,\n                                    exclusive: false,\n                                })\n                            );\n                            reduxDispatch(\n                                reduxActions.setLastClickIndex({\n                                    index: payload.fileDisplayIndex,\n                                    fileId: payload.file.id,\n                                })\n                            );\n                        }\n                    } else {\n                        // Exclusive selection\n                        reduxDispatch(\n                            reduxActions.toggleSelection({\n                                fileId: payload.file.id,\n                                exclusive: true,\n                            })\n                        );\n                        reduxDispatch(\n                            reduxActions.setLastClickIndex({\n                                index: payload.fileDisplayIndex,\n                                fileId: payload.file.id,\n                            })\n                        );\n                    }\n                } else {\n                    if (!payload.ctrlKey && !disableSelection) {\n                        reduxDispatch(reduxActions.clearSelection());\n                    }\n                    reduxDispatch(\n                        reduxActions.setLastClickIndex({\n                            index: payload.fileDisplayIndex,\n                            fileId: payload.file.id,\n                        })\n                    );\n                }\n            }\n        }\n    ),\n    /**\n     * Action that is dispatched when the user \"clicks\" on a file using their keyboard.\n     * Using Space and Enter keys counts as clicking.\n     */\n    KeyboardClickFile: defineFileAction(\n        {\n            id: 'keyboard_click_file',\n            __payloadType: {} as KeyboardClickFilePayload,\n        } as const,\n        ({ payload, reduxDispatch, getReduxState }) => {\n            reduxDispatch(\n                reduxActions.setLastClickIndex({\n                    index: payload.fileDisplayIndex,\n                    fileId: payload.file.id,\n                })\n            );\n            if (payload.enterKey) {\n                // We only dispatch the Open Files action here when the selection is\n                // empty. Otherwise, `Enter` key presses are handled by the\n                // hotkey manager for the Open Files action.\n                if (selectSelectionSize(getReduxState()) === 0) {\n                    reduxDispatch(\n                        thunkRequestFileAction(ChonkyActions.OpenFiles, {\n                            targetFile: payload.file,\n                            files: [payload.file],\n                        })\n                    );\n                }\n            } else if (payload.spaceKey && FileHelper.isSelectable(payload.file)) {\n                reduxDispatch(\n                    reduxActions.toggleSelection({\n                        fileId: payload.file.id,\n                        exclusive: payload.ctrlKey,\n                    })\n                );\n            }\n        }\n    ),\n    /**\n     * Action that is dispatched when user starts dragging some file.\n     */\n    StartDragNDrop: defineFileAction(\n        {\n            id: 'start_drag_n_drop',\n            __payloadType: {} as StartDragNDropPayload,\n        } as const,\n        ({ payload, reduxDispatch, getReduxState }) => {\n            const file = payload.draggedFile;\n            if (!getIsFileSelected(getReduxState(), file)) {\n                if (FileHelper.isSelectable(file)) {\n                    reduxDispatch(\n                        reduxActions.selectFiles({\n                            fileIds: [file.id],\n                            reset: true,\n                        })\n                    );\n                }\n            }\n        }\n    ),\n    /**\n     * Action that is dispatched when user either cancels the drag & drop interaction,\n     * or drops a file somewhere.\n     */\n    EndDragNDrop: defineFileAction(\n        {\n            id: 'end_drag_n_drop',\n            __payloadType: {} as EndDragNDropPayload,\n        } as const,\n        ({ payload, reduxDispatch, getReduxState }) => {\n            if (getIsFileSelected(getReduxState(), payload.destination)) {\n                // Can't drop a selection into itself\n                return;\n            }\n\n            const { draggedFile, selectedFiles } = payload as EndDragNDropPayload;\n            const droppedFiles = selectedFiles.length > 0 ? selectedFiles : [draggedFile];\n            reduxDispatch(\n                thunkRequestFileAction(ChonkyActions.MoveFiles, {\n                    ...payload,\n                    files: droppedFiles,\n                })\n            );\n        }\n    ),\n    /**\n     * Action that is dispatched when user moves files from one folder to another,\n     * usually by dragging & dropping some files into the folder.\n     */\n    MoveFiles: defineFileAction({\n        id: 'move_files',\n        __payloadType: {} as MoveFilesPayload,\n    } as const),\n    /**\n     * Action that is dispatched when the selection changes for any reason.\n     */\n    ChangeSelection: defineFileAction({\n        id: 'change_selection',\n        __payloadType: {} as ChangeSelectionPayload,\n    } as const),\n    /**\n     * Action that is dispatched when user wants to open some files. This action is\n     * often triggered by other actions.\n     */\n    OpenFiles: defineFileAction({\n        id: 'open_files',\n        __payloadType: {} as OpenFilesPayload,\n    } as const),\n    /**\n     * Action that is triggered when user wants to go up a directory.\n     */\n    OpenParentFolder: defineFileAction(\n        {\n            id: 'open_parent_folder',\n            hotkeys: ['backspace'],\n            button: {\n                name: 'Go up a directory',\n                toolbar: true,\n                contextMenu: false,\n                icon: ChonkyIconName.openParentFolder,\n                iconOnly: true,\n            },\n        } as const,\n        ({ reduxDispatch, getReduxState }) => {\n            const parentFolder = selectParentFolder(getReduxState());\n            if (FileHelper.isOpenable(parentFolder)) {\n                reduxDispatch(\n                    thunkRequestFileAction(ChonkyActions.OpenFiles, {\n                        targetFile: parentFolder,\n                        files: [parentFolder],\n                    })\n                );\n            } else {\n                Logger.warn(\n                    'Open parent folder effect was triggered  even though the parent folder' +\n                        ' is not openable. This indicates a bug in presentation components.'\n                );\n            }\n        }\n    ),\n    /**\n     * Action that is dispatched when user opens the context menu, either by right click\n     * on something or using the context menu button on their keyboard.\n     */\n    OpenFileContextMenu: defineFileAction(\n        {\n            id: 'open_file_context_menu',\n            __payloadType: {} as OpenFileContextMenuPayload,\n        } as const,\n        ({ payload, reduxDispatch, getReduxState }) => {\n            // TODO: Check if the context menu component is actually enabled. There is a\n            //  chance it doesn't matter if it is enabled or not - if it is not mounted,\n            //  the action will simply have no effect. It also allows users to provide\n            //  their own components - however, users could also flip the \"context menu\n            //  component mounted\" switch...\n            const triggerFile = getFileData(getReduxState(), payload.triggerFileId);\n            if (triggerFile) {\n                const fileSelected = getIsFileSelected(getReduxState(), triggerFile);\n                if (!fileSelected) {\n                    // If file is selected, we leave the selection as is. If it is not\n                    // selected, it means user right clicked the file with no selection.\n                    // We simulate the Windows Explorer/Nautilus behaviour of moving\n                    // selection to this file.\n                    if (FileHelper.isSelectable(triggerFile)) {\n                        reduxDispatch(\n                            reduxActions.selectFiles({\n                                fileIds: [payload.triggerFileId],\n                                reset: true,\n                            })\n                        );\n                    } else {\n                        reduxDispatch(reduxActions.clearSelection());\n                    }\n                }\n            }\n\n            reduxDispatch(\n                reduxActions.showContextMenu({\n                    triggerFileId: payload.triggerFileId,\n                    mouseX: payload.clientX - 2,\n                    mouseY: payload.clientY - 4,\n                })\n            );\n        }\n    ),\n};\n","import { ChonkyThunk } from '../../types/redux.types';\nimport { FileHelper } from '../../util/file-helper';\nimport { reduxActions } from '../reducers';\nimport { selectors } from '../selectors';\n\nexport const reduxThunks = {\n    selectRange: (params: {\n        rangeStart: number;\n        rangeEnd: number;\n        reset?: boolean;\n    }): ChonkyThunk => (dispatch, getState) => {\n        const state = getState();\n        if (state.disableSelection) return;\n        const displayFileIds = selectors.getDisplayFileIds(state);\n        const fileIdsToSelect = displayFileIds\n            .slice(params.rangeStart, params.rangeEnd + 1)\n            .filter(id => id && FileHelper.isSelectable(state.fileMap[id])) as string[];\n        dispatch(\n            reduxActions.selectFiles({\n                fileIds: fileIdsToSelect,\n                reset: !!params.reset,\n            })\n        );\n    },\n};\n","import { Nullable } from 'tsdef';\n\nimport { selectFocusSearchInput } from '../redux/selectors';\nimport { thunkRequestFileAction } from '../redux/thunks/dispatchers.thunks';\nimport { FileSelectionTransform } from '../types/action.types';\nimport { FileViewMode } from '../types/file-view.types';\nimport { FileData } from '../types/file.types';\nimport { ChonkyIconName } from '../types/icons.types';\nimport { FileHelper } from '../util/file-helper';\nimport { defineFileAction } from '../util/helpers';\nimport { EssentialActions } from './essential';\nimport { OptionIds } from './option-ids';\n\nexport const DefaultActions = {\n    /**\n     * Action that can be used to open currently selected files.\n     */\n    OpenSelection: defineFileAction(\n        {\n            id: 'open_selection',\n            hotkeys: ['enter'],\n            requiresSelection: true,\n            fileFilter: FileHelper.isOpenable,\n            button: {\n                name: 'Open selection',\n                toolbar: true,\n                contextMenu: true,\n                group: 'Actions',\n                icon: ChonkyIconName.openFiles,\n            },\n        } as const,\n        ({ state, reduxDispatch }) => {\n            reduxDispatch(\n                thunkRequestFileAction(EssentialActions.OpenFiles, {\n                    files: state.selectedFilesForAction!,\n                })\n            );\n            return undefined;\n        }\n    ),\n    /**\n     * Action that selects all files.\n     */\n    SelectAllFiles: defineFileAction({\n        id: 'select_all_files',\n        hotkeys: ['ctrl+a'],\n        button: {\n            name: 'Select all files',\n            toolbar: true,\n            contextMenu: true,\n            group: 'Actions',\n            icon: ChonkyIconName.selectAllFiles,\n        },\n        selectionTransform: (({ fileIds, hiddenFileIds }) => {\n            const newSelection = new Set<string>();\n            fileIds.map(fileId => {\n                // We don't need to check if file is selectable because Chonky does\n                // it own checks internally.\n                if (!hiddenFileIds.has(fileId)) newSelection.add(fileId);\n            });\n            return newSelection;\n        }) as FileSelectionTransform,\n    } as const),\n    /**\n     * Action that clear the file selection.\n     */\n    ClearSelection: defineFileAction({\n        id: 'clear_selection',\n        hotkeys: ['escape'],\n        button: {\n            name: 'Clear selection',\n            toolbar: true,\n            contextMenu: true,\n            group: 'Actions',\n            icon: ChonkyIconName.clearSelection,\n        },\n        selectionTransform: (({ prevSelection }) => {\n            if (prevSelection.size === 0) return null;\n            return new Set<string>();\n        }) as FileSelectionTransform,\n    } as const),\n    /**\n     * Action that enables List view.\n     */\n    EnableListView: defineFileAction({\n        id: 'enable_list_view',\n        fileViewConfig: {\n            mode: FileViewMode.List,\n            entryHeight: 30,\n        },\n        button: {\n            name: 'Switch to List view',\n            toolbar: true,\n            icon: ChonkyIconName.list,\n            iconOnly: true,\n        },\n    } as const),\n    /**\n     * Action that enables Compact view. Note that compact view is still\n     * experimental and should not be used in production.\n     */\n    EnableCompactView: defineFileAction({\n        // TODO: Don't enable until compact view is fully supported\n        id: 'enable_compact_view',\n        fileViewConfig: {\n            mode: FileViewMode.Compact,\n            entryHeight: 40,\n            entryWidth: 220,\n        },\n        button: {\n            name: 'Switch to Compact view',\n            toolbar: true,\n            icon: ChonkyIconName.compact,\n            iconOnly: true,\n        },\n    } as const),\n    /**\n     * Action that enables Grid view.\n     */\n    EnableGridView: defineFileAction({\n        id: 'enable_grid_view',\n        fileViewConfig: { mode: FileViewMode.Grid, entryWidth: 165, entryHeight: 130 },\n        button: {\n            name: 'Switch to Grid view',\n            toolbar: true,\n            icon: ChonkyIconName.smallThumbnail,\n            iconOnly: true,\n        },\n    } as const),\n    /**\n     * Action that sorts files by `file.name`.\n     */\n    SortFilesByName: defineFileAction({\n        id: 'sort_files_by_name',\n        sortKeySelector: (file: Nullable<FileData>) => (file ? file.name.toLowerCase() : undefined),\n        button: {\n            name: 'Sort by name',\n            toolbar: true,\n            group: 'Options',\n        },\n    } as const),\n    /**\n     * Action that sorts files by `file.size`.\n     */\n    SortFilesBySize: defineFileAction({\n        id: 'sort_files_by_size',\n        sortKeySelector: (file: Nullable<FileData>) => (file ? file.size : undefined),\n        button: {\n            name: 'Sort by size',\n            toolbar: true,\n            group: 'Options',\n        },\n    } as const),\n    /**\n     * Action that sorts files by `file.modDate`.\n     */\n    SortFilesByDate: defineFileAction({\n        id: 'sort_files_by_date',\n        sortKeySelector: (file: Nullable<FileData>) => (file ? file.modDate : undefined),\n        button: {\n            name: 'Sort by date',\n            toolbar: true,\n            group: 'Options',\n        },\n    } as const),\n    /**\n     * Action that toggles whether hidden files are shown to the user or not.\n     */\n    ToggleHiddenFiles: defineFileAction({\n        id: 'toggle_hidden_files',\n        hotkeys: ['ctrl+h'],\n        option: {\n            id: OptionIds.ShowHiddenFiles,\n            defaultValue: true,\n        },\n        button: {\n            name: 'Show hidden files',\n            toolbar: true,\n            group: 'Options',\n        },\n    } as const),\n    /**\n     * Action that toggles whether folders should appear before files regardless of\n     * current sort function.\n     */\n    ToggleShowFoldersFirst: defineFileAction({\n        id: 'toggle_show_folders_first',\n        option: {\n            id: OptionIds.ShowFoldersFirst,\n            defaultValue: true,\n        },\n        button: {\n            name: 'Show folders first',\n            toolbar: true,\n            group: 'Options',\n        },\n    } as const),\n    /**\n     * Action that focuses the search input when it is dispatched.\n     */\n    FocusSearchInput: defineFileAction(\n        {\n            id: 'focus_search_input',\n            hotkeys: ['ctrl+f'],\n        } as const,\n        ({ getReduxState }) => {\n            const focusSearchInput = selectFocusSearchInput(getReduxState());\n            if (focusSearchInput) focusSearchInput();\n        }\n    ),\n    /**\n     * Action that enables List view.\n     */\n    ToggleDarkMode: defineFileAction({\n        id: 'enable_dark_mode',\n        option: {\n            id: OptionIds.DarkMode,\n            defaultValue: false,\n        },\n        button: {\n            name: 'Enable dark mode',\n            toolbar: true,\n            icon: ChonkyIconName.list,\n            iconOnly: true,\n        },\n    } as const),\n};\n","import { ChonkyIconName } from '../types/icons.types';\nimport { defineFileAction } from '../util/helpers';\n\nexport const ExtraActions = {\n    /**\n     * Action that adds a button and shortcut to copy files.\n     */\n    CopyFiles: defineFileAction({\n        id: 'copy_files',\n        requiresSelection: true,\n        hotkeys: ['ctrl+c'],\n        button: {\n            name: 'Copy selection',\n            toolbar: true,\n            contextMenu: true,\n            group: 'Actions',\n            icon: ChonkyIconName.copy,\n        },\n    } as const),\n    /**\n     * Action that adds a button to create a new folder.\n     */\n    CreateFolder: defineFileAction({\n        id: 'create_folder',\n        button: {\n            name: 'Create folder',\n            toolbar: true,\n            tooltip: 'Create a folder',\n            icon: ChonkyIconName.folderCreate,\n        },\n    } as const),\n    /**\n     * Action that adds a button to upload files.\n     */\n    UploadFiles: defineFileAction({\n        id: 'upload_files',\n        button: {\n            name: 'Upload files',\n            toolbar: true,\n            tooltip: 'Upload files',\n            icon: ChonkyIconName.upload,\n        },\n    } as const),\n    /**\n     * Action that adds a button to download files.\n     */\n    DownloadFiles: defineFileAction({\n        id: 'download_files',\n        requiresSelection: true,\n        button: {\n            name: 'Download files',\n            toolbar: true,\n            contextMenu: true,\n            group: 'Actions',\n            icon: ChonkyIconName.download,\n        },\n    } as const),\n    /**\n     * Action that adds a button and shortcut to delete files.\n     */\n    DeleteFiles: defineFileAction({\n        id: 'delete_files',\n        requiresSelection: true,\n        hotkeys: ['delete'],\n        button: {\n            name: 'Delete files',\n            toolbar: true,\n            contextMenu: true,\n            group: 'Actions',\n            icon: ChonkyIconName.trash,\n        },\n    } as const),\n};\n","import { DefaultActions } from './default';\nimport { EssentialActions } from './essential';\nimport { ExtraActions } from './extra';\n\nexport { OptionIds } from './option-ids';\n\nexport const ChonkyActions = {\n    ...EssentialActions,\n    ...DefaultActions,\n    ...ExtraActions,\n};\n\nexport const EssentialFileActions = [\n    ChonkyActions.MouseClickFile,\n    ChonkyActions.KeyboardClickFile,\n    ChonkyActions.StartDragNDrop,\n    ChonkyActions.EndDragNDrop,\n    ChonkyActions.MoveFiles,\n    ChonkyActions.ChangeSelection,\n    ChonkyActions.OpenFiles,\n    ChonkyActions.OpenParentFolder,\n    ChonkyActions.OpenFileContextMenu,\n];\n\nexport const DefaultFileActions = [\n    ChonkyActions.OpenSelection,\n    ChonkyActions.SelectAllFiles,\n    ChonkyActions.ClearSelection,\n    ChonkyActions.EnableListView,\n    // TODO: Don't enable until compact view is fully supported\n    // ChonkyActions.EnableCompactView,\n    ChonkyActions.EnableGridView,\n    ChonkyActions.SortFilesByName,\n    ChonkyActions.SortFilesBySize,\n    ChonkyActions.SortFilesByDate,\n    ChonkyActions.ToggleHiddenFiles,\n    ChonkyActions.ToggleShowFoldersFirst,\n    ChonkyActions.FocusSearchInput,\n];\n","import { ChonkyActions } from '../action-definitions/index';\nimport { RootState } from '../types/redux.types';\nimport { SortOrder } from '../types/sort.types';\n\nexport const initialRootState: RootState = {\n    instanceId: 'CHONKY_INVALID_ID', // should be overwritten by preloaded state\n\n    externalFileActionHandler: null,\n\n    rawFileActions: [],\n    fileActionsErrorMessages: [],\n    fileActionMap: {},\n    fileActionIds: [],\n    toolbarItems: [],\n    contextMenuItems: [],\n\n    rawFolderChain: null,\n    folderChainErrorMessages: [],\n    folderChain: [],\n\n    rawFiles: [],\n    filesErrorMessages: [],\n    fileMap: {},\n    fileIds: [],\n    cleanFileIds: [],\n\n    sortedFileIds: [],\n    hiddenFileIdMap: {},\n\n    focusSearchInput: null,\n    searchString: '',\n    searchMode: 'currentFolder',\n\n    selectionMap: {},\n    disableSelection: false,\n\n    fileViewConfig: ChonkyActions.EnableGridView.fileViewConfig,\n\n    sortActionId: null,\n    sortOrder: SortOrder.ASC,\n\n    optionMap: {},\n\n    thumbnailGenerator: null,\n    doubleClickDelay: 300,\n    disableDragAndDrop: false,\n    clearSelectionOnOutsideClick: true,\n\n    lastClick: null,\n\n    contextMenuMounted: false,\n    contextMenuConfig: null,\n};\n","import { Nilable, Nullable } from 'tsdef';\n\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nimport { GenericFileActionHandler } from '../types/action-handler.types';\nimport { FileActionMenuItem } from '../types/action-menus.types';\nimport { FileAction, FileActionMap } from '../types/action.types';\nimport { ContextMenuConfig } from '../types/context-menu.types';\nimport { FileViewConfig } from '../types/file-view.types';\nimport { FileArray, FileIdTrueMap, FileMap } from '../types/file.types';\nimport { OptionMap } from '../types/options.types';\nimport { RootState } from '../types/redux.types';\nimport { SortOrder } from '../types/sort.types';\nimport { ThumbnailGenerator } from '../types/thumbnails.types';\nimport { FileHelper } from '../util/file-helper';\nimport { sanitizeInputArray } from './files-transforms';\nimport { initialRootState } from './state';\n\nconst reducers = {\n    setExternalFileActionHandler(\n        state: RootState,\n        action: PayloadAction<Nilable<GenericFileActionHandler<FileAction>>>\n    ) {\n        state.externalFileActionHandler = action.payload ?? null;\n    },\n    setRawFileActions(state: RootState, action: PayloadAction<FileAction[] | any>) {\n        state.rawFileActions = action.payload;\n    },\n    setFileActionsErrorMessages(state: RootState, action: PayloadAction<string[]>) {\n        state.fileActionsErrorMessages = action.payload;\n    },\n    setFileActions(state: RootState, action: PayloadAction<FileAction[]>) {\n        const fileActionMap: FileActionMap = {};\n        action.payload.map(a => (fileActionMap[a.id] = a));\n        const fileIds = action.payload.map(a => a.id);\n\n        state.fileActionMap = fileActionMap as FileMap;\n        state.fileActionIds = fileIds;\n    },\n    updateFileActionMenuItems(state: RootState, action: PayloadAction<[FileActionMenuItem[], FileActionMenuItem[]]>) {\n        [state.toolbarItems, state.contextMenuItems] = action.payload;\n    },\n    setRawFolderChain(state: RootState, action: PayloadAction<FileArray | any>) {\n        const rawFolderChain = action.payload;\n        const { sanitizedArray: folderChain, errorMessages } = sanitizeInputArray('folderChain', rawFolderChain);\n        state.rawFolderChain = rawFolderChain;\n        state.folderChain = folderChain;\n        state.folderChainErrorMessages = errorMessages;\n    },\n    setRawFiles(state: RootState, action: PayloadAction<FileArray | any>) {\n        const rawFiles = action.payload;\n        const { sanitizedArray: files, errorMessages } = sanitizeInputArray('files', rawFiles);\n        state.rawFiles = rawFiles;\n        state.filesErrorMessages = errorMessages;\n\n        const fileMap: FileMap = {};\n        files.forEach(f => {\n            if (f) fileMap[f.id] = f;\n        });\n        const fileIds = files.map(f => (f ? f.id : null));\n        const cleanFileIds = fileIds.filter(f => !!f) as string[];\n\n        state.fileMap = fileMap;\n        state.fileIds = fileIds;\n        state.cleanFileIds = cleanFileIds;\n\n        // Cleanup selection\n        for (const selectedFileId of Object.keys(state.selectionMap)) {\n            if (!fileMap[selectedFileId]) {\n                delete state.selectionMap[selectedFileId];\n            }\n        }\n    },\n    setSortedFileIds(state: RootState, action: PayloadAction<Nullable<string>[]>) {\n        state.sortedFileIds = action.payload;\n    },\n    setHiddenFileIds(state: RootState, action: PayloadAction<FileIdTrueMap>) {\n        state.hiddenFileIdMap = action.payload;\n\n        // Cleanup selection\n        for (const selectedFileId of Object.keys(state.selectionMap)) {\n            if (state.hiddenFileIdMap[selectedFileId]) {\n                delete state.selectionMap[selectedFileId];\n            }\n        }\n    },\n    setFocusSearchInput(state: RootState, action: PayloadAction<Nullable<() => void>>) {\n        state.focusSearchInput = action.payload;\n    },\n    setSearchString(state: RootState, action: PayloadAction<string>) {\n        state.searchString = action.payload;\n    },\n    selectAllFiles(state: RootState) {\n        state.fileIds\n            .filter(id => id && FileHelper.isSelectable(state.fileMap[id]))\n            .map(id => (id ? (state.selectionMap[id] = true) : null));\n    },\n    selectFiles(state: RootState, action: PayloadAction<{ fileIds: string[]; reset: boolean }>) {\n        if (state.disableSelection) return;\n        if (action.payload.reset) state.selectionMap = {};\n        action.payload.fileIds\n            .filter(id => id && FileHelper.isSelectable(state.fileMap[id]))\n            .map(id => (state.selectionMap[id] = true));\n    },\n    toggleSelection(state: RootState, action: PayloadAction<{ fileId: string; exclusive: boolean }>) {\n        if (state.disableSelection) return;\n        const oldValue = !!state.selectionMap[action.payload.fileId];\n        if (action.payload.exclusive) state.selectionMap = {};\n        if (oldValue) delete state.selectionMap[action.payload.fileId];\n        else if (FileHelper.isSelectable(state.fileMap[action.payload.fileId])) {\n            state.selectionMap[action.payload.fileId] = true;\n        }\n    },\n    clearSelection(state: RootState) {\n        if (state.disableSelection) return;\n        if (Object.keys(state.selectionMap).length !== 0) state.selectionMap = {};\n    },\n    setSelectionDisabled(state: RootState, action: PayloadAction<boolean>) {\n        state.disableSelection = action.payload;\n        if (Object.keys(state.selectionMap).length !== 0) state.selectionMap = {};\n    },\n    setFileViewConfig(state: RootState, action: PayloadAction<FileViewConfig>) {\n        state.fileViewConfig = action.payload;\n    },\n    setSort(state: RootState, action: PayloadAction<{ actionId: string; order: SortOrder }>) {\n        state.sortActionId = action.payload.actionId;\n        state.sortOrder = action.payload.order;\n    },\n    setOptionDefaults(state: RootState, action: PayloadAction<OptionMap>) {\n        for (const optionId of Object.keys(action.payload)) {\n            if (optionId in state.optionMap) continue;\n            state.optionMap[optionId] = action.payload[optionId];\n        }\n    },\n    toggleOption(state: RootState, action: PayloadAction<string>) {\n        state.optionMap[action.payload] = !state.optionMap[action.payload];\n    },\n    setThumbnailGenerator(state: RootState, action: PayloadAction<Nullable<ThumbnailGenerator>>) {\n        state.thumbnailGenerator = action.payload;\n    },\n    setDoubleClickDelay(state: RootState, action: PayloadAction<number>) {\n        state.doubleClickDelay = action.payload;\n    },\n    setDisableDragAndDrop(state: RootState, action: PayloadAction<boolean>) {\n        state.disableDragAndDrop = action.payload;\n    },\n    setClearSelectionOnOutsideClick(state: RootState, action: PayloadAction<boolean>) {\n        state.clearSelectionOnOutsideClick = action.payload;\n    },\n    setLastClickIndex(state: RootState, action: PayloadAction<Nullable<{ index: number; fileId: string }>>) {\n        state.lastClick = action.payload;\n    },\n    setContextMenuMounted(state: RootState, action: PayloadAction<boolean>) {\n        state.contextMenuMounted = action.payload;\n    },\n    showContextMenu(state: RootState, action: PayloadAction<ContextMenuConfig>) {\n        state.contextMenuConfig = action.payload;\n    },\n    hideContextMenu(state: RootState) {\n        if (!state.contextMenuConfig) return;\n        state.contextMenuConfig = null;\n    },\n};\n\nexport const { actions: reduxActions, reducer: rootReducer } = createSlice({\n    name: 'root',\n    initialState: initialRootState,\n    reducers,\n});\n","import { useCallback, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { configureStore } from '@reduxjs/toolkit';\n\nimport { RootState } from '../types/redux.types';\nimport { useStaticValue } from '../util/hooks-helpers';\nimport { rootReducer } from './reducers';\nimport { initialRootState } from './state';\nimport { useStoreWatchers } from './watchers';\n\nexport const useChonkyStore = (chonkyInstanceId: string) => {\n    const store = useStaticValue(() => {\n        const preloadedState: RootState = {\n            ...initialRootState,\n            instanceId: chonkyInstanceId,\n        };\n\n        return configureStore({\n            preloadedState: preloadedState as any,\n            reducer: rootReducer,\n            middleware: getDefaultMiddleware =>\n                getDefaultMiddleware({\n                    serializableCheck: false,\n                }),\n            devTools: { name: `chonky_${chonkyInstanceId}` },\n        });\n    });\n    useStoreWatchers(store);\n    return store;\n};\n\n/**\n * Hook that can be used with parametrized selectors.\n */\nexport const useParamSelector = <Args extends Array<any>, Value>(\n    parametrizedSelector: (...args: Args) => (state: RootState) => Value,\n    ...selectorParams: Args\n) => {\n    const selector = useCallback(\n        (state: RootState) => parametrizedSelector(...selectorParams)(state),\n        // eslint-disable-next-line\n        [parametrizedSelector, ...selectorParams]\n    );\n    return useSelector(selector);\n};\n\n/**\n * DTE - DispatchThunkEffect. This method is used to decrease code duplication in\n * main Chonky method.\n */\nexport const useDTE = <Args extends Array<any>>(actionCreator: (...args: Args) => any, ...selectorParams: Args) => {\n    const dispatch = useDispatch();\n    useEffect(\n        () => {\n            dispatch(actionCreator(...selectorParams));\n        },\n        // eslint-disable-next-line\n        [dispatch, actionCreator, ...selectorParams]\n    );\n};\n\nexport const usePropReduxUpdate = <Payload extends any>(actionCreator: (payload: Payload) => any, payload: Payload) => {\n    const dispatch = useDispatch();\n    useEffect(() => dispatch(actionCreator(payload)), [dispatch, actionCreator, payload]);\n};\n","/**\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\n * @copyright 2020\n * @license MIT\n */\n\nimport React from 'react';\n\nimport { ChonkyIconProps } from '../../types/icons.types';\n\nexport const ChonkyIconPlaceholder: React.FC<ChonkyIconProps> = () => {\n    // This component should not be rendered unless the user has misconfigured Chonky\n    const title =\n        'No icon component found. Please follow Chonky installation instructions to ' +\n        'provide a pre-made icon component (or a custom icon).';\n    return <span title={title}>⚠️</span>;\n};\n","import { ChonkyActions } from '../action-definitions/index';\nimport { ChonkyIconPlaceholder } from '../components/internal/ChonkyIconPlaceholder';\nimport { FileBrowserProps } from '../types/file-browser.types';\n\nexport type ChonkyConfig = Pick<\n    FileBrowserProps,\n    | 'fileActions'\n    | 'onFileAction'\n    | 'thumbnailGenerator'\n    | 'doubleClickDelay'\n    | 'disableSelection'\n    | 'disableDefaultFileActions'\n    | 'disableDragAndDrop'\n    | 'disableDragAndDropProvider'\n    | 'defaultSortActionId'\n    | 'defaultFileViewActionId'\n    | 'clearSelectionOnOutsideClick'\n    | 'iconComponent'\n    | 'darkMode'\n    | 'i18n'\n>;\n\nexport const defaultConfig: ChonkyConfig = {\n    fileActions: null,\n    onFileAction: null,\n    thumbnailGenerator: null,\n    doubleClickDelay: 300,\n    disableSelection: false,\n    disableDefaultFileActions: false,\n    disableDragAndDrop: false,\n    disableDragAndDropProvider: false,\n    defaultSortActionId: ChonkyActions.SortFilesByName.id,\n    defaultFileViewActionId: ChonkyActions.EnableGridView.id,\n    clearSelectionOnOutsideClick: true,\n    iconComponent: ChonkyIconPlaceholder,\n    darkMode: false,\n    i18n: {},\n};\n\nexport const setChonkyDefaults = (config: Partial<ChonkyConfig>) => {\n    for (const key of Object.keys(defaultConfig)) {\n        if (key in config) {\n            defaultConfig[key as keyof ChonkyConfig] = config[\n                key as keyof ChonkyConfig\n            ] as any;\n        }\n    }\n};\n","/**\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\n * @copyright 2019\n * @license MIT\n */\n\nimport { createContext, ElementType, useMemo } from 'react';\n\nimport ExactTrie from 'exact-trie';\nimport { Nullable } from 'tsdef';\n\nimport { ChonkyIconPlaceholder } from '../components/internal/ChonkyIconPlaceholder';\nimport { FileData } from '../types/file.types';\nimport { ChonkyIconName, ChonkyIconProps, FileIconData } from '../types/icons.types';\n\nexport const ChonkyIconContext = createContext<ElementType<ChonkyIconProps>>(ChonkyIconPlaceholder);\n\nexport const VideoExtensions: string[] = [\n    '3g2',\n    '3gp',\n    '3gpp',\n    'asf',\n    'asx',\n    'avi',\n    'dvb',\n    'f4v',\n    'fli',\n    'flv',\n    'fvt',\n    'h261',\n    'h263',\n    'h264',\n    'jpgm',\n    'jpgv',\n    'jpm',\n    'm1v',\n    'm2v',\n    'm4u',\n    'm4v',\n    'mj2',\n    'mjp2',\n    'mk3d',\n    'mks',\n    'mkv',\n    'mng',\n    'mov',\n    'movie',\n    'mp4',\n    'mp4v',\n    'mpe',\n    'mpeg',\n    'mpg',\n    'mpg4',\n    'mxu',\n    'ogv',\n    'pyv',\n    'qt',\n    'smv',\n    'ts',\n    'uvh',\n    'uvm',\n    'uvp',\n    'uvs',\n    'uvu',\n    'uvv',\n    'uvvh',\n    'uvvm',\n    'uvvp',\n    'uvvs',\n    'uvvu',\n    'uvvv',\n    'viv',\n    'vob',\n    'webm',\n    'wm',\n    'wmv',\n    'wmx',\n    'wvx',\n];\nexport const ImageExtensions: string[] = [\n    '3ds',\n    'apng',\n    'azv',\n    'bmp',\n    'bmp',\n    'btif',\n    'cgm',\n    'cmx',\n    'djv',\n    'djvu',\n    'drle',\n    'dwg',\n    'dxf',\n    'emf',\n    'exr',\n    'fbs',\n    'fh',\n    'fh4',\n    'fh5',\n    'fh7',\n    'fhc',\n    'fits',\n    'fpx',\n    'fst',\n    'g3',\n    'gif',\n    'heic',\n    'heics',\n    'heif',\n    'heifs',\n    'ico',\n    'ico',\n    'ief',\n    'jls',\n    'jng',\n    'jp2',\n    'jpe',\n    'jpeg',\n    'jpf',\n    'jpg',\n    'jpg2',\n    'jpm',\n    'jpx',\n    'jxr',\n    'ktx',\n    'mdi',\n    'mmr',\n    'npx',\n    'pbm',\n    'pct',\n    'pcx',\n    'pcx',\n    'pgm',\n    'pic',\n    'png',\n    'pnm',\n    'ppm',\n    'psd',\n    'pti',\n    'ras',\n    'rgb',\n    'rlc',\n    'sgi',\n    'sid',\n    'sub',\n    'svg',\n    'svgz',\n    't38',\n    'tap',\n    'tfx',\n    'tga',\n    'tif',\n    'tiff',\n    'uvg',\n    'uvi',\n    'uvvg',\n    'uvvi',\n    'vtf',\n    'wbmp',\n    'wdp',\n    'webp',\n    'wmf',\n    'xbm',\n    'xif',\n    'xpm',\n    'xwd',\n];\nexport const AudioExtensions: string[] = [\n    '3gpp',\n    'aac',\n    'adp',\n    'aif',\n    'aifc',\n    'aiff',\n    'au',\n    'caf',\n    'dra',\n    'dts',\n    'dtshd',\n    'ecelp4800',\n    'ecelp7470',\n    'ecelp9600',\n    'eol',\n    'flac',\n    'kar',\n    'lvp',\n    'm2a',\n    'm3a',\n    'm3u',\n    'm4a',\n    'm4a',\n    'mid',\n    'midi',\n    'mka',\n    'mp2',\n    'mp2a',\n    'mp3',\n    'mp3',\n    'mp4a',\n    'mpga',\n    'oga',\n    'ogg',\n    'pya',\n    'ra',\n    'ra',\n    'ram',\n    'rip',\n    'rmi',\n    'rmp',\n    's3m',\n    'sil',\n    'snd',\n    'spx',\n    'uva',\n    'uvva',\n    'wav',\n    'wav',\n    'wav',\n    'wax',\n    'weba',\n    'wma',\n    'xm',\n];\nexport const ColorsLight: string[] = [\n    '#bbbbbb',\n    '#d65c5c',\n    '#d6665c',\n    '#d6705c',\n    '#d67a5c',\n    '#d6855c',\n    '#d68f5c',\n    '#d6995c',\n    '#d6a35c',\n    '#d6ad5c',\n    '#d6b85c',\n    '#d6c25c',\n    '#d6cc5c',\n    '#d6d65c',\n    '#ccd65c',\n    '#c2d65c',\n    '#b8d65c',\n    '#add65c',\n    '#a3d65c',\n    '#99d65c',\n    '#8fd65c',\n    '#85d65c',\n    '#7ad65c',\n    '#70d65c',\n    '#66d65c',\n    '#5cd65c',\n    '#5cd666',\n    '#5cd670',\n    '#5cd67a',\n    '#5cd685',\n    '#5cd68f',\n    '#5cd699',\n    '#5cd6a3',\n    '#5cd6ad',\n    '#5cd6b8',\n    '#5cd6c2',\n    '#5cd6cc',\n    '#5cd6d6',\n    '#5cccd6',\n    '#5cc2d6',\n    '#5cb8d6',\n    '#5cadd6',\n    '#5ca3d6',\n    '#5c99d6',\n    '#5c8fd6',\n    '#5c85d6',\n    '#5c7ad6',\n    '#5c70d6',\n    '#5c66d6',\n    '#5c5cd6',\n    '#665cd6',\n    '#705cd6',\n    '#7a5cd6',\n    '#855cd6',\n    '#8f5cd6',\n    '#995cd6',\n    '#a35cd6',\n    '#ad5cd6',\n    '#b85cd6',\n    '#c25cd6',\n    '#cc5cd6',\n    '#d65cd6',\n    '#d65ccc',\n    '#d65cc2',\n    '#d65cb8',\n    '#d65cad',\n    '#d65ca3',\n    '#d65c99',\n    '#d65c8f',\n    '#d65c85',\n    '#d65c7a',\n    '#d65c70',\n    '#d65c66',\n];\nexport const ColorsDark: string[] = [\n    '#777',\n    '#8f3d3d',\n    '#8f443d',\n    '#8f4b3d',\n    '#8f523d',\n    '#8f583d',\n    '#8f5f3d',\n    '#8f663d',\n    '#8f6d3d',\n    '#8f743d',\n    '#8f7a3d',\n    '#8f813d',\n    '#8f883d',\n    '#8f8f3d',\n    '#888f3d',\n    '#818f3d',\n    '#7a8f3d',\n    '#748f3d',\n    '#6d8f3d',\n    '#668f3d',\n    '#5f8f3d',\n    '#588f3d',\n    '#528f3d',\n    '#4b8f3d',\n    '#448f3d',\n    '#3d8f3d',\n    '#3d8f44',\n    '#3d8f4b',\n    '#3d8f52',\n    '#3d8f58',\n    '#3d8f5f',\n    '#3d8f66',\n    '#3d8f6d',\n    '#3d8f74',\n    '#3d8f7a',\n    '#3d8f81',\n    '#3d8f88',\n    '#3d8f8f',\n    '#3d888f',\n    '#3d818f',\n    '#3d7a8f',\n    '#3d748f',\n    '#3d6d8f',\n    '#3d668f',\n    '#3d5f8f',\n    '#3d588f',\n    '#3d528f',\n    '#3d4b8f',\n    '#3d448f',\n    '#3d3d8f',\n    '#443d8f',\n    '#4b3d8f',\n    '#523d8f',\n    '#583d8f',\n    '#5f3d8f',\n    '#663d8f',\n    '#6d3d8f',\n    '#743d8f',\n    '#7a3d8f',\n    '#813d8f',\n    '#883d8f',\n    '#8f3d8f',\n    '#8f3d88',\n    '#8f3d81',\n    '#8f3d7a',\n    '#8f3d74',\n    '#8f3d6d',\n    '#8f3d66',\n    '#8f3d5f',\n    '#8f3d58',\n    '#8f3d52',\n    '#8f3d4b',\n    '#8f3d44',\n];\n\nconst getIconTrie = () => {\n    let colourIndex = 0;\n    const step = 5;\n\n    const IconsToExtensions = [\n        // Generic file types\n        [ChonkyIconName.license, ['license']],\n        [ChonkyIconName.config, ['sfk', 'ini', 'yml', 'toml', 'iml']],\n        [ChonkyIconName.model, ['3ds', 'obj', 'ply', 'fbx']],\n        [ChonkyIconName.database, ['csv', 'json', 'sql', 'sqlite', 'sqlite3', 'npy', 'npz', 'rec', 'idx', 'hdf5']],\n        [ChonkyIconName.text, ['txt', 'md', 'mdx']],\n        [ChonkyIconName.archive, ['zip', 'rar', 'tar', 'tar.gz', '7z']],\n        [ChonkyIconName.image, ImageExtensions],\n        [ChonkyIconName.video, VideoExtensions],\n        [ChonkyIconName.code, ['html', 'php', 'css', 'sass', 'scss', 'less', 'cpp', 'h', 'hpp', 'c', 'xml']],\n        [ChonkyIconName.info, ['bib', 'readme', 'nfo']],\n        [ChonkyIconName.key, ['pem', 'pub']],\n        [ChonkyIconName.lock, ['lock', 'lock.json', 'shrinkwrap.json']],\n        [ChonkyIconName.music, AudioExtensions],\n        [ChonkyIconName.terminal, ['run', 'sh']],\n        [ChonkyIconName.trash, ['.Trashes']],\n        [ChonkyIconName.users, ['authors', 'contributors']],\n\n        // OS file types\n        [ChonkyIconName.linux, ['AppImage']],\n        [ChonkyIconName.ubuntu, ['deb']],\n        [ChonkyIconName.windows, ['exe']],\n\n        // Programming language file types\n        [ChonkyIconName.rust, ['rs', 'rlib']],\n        [ChonkyIconName.python, ['py', 'ipynb']],\n        [ChonkyIconName.nodejs, ['js', 'jsx', 'ts', 'tsx', 'd.ts']],\n        [ChonkyIconName.php, ['php']],\n\n        // Development tools file types\n        [ChonkyIconName.git, ['.gitignore']],\n\n        // Brands file types\n        [ChonkyIconName.adobe, ['psd']],\n\n        // Other program file types\n        [ChonkyIconName.pdf, ['pdf']],\n        [ChonkyIconName.excel, ['xls', 'xlsx']],\n        [ChonkyIconName.word, ['doc', 'docx', 'odt']],\n        [ChonkyIconName.flash, ['swf']],\n    ] as const;\n\n    const exactTrie = new ExactTrie({ ignoreCase: true });\n    for (const pair of IconsToExtensions) {\n        const [icon, extensions] = pair;\n\n        for (let i = 0; i < extensions.length; ++i) {\n            colourIndex += step;\n            const colorCode = (colourIndex % (ColorsLight.length - 1)) + 1;\n            const iconData: FileIconData = {\n                icon,\n                colorCode,\n            };\n            exactTrie.put(extensions[i], iconData, true);\n        }\n    }\n\n    return exactTrie;\n};\n\nconst iconTrie = getIconTrie();\n\nexport const useIconData = (file: Nullable<FileData>): FileIconData => {\n    return useMemo(() => {\n        if (!file) return { icon: ChonkyIconName.loading, colorCode: 0 };\n        if (file.isDir === true) return { icon: ChonkyIconName.folder, colorCode: 0 };\n\n        const match = iconTrie.getWithCheckpoints(file.name, '.', true);\n        return match ? match : { icon: ChonkyIconName.file, colorCode: 32 };\n    }, [file]);\n};\n","import { Theme as MuiTheme } from '@material-ui/core/styles';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport classnames from 'classnames';\nimport { createUseStyles } from 'react-jss';\nimport { DeepPartial } from 'tsdef';\n\nexport const lightTheme = {\n    colors: {\n        debugRed: '#fabdbd',\n        debugBlue: '#bdd8fa',\n        debugGreen: '#d2fabd',\n        debugPurple: '#d2bdfa',\n        debugYellow: '#fae9bd',\n\n        textActive: '#09f',\n    },\n\n    fontSizes: {\n        rootPrimary: 15,\n    },\n\n    margins: {\n        rootLayoutMargin: 8,\n    },\n\n    toolbar: {\n        size: 30,\n        lineHeight: '30px', // `px` suffix is required for `line-height` fields to work\n        fontSize: 15,\n        buttonRadius: 4,\n    },\n\n    dnd: {\n        canDropColor: 'green',\n        cannotDropColor: 'red',\n        canDropMask: 'rgba(180, 235, 180, 0.75)',\n        cannotDropMask: 'rgba(235, 180, 180, 0.75)',\n        fileListCanDropMaskOne: 'rgba(180, 235, 180, 0.1)',\n        fileListCanDropMaskTwo: 'rgba(180, 235, 180, 0.2)',\n        fileListCannotDropMaskOne: 'rgba(235, 180, 180, 0.1)',\n        fileListCannotDropMaskTwo: 'rgba(235, 180, 180, 0.2)',\n    },\n\n    dragLayer: {\n        border: 'solid 2px #09f',\n        padding: '7px 10px',\n        borderRadius: 2,\n    },\n\n    fileList: {\n        desktopGridGutter: 8,\n        mobileGridGutter: 5,\n    },\n\n    gridFileEntry: {\n        childrenCountSize: '1.6em',\n        iconColorFocused: '#000',\n        iconSize: '2.4em',\n        iconColor: '#fff',\n        borderRadius: 5,\n        fontSize: 14,\n\n        fileColorTint: 'rgba(255, 255, 255, 0.4)',\n        folderBackColorTint: 'rgba(255, 255, 255, 0.1)',\n        folderFrontColorTint: 'rgba(255, 255, 255, 0.4)',\n    },\n\n    listFileEntry: {\n        propertyFontSize: 14,\n        iconFontSize: '1.1em',\n        iconBorderRadius: 5,\n        fontSize: 14,\n    },\n};\n\nexport type ChonkyTheme = typeof lightTheme;\n\nexport const darkThemeOverride: DeepPartial<ChonkyTheme> = {\n    gridFileEntry: {\n        fileColorTint: 'rgba(50, 50, 50, 0.4)',\n        folderBackColorTint: 'rgba(50, 50, 50, 0.4)',\n        folderFrontColorTint: 'rgba(50, 50, 50, 0.15)',\n    },\n};\n\nexport const mobileThemeOverride: DeepPartial<ChonkyTheme> = {\n    fontSizes: {\n        rootPrimary: 13,\n    },\n    margins: {\n        rootLayoutMargin: 4,\n    },\n    toolbar: {\n        size: 28,\n        lineHeight: '28px',\n        fontSize: 13,\n    },\n    gridFileEntry: {\n        fontSize: 13,\n    },\n    listFileEntry: {\n        propertyFontSize: 12,\n        iconFontSize: '1em',\n        fontSize: 13,\n    },\n};\n\nexport const useIsMobileBreakpoint = () => {\n    return useMediaQuery('(max-width:480px)');\n};\n\nexport const getStripeGradient = (colorOne: string, colorTwo: string) =>\n    'repeating-linear-gradient(' +\n    '45deg,' +\n    `${colorOne},` +\n    `${colorOne} 10px,` +\n    `${colorTwo} 0,` +\n    `${colorTwo} 20px` +\n    ')';\n\nexport const makeLocalChonkyStyles = <C extends string = string>(\n    styles: (theme: ChonkyTheme & MuiTheme) => any\n    // @ts-ignore\n): any => createUseStyles<ChonkyTheme, C>(styles);\n\nexport const makeGlobalChonkyStyles = <C extends string = string>(\n    makeStyles: (theme: ChonkyTheme & MuiTheme) => any\n) => {\n    const selectorMapping = {};\n    const makeGlobalStyles = (theme: ChonkyTheme) => {\n        const localStyles = makeStyles(theme as any);\n        const globalStyles = {};\n        const localSelectors = Object.keys(localStyles);\n        localSelectors.map(localSelector => {\n            const globalSelector = `chonky-${localSelector}`;\n            const jssSelector = `@global .${globalSelector}`;\n            // @ts-ignore\n            globalStyles[jssSelector] = localStyles[localSelector];\n            // @ts-ignore\n            selectorMapping[localSelector] = globalSelector;\n        });\n        return globalStyles;\n    };\n\n    // @ts-ignore\n    const useStyles = createUseStyles<ChonkyTheme, C>(makeGlobalStyles as any);\n    return (...args: any[]): any => {\n        const styles = useStyles(...args);\n        const classes = {};\n        Object.keys(selectorMapping).map(localSelector => {\n            // @ts-ignore\n            classes[localSelector] = selectorMapping[localSelector];\n        });\n        return { ...classes, ...styles };\n    };\n};\n\nexport const important = <T>(value: T) => [value, '!important'];\n\nexport const c = classnames;\n","/**\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\n * @copyright 2020\n * @license MIT\n */\n\nimport React from 'react';\n\nimport { reduxActions } from '../../redux/reducers';\nimport { initialRootState } from '../../redux/state';\nimport { useDTE, usePropReduxUpdate } from '../../redux/store';\nimport {\n    thunkActivateSortAction, thunkUpdateDefaultFileViewActionId, thunkUpdateRawFileActions\n} from '../../redux/thunks/file-actions.thunks';\nimport { FileBrowserHandle, FileBrowserProps } from '../../types/file-browser.types';\nimport { defaultConfig } from '../../util/default-config';\nimport { useFileBrowserHandle } from '../../util/file-browser-handle';\nimport { getValueOrFallback } from '../../util/helpers';\n\nexport const ChonkyBusinessLogicInner = React.memo(\n    React.forwardRef<FileBrowserHandle, FileBrowserProps>((props, ref) => {\n        // ==== Update Redux state\n        usePropReduxUpdate(reduxActions.setRawFiles, props.files ?? initialRootState.rawFiles);\n        usePropReduxUpdate(reduxActions.setRawFolderChain, props.folderChain);\n        useDTE(\n            thunkUpdateRawFileActions,\n            getValueOrFallback(props.fileActions, defaultConfig.fileActions),\n            getValueOrFallback(props.disableDefaultFileActions, defaultConfig.disableDefaultFileActions)\n        );\n        useDTE(\n            reduxActions.setExternalFileActionHandler,\n            getValueOrFallback(props.onFileAction, defaultConfig.onFileAction) as any\n        );\n        useDTE(\n            reduxActions.setSelectionDisabled,\n            getValueOrFallback(props.disableSelection, defaultConfig.disableSelection, 'boolean')\n        );\n        useDTE(\n            thunkActivateSortAction,\n            getValueOrFallback(props.defaultSortActionId, defaultConfig.defaultSortActionId)\n        );\n        useDTE(\n            thunkUpdateDefaultFileViewActionId,\n            getValueOrFallback(props.defaultFileViewActionId, defaultConfig.defaultFileViewActionId, 'string')\n        );\n\n        useDTE(\n            reduxActions.setThumbnailGenerator,\n            getValueOrFallback(props.thumbnailGenerator, defaultConfig.thumbnailGenerator)\n        );\n        useDTE(\n            reduxActions.setDoubleClickDelay,\n            getValueOrFallback(props.doubleClickDelay, defaultConfig.doubleClickDelay, 'number')\n        );\n        useDTE(\n            reduxActions.setDisableDragAndDrop,\n            getValueOrFallback(props.disableDragAndDrop, defaultConfig.disableDragAndDrop, 'boolean')\n        );\n        useDTE(\n            reduxActions.setClearSelectionOnOutsideClick,\n            getValueOrFallback(\n                props.clearSelectionOnOutsideClick,\n                defaultConfig.clearSelectionOnOutsideClick,\n                'boolean'\n            )\n        );\n\n        // ==== Setup the imperative handle for external use\n        useFileBrowserHandle(ref);\n\n        return null;\n    })\n);\nChonkyBusinessLogicInner.displayName = 'ChonkyBusinessLogicInner';\n\nexport const ChonkyBusinessLogic = React.memo(ChonkyBusinessLogicInner);\nChonkyBusinessLogic.displayName = 'ChonkyBusinessLogic';\n","import React, { useImperativeHandle } from 'react';\nimport { useDispatch, useStore } from 'react-redux';\n\nimport { reduxActions } from '../redux/reducers';\nimport { selectSelectionMap } from '../redux/selectors';\nimport { thunkRequestFileAction } from '../redux/thunks/dispatchers.thunks';\nimport { FileAction } from '../types/action.types';\nimport { FileBrowserHandle } from '../types/file-browser.types';\nimport { RootState } from '../types/redux.types';\n\nexport const useFileBrowserHandle = (ref: React.Ref<FileBrowserHandle>) => {\n    const store = useStore<RootState>();\n    const dispatch = useDispatch();\n\n    useImperativeHandle(\n        ref,\n        () => ({\n            getFileSelection(): Set<string> {\n                const selectionMap = selectSelectionMap(store.getState());\n                const selectionSet = new Set(Object.keys(selectionMap));\n                return selectionSet;\n            },\n            setFileSelection(selection, reset = true): void {\n                const fileIds = Array.from(selection);\n                dispatch(reduxActions.selectFiles({ fileIds, reset }));\n            },\n            requestFileAction<Action extends FileAction>(\n                action: Action,\n                payload: Action['__payloadType']\n            ): Promise<void> {\n                return Promise.resolve(\n                    dispatch(thunkRequestFileAction(action, payload))\n                ).then();\n            },\n        }),\n        [store, dispatch]\n    );\n};\n","import { useCallback, useContext } from 'react';\nimport { DndContext, useDrag, useDrop } from 'react-dnd';\n\nexport const useDndContextAvailable = () => {\n    const dndContext = useContext(DndContext);\n    const { dragDropManager } = dndContext;\n    return !!dragDropManager;\n};\n\nexport const useDragIfAvailable: typeof useDrag = (...args) => {\n    // This is an ugly hack to make `useDrag` not throw if a `DndContext` is not available.\n    // See: https://github.com/react-dnd/react-dnd/issues/2212\n    const dndContextAvailable = useDndContextAvailable();\n    const mockHook = useCallback(() => [{} as any, () => null, () => null], []);\n    // @ts-ignore\n    const useHook: typeof useDrag = dndContextAvailable ? useDrag : mockHook;\n    return useHook(...args);\n};\n\nexport const useDropIfAvailable: typeof useDrop = (...args) => {\n    const dndContextAvailable = useDndContextAvailable();\n    const mockHook = useCallback(() => [{} as any, () => null], []);\n    // @ts-ignore\n    const useHook: typeof useDrop = dndContextAvailable ? useDrop : mockHook;\n    return useHook(...args);\n};\n","/**\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\n * @copyright 2020\n * @license MIT\n */\n\nimport React from 'react';\nimport { useDragLayer } from 'react-dnd';\nimport { Nullable } from 'tsdef';\n\nimport { ChonkyDndFileEntryItem, ChonkyDndFileEntryType } from '../../types/dnd.types';\nimport { makeGlobalChonkyStyles } from '../../util/styles';\n\nexport interface DnDFileListDragLayerProps {}\n\nconst layerStyles: React.CSSProperties = {\n    position: 'fixed',\n    pointerEvents: 'none',\n    zIndex: 100,\n    left: 0,\n    top: 0,\n    width: '100%',\n    height: '100%',\n};\nconst getItemStyles = (\n    initialCursorOffset: Nullable<{ x: number; y: number }>,\n    initialFileOffset: Nullable<{ x: number; y: number }>,\n    currentFileOffset: Nullable<{ x: number; y: number }>\n) => {\n    if (!initialCursorOffset || !initialFileOffset || !currentFileOffset) {\n        return {\n            display: 'none',\n        };\n    }\n    const x = initialCursorOffset.x + (currentFileOffset.x - initialFileOffset.x);\n    const y = initialCursorOffset.y + (currentFileOffset.y - initialFileOffset.y);\n    const transform = `translate(${x}px, ${y}px)`;\n    return {\n        transform,\n        WebkitTransform: transform,\n    };\n};\n\nexport const DnDFileListDragLayer: React.FC<DnDFileListDragLayerProps> = () => {\n    const classes = useStyles();\n\n    const {\n        itemType,\n        item,\n        initialCursorOffset,\n        initialFileOffset,\n        currentFileOffset,\n        isDragging,\n    } = useDragLayer(monitor => ({\n        item: monitor.getItem() as ChonkyDndFileEntryItem,\n        itemType: monitor.getItemType(),\n        initialCursorOffset: monitor.getInitialClientOffset(),\n        initialFileOffset: monitor.getInitialSourceClientOffset(),\n        currentFileOffset: monitor.getSourceClientOffset(),\n        isDragging: monitor.isDragging(),\n    }));\n    if (!isDragging || itemType !== ChonkyDndFileEntryType || !item.payload) {\n        return null;\n    }\n\n    const selectionSize = item.payload.selectedFiles.length;\n    return (\n        <div style={layerStyles}>\n            <div\n                style={getItemStyles(\n                    initialCursorOffset,\n                    initialFileOffset,\n                    currentFileOffset\n                )}\n            >\n                <div className={classes.fileDragPreview}>\n                    <b>{item.payload.draggedFile.name}</b>\n                    {selectionSize > 1 && (\n                        <>\n                            {' and '}\n                            <strong>\n                                {selectionSize - 1} other file\n                                {selectionSize - 1 !== 1 ? 's' : ''}\n                            </strong>\n                        </>\n                    )}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nconst useStyles = makeGlobalChonkyStyles(theme => ({\n    fileDragPreview: {\n        boxShadow: `2px 2px 5px ${theme.palette.divider}`,\n        backgroundColor: theme.palette.background.default,\n        borderRadius: theme.dragLayer.borderRadius,\n        fontSize: theme.fontSizes.rootPrimary,\n        color: theme.palette.text.primary,\n        padding: theme.dragLayer.padding,\n        border: theme.dragLayer.border,\n        display: 'inline-block',\n    },\n}));\n","import { DragObjectWithType } from 'react-dnd';\nimport { Nilable } from 'tsdef';\n\nimport { StartDragNDropPayload } from './action-payloads.types';\nimport { FileData } from './file.types';\n\nexport interface ChonkyDndDropResult {\n    dropTarget: Nilable<FileData> | any;\n    dropEffect: 'move' | 'copy';\n}\n\nexport type ChonkyDndFileEntryItem = DragObjectWithType & {\n    payload: StartDragNDropPayload;\n};\nexport const ChonkyDndFileEntryType = 'dnd-chonky-file-entry';\n","/**\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\n * @copyright 2020\n * @license MIT\n */\n\nimport hotkeys from 'hotkeys-js';\nimport React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { selectFileActionData } from '../../redux/selectors';\nimport { useParamSelector } from '../../redux/store';\nimport { thunkRequestFileAction } from '../../redux/thunks/dispatchers.thunks';\n\nexport interface HotkeyListenerProps {\n    fileActionId: string;\n}\n\nexport const HotkeyListener: React.FC<HotkeyListenerProps> = React.memo(props => {\n    const { fileActionId } = props;\n\n    const dispatch = useDispatch();\n    const fileAction = useParamSelector(selectFileActionData, fileActionId);\n\n    useEffect(() => {\n        if (!fileAction || !fileAction.hotkeys || fileAction.hotkeys.length === 0) {\n            return;\n        }\n\n        const hotkeysStr = fileAction.hotkeys.join(',');\n        const hotkeyCallback = (event: KeyboardEvent) => {\n            event.preventDefault();\n            dispatch(thunkRequestFileAction(fileAction, undefined));\n        };\n        hotkeys(hotkeysStr, hotkeyCallback);\n        return () => hotkeys.unbind(hotkeysStr, hotkeyCallback);\n    }, [dispatch, fileAction]);\n\n    return null;\n});\n","/**\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\n * @copyright 2020\n * @license MIT\n */\n\nimport Box from '@material-ui/core/Box';\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\nimport React, { useCallback, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { reduxActions } from '../../redux/reducers';\nimport {\n    selectClearSelectionOnOutsideClick,\n    selectFileActionIds,\n    selectIsDnDDisabled,\n} from '../../redux/selectors';\nimport { useDndContextAvailable } from '../../util/dnd-fallback';\nimport { elementIsInsideButton } from '../../util/helpers';\nimport { makeGlobalChonkyStyles } from '../../util/styles';\nimport { useContextMenuTrigger } from '../external/FileContextMenu-hooks';\nimport { DnDFileListDragLayer } from '../file-list/DnDFileListDragLayer';\nimport { HotkeyListener } from './HotkeyListener';\n\nexport interface ChonkyPresentationLayerProps {}\n\nexport const ChonkyPresentationLayer: React.FC<ChonkyPresentationLayerProps> = ({\n    children,\n}) => {\n    const dispatch = useDispatch();\n    const fileActionIds = useSelector(selectFileActionIds);\n    const dndDisabled = useSelector(selectIsDnDDisabled);\n    const clearSelectionOnOutsideClick = useSelector(\n        selectClearSelectionOnOutsideClick\n    );\n\n    // Deal with clicks outside of Chonky\n    const handleClickAway = useCallback(\n        (event: React.MouseEvent<Document>) => {\n            if (!clearSelectionOnOutsideClick || elementIsInsideButton(event.target)) {\n                // We only clear out the selection on outside click if the click target\n                // was not a button. We don't want to clear out the selection when a\n                // button is clicked because Chonky users might want to trigger some\n                // selection-related action on that button click.\n                return;\n            }\n            dispatch(reduxActions.clearSelection());\n        },\n        [dispatch, clearSelectionOnOutsideClick]\n    );\n\n    // Generate necessary components\n    const hotkeyListenerComponents = useMemo(\n        () =>\n            fileActionIds.map(actionId => (\n                <HotkeyListener\n                    key={`file-action-listener-${actionId}`}\n                    fileActionId={actionId}\n                />\n            )),\n        [fileActionIds]\n    );\n\n    const dndContextAvailable = useDndContextAvailable();\n    const showContextMenu = useContextMenuTrigger();\n\n    const classes = useStyles();\n    return (\n        <ClickAwayListener onClickAway={handleClickAway}>\n            <Box className={classes.chonkyRoot} onContextMenu={showContextMenu}>\n                {!dndDisabled && dndContextAvailable && <DnDFileListDragLayer />}\n                {hotkeyListenerComponents}\n                {children ? children : null}\n            </Box>\n        </ClickAwayListener>\n    );\n};\n\nconst useStyles = makeGlobalChonkyStyles(theme => ({\n    chonkyRoot: {\n        backgroundColor: theme.palette.background.paper,\n        border: `solid 1px ${theme.palette.divider}`,\n        padding: theme.margins.rootLayoutMargin,\n        fontSize: theme.fontSizes.rootPrimary,\n        color: theme.palette.text.primary,\n        touchAction: 'manipulation', // Disabling zoom on double tap\n        fontFamily: 'sans-serif',\n        flexDirection: 'column',\n        boxSizing: 'border-box',\n        textAlign: 'left',\n        borderRadius: 4,\n        display: 'flex',\n        height: '100%',\n\n        // Disabling select\n        webkitTouchCallout: 'none',\n        webkitUserSelect: 'none',\n        mozUserSelect: 'none',\n        msUserSelect: 'none',\n        userSelect: 'none',\n    },\n}));\n","import React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Nullable } from 'tsdef';\n\nimport { ChonkyActions } from '../../action-definitions/index';\nimport { reduxActions } from '../../redux/reducers';\nimport { selectContextMenuMounted } from '../../redux/selectors';\nimport { thunkRequestFileAction } from '../../redux/thunks/dispatchers.thunks';\nimport { findElementAmongAncestors } from '../../util/helpers';\nimport { useInstanceVariable } from '../../util/hooks-helpers';\n\nexport const findClosestChonkyFileId = (\n    element: HTMLElement | any\n): Nullable<string> => {\n    const fileEntryWrapperDiv = findElementAmongAncestors(\n        element,\n        (element: any) =>\n            element.tagName &&\n            element.tagName.toLowerCase() === 'div' &&\n            element.dataset &&\n            element.dataset.chonkyFileId\n    );\n    return fileEntryWrapperDiv ? fileEntryWrapperDiv.dataset.chonkyFileId! : null;\n};\n\nexport const useContextMenuTrigger = () => {\n    const dispatch = useDispatch();\n    const contextMenuMountedRef = useInstanceVariable(\n        useSelector(selectContextMenuMounted)\n    );\n    return useCallback(\n        (event: React.MouseEvent<HTMLDivElement>) => {\n            // Use default browser context menu when Chonky context menu component\n            // is not mounted.\n            if (!contextMenuMountedRef.current) return;\n            // Users can use Alt+Right Click to bring up browser's default\n            // context menu instead of Chonky's context menu.\n            if (event.altKey) return;\n\n            event.preventDefault();\n\n            const triggerFileId = findClosestChonkyFileId(event.target);\n            dispatch(\n                thunkRequestFileAction(ChonkyActions.OpenFileContextMenu, {\n                    clientX: event.clientX,\n                    clientY: event.clientY,\n                    triggerFileId,\n                })\n            );\n        },\n        [contextMenuMountedRef, dispatch]\n    );\n};\n\nexport const useContextMenuDismisser = () => {\n    const dispatch = useDispatch();\n    return useCallback(() => dispatch(reduxActions.hideContextMenu()), [dispatch]);\n};\n","import {\n    createMuiTheme,\n    ThemeProvider as MuiThemeProvider,\n} from '@material-ui/core/styles';\nimport merge from 'deepmerge';\nimport React, {ReactNode, useMemo} from 'react';\nimport {DndProvider} from 'react-dnd';\nimport {HTML5Backend} from 'react-dnd-html5-backend';\nimport {IntlProvider} from 'react-intl';\nimport {ThemeProvider} from 'react-jss';\nimport {Provider as ReduxProvider} from 'react-redux';\nimport shortid from 'shortid';\n\nimport {useChonkyStore} from '../../redux/store';\nimport {FileBrowserHandle, FileBrowserProps} from '../../types/file-browser.types';\nimport {defaultConfig} from '../../util/default-config';\nimport {getValueOrFallback} from '../../util/helpers';\nimport {useStaticValue} from '../../util/hooks-helpers';\nimport {ChonkyFormattersContext, defaultFormatters} from '../../util/i18n';\nimport {ChonkyIconContext} from '../../util/icon-helper';\nimport {\n    darkThemeOverride,\n    lightTheme,\n    mobileThemeOverride,\n    useIsMobileBreakpoint,\n} from '../../util/styles';\nimport {ChonkyBusinessLogic} from '../internal/ChonkyBusinessLogic';\nimport {ChonkyIconPlaceholder} from '../internal/ChonkyIconPlaceholder';\nimport {ChonkyPresentationLayer} from '../internal/ChonkyPresentationLayer';\n\n// if (process.env.NODE_ENV === 'development') {\n//     const whyDidYouRender = require('@welldone-software/why-did-you-render');\n//     whyDidYouRender(React, {\n//         trackAllPureComponents: true,\n//     });\n// }\n\nexport const FileBrowser = React.forwardRef<FileBrowserHandle,\n    FileBrowserProps & { children?: ReactNode }>((props, ref) => {\n    const {instanceId, iconComponent, children} = props;\n    const disableDragAndDrop = getValueOrFallback(\n        props.disableDragAndDrop,\n        defaultConfig.disableDragAndDrop,\n        'boolean'\n    );\n    const disableDragAndDropProvider = getValueOrFallback(\n        props.disableDragAndDropProvider,\n        defaultConfig.disableDragAndDropProvider,\n        'boolean'\n    );\n    const darkMode = getValueOrFallback(\n        props.darkMode,\n        defaultConfig.darkMode,\n        'boolean'\n    );\n    const i18n = getValueOrFallback(props.i18n, defaultConfig.i18n);\n    const formatters = useMemo(() => ({...defaultFormatters, ...i18n?.formatters}), [\n        i18n,\n    ]);\n\n    const chonkyInstanceId = useStaticValue(() => instanceId ?? shortid.generate());\n    const store = useChonkyStore(chonkyInstanceId);\n\n    const isMobileBreakpoint = useIsMobileBreakpoint();\n    const theme = useMemo(() => {\n        const muiTheme = createMuiTheme({\n            palette: {type: darkMode ? 'dark' : 'light'},\n        });\n\n        const theme = merge(lightTheme, darkMode ? darkThemeOverride : {});\n        \n        const combinedTheme = merge(\n            muiTheme,\n            merge(theme, props.customTheme ? props.customTheme : {})\n        );\n\n        return isMobileBreakpoint\n            ? merge(combinedTheme, mobileThemeOverride)\n            : combinedTheme;\n    }, [darkMode, isMobileBreakpoint]);\n\n    const chonkyComps = (\n        <>\n            <ChonkyBusinessLogic ref={ref} {...props} />\n            <ChonkyPresentationLayer>{children}</ChonkyPresentationLayer>\n        </>\n    );\n\n    return (\n        <IntlProvider locale=\"en\" defaultLocale=\"en\" {...i18n}>\n            <ChonkyFormattersContext.Provider value={formatters}>\n                <ReduxProvider store={store}>\n                    <ThemeProvider theme={theme}>\n                        <MuiThemeProvider theme={theme}>\n                            <ChonkyIconContext.Provider\n                                value={\n                                    iconComponent ??\n                                    defaultConfig.iconComponent ??\n                                    ChonkyIconPlaceholder\n                                }\n                            >\n                                {disableDragAndDrop || disableDragAndDropProvider ? (\n                                    chonkyComps\n                                ) : (\n                                    <DndProvider backend={HTML5Backend}>\n                                        {chonkyComps}\n                                    </DndProvider>\n                                )}\n                            </ChonkyIconContext.Provider>\n                        </MuiThemeProvider>\n                    </ThemeProvider>\n                </ReduxProvider>\n            </ChonkyFormattersContext.Provider>\n        </IntlProvider>\n    );\n});\nFileBrowser.displayName = 'FileBrowser';\n","import { useEffect } from 'react';\nimport watch from 'redux-watch';\n\nimport { Store } from '@reduxjs/toolkit';\n\nimport { ChonkyActions } from '../action-definitions';\nimport { RootState } from '../types/redux.types';\nimport { FileSelection } from '../types/selection.types';\nimport { selectSelectedFileIds, selectSelectionMap } from './selectors';\nimport { thunkRequestFileAction } from './thunks/dispatchers.thunks';\n\nexport const useStoreWatchers = (store: Store<RootState>) => {\n    useEffect(() => {\n        const selectionWatcher = watch(() => selectSelectionMap(store.getState()));\n        const onSelectionChange = (\n            newSelection: FileSelection,\n            oldSelection: FileSelection\n        ) => {\n            // We don't check for deep equality here as we expect the\n            // reducers to prevent all unnecessary updates.\n            if (newSelection === oldSelection) return;\n\n            // Notify users the selection has changed.\n            const selectedFilesIds = selectSelectedFileIds(store.getState());\n            const selection = new Set<string>(selectedFilesIds);\n            store.dispatch(\n                thunkRequestFileAction(ChonkyActions.ChangeSelection, {\n                    selection,\n                }) as any\n            );\n        };\n\n        const unsubscribeCallbacks = [\n            store.subscribe(selectionWatcher(onSelectionChange)),\n        ];\n        return () => {\n            for (const unsubscribe of unsubscribeCallbacks) unsubscribe();\n        };\n    }, [store]);\n};\n","import { useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Nullable } from 'tsdef';\n\nimport { ChonkyActions } from '../../action-definitions/index';\nimport { selectFolderChain } from '../../redux/selectors';\nimport { thunkRequestFileAction } from '../../redux/thunks/dispatchers.thunks';\nimport { FileData } from '../../types/file.types';\nimport { FileHelper } from '../../util/file-helper';\n\nexport interface FolderChainItem {\n    file: Nullable<FileData>;\n    disabled: boolean;\n    onClick?: () => void;\n}\n\nexport const useFolderChainItems = (): FolderChainItem[] => {\n    const folderChain = useSelector(selectFolderChain);\n    const dispatch = useDispatch();\n\n    const folderChainItems = useMemo(() => {\n        const items: FolderChainItem[] = [];\n        if (!folderChain) return items;\n\n        for (let i = 0; i < folderChain.length; ++i) {\n            const file = folderChain[i];\n            items.push({\n                file,\n                disabled: !file,\n                onClick:\n                    !FileHelper.isOpenable(file) || i === folderChain.length - 1\n                        ? undefined\n                        : () =>\n                              dispatch(\n                                  thunkRequestFileAction(ChonkyActions.OpenFiles, {\n                                      targetFile: file,\n                                      files: [file],\n                                  })\n                              ),\n            });\n        }\n        return items;\n    }, [dispatch, folderChain]);\n    return folderChainItems;\n};\n","import { MaybePromise, Nullable } from 'tsdef';\n\nimport { FileActionState } from './action-handler.types';\nimport { FileViewConfig } from './file-view.types';\nimport { FileFilter, FileMap } from './file.types';\nimport { ChonkyIconName } from './icons.types';\nimport { ChonkyDispatch, RootState } from './redux.types';\nimport { FileSortKeySelector } from './sort.types';\n\nexport interface FileAction {\n    /**\n     * Unique file action ID. If you set the action ID to one of the built-in Chonky\n     * action action IDs, you custom action definition will override the built-in\n     * definition.\n     */\n    id: string;\n    /**\n     * When set to `true`, the action will only be active (dispatchable) when user\n     * selects one or more files. If `fileFilter` is defined, it will be applied to\n     * selection before checking if its empty.\n     */\n    requiresSelection?: boolean; // Requires selection of 1+ files\n    /**\n     * A predicate that determines whether a file should be included in the selection\n     * for this action.\n     */\n    fileFilter?: FileFilter;\n    /**\n     * List of hotkeys that should trigger this action, defined using `hotkey-js`\n     * notation.\n     * @see https://www.npmjs.com/package/hotkeys-js\n     */\n    hotkeys?: string[] | readonly string[];\n    /**\n     * When button is defined and `toolbar` or `contextMenu` is set to `true`, a\n     * button will be added to the relevant UI component. Clicking on this button\n     * will active this action. The appearance of the button will change based on\n     * the action definition and the current Chonky state.\n     */\n    button?: FileActionButton;\n    /**\n     * When `sortKeySelector` is specified, the action becomes a sorting toggle. When\n     * this action is activated, it will sort files using the key selector, toggling\n     * between Ascending and Descending orders.\n     */\n    sortKeySelector?: FileSortKeySelector;\n    /**\n     * When `fileViewConfig` is specified, triggering this action will apply the\n     * provided config to Chonky's file view.\n     */\n    fileViewConfig?: FileViewConfig;\n    /**\n     * When `option` is specified, the action becomes an option toggle. When the action\n     * is activated, the boolean value of the option will be toggled.\n     */\n    option?: FileActionOption;\n    /**\n     * When selection transform is defined, activating this action will update the file\n     * selection. If the transform function returns `null`, selection will be left\n     * untouched.\n     */\n    selectionTransform?: FileSelectionTransform;\n    /**\n     * When effect is defined, it will be called right before dispatching the action to\n     * the user defined action handler. If the effect function returns a promise, Chonky\n     * will wait for the promise to resolve or fail before dispatching the action to the\n     * handler. If this function returns `true`, the file action will NOT be dispatched\n     * the the handler.\n     */\n    effect?: FileActionEffect;\n    /**\n     * When customVisibility is defined, it will change the display state of the file action\n     * The function must return the visibility as one of the CustomVisibilityState values:\n     *  - Hidden\n     *  - Disabled\n     *  - Default\n     *  - Active\n     */\n    customVisibility?: () => CustomVisibilityState;\n    /**\n     * Field used to infer the type of action payload. It is used solely for Typescript\n     * type inference and action validation.\n     */\n    __payloadType?: any;\n    /**\n     * Field used to infer the type of extra state for this action. It is used solely\n     * for Typescript type inference and action validation.\n     */\n    __extraStateType?: any;\n}\n\nexport interface FileActionButton {\n    name: string; // Button name\n    toolbar?: boolean; // Whether to show the button in the toolbar\n    contextMenu?: boolean; // Whether to show the button in the context menu\n    group?: string; // Button group (dropdown in toolbar or section in context menu)\n    tooltip?: string; // Help tooltip text\n    icon?: ChonkyIconName | string | any; // Icon name\n    iconOnly?: boolean; // Whether to only display the icon\n}\n\nexport interface FileActionOption {\n    id: string; // Unique option ID\n    defaultValue: boolean; // Whether the option is enabled by default (required)\n}\n\nexport type FileSelectionTransform = (data: {\n    prevSelection: Set<string>;\n    fileIds: ReadonlyArray<string>;\n    fileMap: Readonly<FileMap>;\n    hiddenFileIds: Set<string>;\n}) => Nullable<Set<string>>;\n\nexport type FileActionEffect<Action extends FileAction = any> = (data: {\n    action: Action;\n    payload: Action['__payloadType'];\n    state: FileActionState<{}>; // extra state is empty on purpose\n    reduxDispatch: ChonkyDispatch;\n    getReduxState: () => RootState;\n}) => MaybePromise<undefined | boolean | void>;\n\nexport type FileActionMap = { [actonId: string]: FileAction };\n\nexport enum CustomVisibilityState {\n    Hidden, \n    Disabled, \n    Default,\n    Active\n};\n","import { useCallback, useEffect, useMemo } from 'react';\nimport { DragSourceMonitor, DropTargetMonitor } from 'react-dnd';\nimport { getEmptyImage } from 'react-dnd-html5-backend';\nimport { useDispatch, useSelector, useStore } from 'react-redux';\nimport { ExcludeKeys, Nullable } from 'tsdef';\n\nimport { EssentialActions } from '../action-definitions/essential';\nimport { ChonkyActions } from '../action-definitions/index';\nimport {\n    selectCurrentFolder,\n    selectFolderChain,\n    selectInstanceId,\n    selectSelectedFiles,\n} from '../redux/selectors';\nimport { thunkRequestFileAction } from '../redux/thunks/dispatchers.thunks';\nimport { StartDragNDropPayload } from '../types/action-payloads.types';\nimport {\n    ChonkyDndDropResult,\n    ChonkyDndFileEntryItem,\n    ChonkyDndFileEntryType,\n} from '../types/dnd.types';\nimport { DndEntryState } from '../types/file-list.types';\nimport { FileData } from '../types/file.types';\nimport { useDragIfAvailable, useDropIfAvailable } from './dnd-fallback';\nimport { FileHelper } from './file-helper';\nimport { useInstanceVariable } from './hooks-helpers';\n\nexport const useFileDrag = (file: Nullable<FileData>) => {\n    // Prepare the dnd payload\n    const store = useStore();\n    const fileRef = useInstanceVariable(file);\n    const getDndStartPayload = useCallback<() => StartDragNDropPayload>(() => {\n        const reduxState = store.getState();\n        return {\n            sourceInstanceId: selectInstanceId(reduxState),\n            source: selectCurrentFolder(reduxState),\n            // We force non-null type below because by convention, if drag & drop for\n            // this file was possible, it must have been non-null.\n            draggedFile: fileRef.current!,\n            selectedFiles: selectSelectedFiles(reduxState),\n        };\n    }, [store, fileRef]);\n\n    // For drag source\n    const dispatch = useDispatch();\n    const canDrag = useCallback(() => FileHelper.isDraggable(fileRef.current), [\n        fileRef,\n    ]);\n    const onDragStart = useCallback((): ChonkyDndFileEntryItem => {\n        const item: ChonkyDndFileEntryItem = {\n            type: ChonkyDndFileEntryType,\n            payload: getDndStartPayload(),\n        };\n        dispatch(thunkRequestFileAction(ChonkyActions.StartDragNDrop, item.payload));\n        return item;\n    }, [dispatch, getDndStartPayload]);\n    const onDragEnd = useCallback(\n        (item: ChonkyDndFileEntryItem, monitor: DragSourceMonitor) => {\n            const dropResult = monitor.getDropResult() as ChonkyDndDropResult;\n            if (\n                !FileHelper.isDraggable(item.payload.draggedFile) ||\n                !dropResult ||\n                !dropResult.dropTarget\n            ) {\n                return;\n            }\n\n            dispatch(\n                thunkRequestFileAction(ChonkyActions.EndDragNDrop, {\n                    ...item.payload,\n                    destination: dropResult.dropTarget,\n                    copy: dropResult.dropEffect === 'copy',\n                })\n            );\n        },\n        [dispatch]\n    );\n\n    // Create refs for react-dnd hooks\n    const item = useMemo<ChonkyDndFileEntryItem>(\n        () => ({\n            type: ChonkyDndFileEntryType,\n            // Payload is actually added in `onDragStart`\n            payload: {} as StartDragNDropPayload,\n        }),\n        []\n    );\n    const collect = useCallback(monitor => ({ isDragging: monitor.isDragging() }), []);\n    const [{ isDragging: dndIsDragging }, drag, preview] = useDragIfAvailable({\n        item,\n        canDrag,\n        begin: onDragStart,\n        // @ts-ignore\n        end: onDragEnd,\n        collect,\n    });\n\n    useEffect(() => {\n        // Set drag preview to an empty image because `DnDFileListDragLayer` will\n        // provide its own preview.\n        preview(getEmptyImage(), { captureDraggingState: true });\n    }, [preview]);\n\n    return { dndIsDragging, drag };\n};\n\ninterface UseFileDropParams {\n    file: Nullable<FileData>;\n    forceDisableDrop?: boolean;\n    includeChildrenDrops?: boolean;\n}\n\nexport const useFileDrop = ({\n    file,\n    forceDisableDrop,\n    includeChildrenDrops,\n}: UseFileDropParams) => {\n    const folderChainRef = useInstanceVariable(useSelector(selectFolderChain));\n    const onDrop = useCallback(\n        (_item: ChonkyDndFileEntryItem, monitor) => {\n            if (!monitor.canDrop()) return;\n            const customDropResult: ExcludeKeys<ChonkyDndDropResult, 'dropEffect'> = {\n                dropTarget: file,\n            };\n            return customDropResult;\n        },\n        [file]\n    );\n    const canDrop = useCallback(\n        (item: ChonkyDndFileEntryItem, monitor: DropTargetMonitor) => {\n            if (\n                forceDisableDrop ||\n                !FileHelper.isDroppable(file) ||\n                (!monitor.isOver({ shallow: true }) && !includeChildrenDrops)\n            ) {\n                return false;\n            }\n            const { source, draggedFile, selectedFiles } = item.payload;\n\n            // We prevent folders from being dropped into themselves. We also prevent\n            // any folder from current folder chain being moved - we can't move the\n            // folder that we are currently in.\n            const prohibitedFileIds = new Set<string>();\n            prohibitedFileIds.add(file.id);\n            folderChainRef.current.map(folder => {\n                if (folder) prohibitedFileIds.add(folder.id);\n            });\n            const movedFiles: FileData[] = [draggedFile, ...selectedFiles];\n            for (const currFile of movedFiles) {\n                if (prohibitedFileIds.has(currFile.id)) return false;\n            }\n\n            // Finally, prohibit files from being moved into their parent folder\n            // (which is a no-op).\n            return file.id !== source?.id;\n        },\n        [forceDisableDrop, file, includeChildrenDrops, folderChainRef]\n    );\n    const collect = useCallback(\n        monitor => ({\n            isOver: monitor.isOver(),\n            isOverCurrent: monitor.isOver({ shallow: true }),\n            canDrop: monitor.canDrop(),\n        }),\n        []\n    );\n    const [\n        { isOver: dndIsOver, isOverCurrent: dndIsOverCurrent, canDrop: dndCanDrop },\n        drop,\n    ] = useDropIfAvailable({\n        accept: ChonkyDndFileEntryType,\n        drop: onDrop,\n        canDrop,\n        collect,\n    });\n    return { dndIsOver, dndIsOverCurrent, dndCanDrop, drop };\n};\n\nexport const useFileEntryDnD = (file: Nullable<FileData>) => {\n    const { dndIsDragging, drag } = useFileDrag(file);\n    const { dndIsOver, dndCanDrop, drop } = useFileDrop({ file });\n    const dndState = useMemo<DndEntryState>(\n        () => ({\n            dndIsDragging,\n            dndIsOver,\n            dndCanDrop,\n        }),\n        [dndCanDrop, dndIsDragging, dndIsOver]\n    );\n    return {\n        drop,\n        drag,\n        dndState,\n    };\n};\n\nexport const useDndHoverOpen = (file: Nullable<FileData>, dndState: DndEntryState) => {\n    const dispatch = useDispatch();\n    const currentFolderRef = useInstanceVariable(useSelector(selectCurrentFolder));\n    useEffect(() => {\n        let timeout: Nullable<any> = null;\n        if (\n            dndState.dndIsOver &&\n            FileHelper.isDndOpenable(file) &&\n            file.id !== currentFolderRef.current?.id\n        ) {\n            timeout = setTimeout(\n                () =>\n                    dispatch(\n                        thunkRequestFileAction(EssentialActions.OpenFiles, {\n                            targetFile: file,\n                            files: [file],\n                        })\n                    ),\n                // TODO: Make this timeout configurable\n                1500\n            );\n        }\n        return () => {\n            if (timeout) clearTimeout(timeout);\n        };\n    }, [dispatch, file, dndState.dndIsOver, currentFolderRef]);\n};\n","/**\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\n * @copyright 2020\n * @license MIT\n */\n\nimport React from 'react';\n\nimport { makeLocalChonkyStyles } from '../../util/styles';\n\nexport interface TextPlaceholderProps {\n    minLength: number;\n    maxLength: number;\n}\n\nconst getRandomInt = (min: number, max: number) => {\n    return min + Math.floor(Math.random() * Math.floor(max - min));\n};\nexport const TextPlaceholder: React.FC<TextPlaceholderProps> = React.memo(props => {\n    const { minLength, maxLength } = props;\n\n    const placeholderLength = getRandomInt(minLength, maxLength);\n    const whitespace = '&nbsp;'.repeat(placeholderLength);\n\n    const classes = useStyles();\n    return (\n        <span\n            className={classes.textPlaceholder}\n            dangerouslySetInnerHTML={{ __html: whitespace }}\n        />\n    );\n});\n\nconst useStyles = makeLocalChonkyStyles(() => ({\n    '@keyframes loading-placeholder': {\n        '0%': { opacity: 0.2 },\n        '50%': { opacity: 0.4 },\n        '100%': { opacity: 0.2 },\n    },\n    textPlaceholder: {\n        animationName: '$loading-placeholder',\n        animationIterationCount: 'infinite',\n        animationTimingFunction: 'linear',\n        animationDuration: '1.5s',\n        backgroundColor: '#ccc',\n        whiteSpace: 'nowrap',\n        overflow: 'hidden',\n        borderRadius: 4,\n        maxWidth: '40%',\n        minWidth: 20,\n    },\n}));\n","import React, {\n    HTMLProps, useCallback, useContext, useEffect, useMemo, useRef, useState\n} from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Nullable, Undefinable } from 'tsdef';\n\nimport { ChonkyActions } from '../../action-definitions/index';\nimport { selectThumbnailGenerator } from '../../redux/selectors';\nimport { thunkRequestFileAction } from '../../redux/thunks/dispatchers.thunks';\nimport { DndEntryState } from '../../types/file-list.types';\nimport { FileData } from '../../types/file.types';\nimport { ChonkyIconName } from '../../types/icons.types';\nimport { FileHelper } from '../../util/file-helper';\nimport { ChonkyIconContext, ColorsDark, ColorsLight, useIconData } from '../../util/icon-helper';\nimport { Logger } from '../../util/logger';\nimport { TextPlaceholder } from '../external/TextPlaceholder';\nimport { KeyboardClickEvent, MouseClickEvent } from '../internal/ClickableWrapper';\nimport { FileEntryState } from './GridEntryPreview';\n\nexport const useFileEntryHtmlProps = (file: Nullable<FileData>): HTMLProps<HTMLDivElement> => {\n    return useMemo(() => {\n        const dataProps: { [prop: string]: Undefinable<string> } = {\n            'data-test-id': 'file-entry',\n            'data-chonky-file-id': file ? file.id : undefined,\n        };\n\n        return {\n            role: 'listitem',\n            ...dataProps,\n        };\n    }, [file]);\n};\n\nexport const useFileEntryState = (file: Nullable<FileData>, selected: boolean, focused: boolean) => {\n    const iconData = useIconData(file);\n    const { thumbnailUrl, thumbnailLoading } = useThumbnailUrl(file);\n\n    return useMemo<FileEntryState>(() => {\n        const fileColor = thumbnailUrl ? ColorsDark[iconData.colorCode] : ColorsLight[iconData.colorCode];\n        const iconSpin = thumbnailLoading || !file;\n        const icon = thumbnailLoading ? ChonkyIconName.loading : iconData.icon;\n\n        return {\n            childrenCount: FileHelper.getChildrenCount(file),\n            icon: file && file.icon !== undefined ? file.icon : icon,\n            iconSpin: iconSpin,\n            thumbnailUrl: thumbnailUrl,\n            color: file && file.color !== undefined ? file.color : fileColor,\n            selected: selected,\n            focused: !!focused,\n        };\n    }, [file, focused, iconData, selected, thumbnailLoading, thumbnailUrl]);\n};\n\nexport const useDndIcon = (dndState: DndEntryState) => {\n    let dndIconName: Nullable<ChonkyIconName> = null;\n    if (dndState.dndIsOver) {\n        const showDropIcon = dndState.dndCanDrop;\n        dndIconName = showDropIcon ? ChonkyIconName.dndCanDrop : ChonkyIconName.dndCannotDrop;\n    } else if (dndState.dndIsDragging) {\n        dndIconName = ChonkyIconName.dndDragging;\n    }\n\n    return dndIconName;\n};\n\nexport const useModifierIconComponents = (file: Nullable<FileData>) => {\n    const modifierIcons: ChonkyIconName[] = useMemo(() => {\n        const modifierIcons: ChonkyIconName[] = [];\n        if (FileHelper.isHidden(file)) modifierIcons.push(ChonkyIconName.hidden);\n        if (FileHelper.isSymlink(file)) modifierIcons.push(ChonkyIconName.symlink);\n        if (FileHelper.isEncrypted(file)) modifierIcons.push(ChonkyIconName.lock);\n        return modifierIcons;\n    }, [file]);\n    const ChonkyIcon = useContext(ChonkyIconContext);\n    const modifierIconComponents = useMemo(\n        () => modifierIcons.map((icon, index) => <ChonkyIcon key={`file-modifier-${index}`} icon={icon} />),\n        // For some reason ESLint marks `ChonkyIcon` as an unnecessary dependency,\n        // but we expect it can change at runtime so we disable the check.\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [ChonkyIcon, modifierIcons]\n    );\n    return modifierIconComponents;\n};\n\nconst _extname = (fileName: string) => {\n    const parts = fileName.split('.');\n    if (parts.length) {\n        return `.${parts[parts.length - 1]}`;\n    }\n    return '';\n};\n\nexport const useFileNameComponent = (file: Nullable<FileData>) => {\n    return useMemo(() => {\n        if (!file) return <TextPlaceholder minLength={15} maxLength={20} />;\n\n        let name;\n        let extension = null;\n\n        const isDir = FileHelper.isDirectory(file);\n        if (isDir) {\n            name = file.name;\n        } else {\n            extension = file.ext ?? _extname(file.name);\n            name = file.name.substr(0, file.name.length - extension.length);\n        }\n\n        return (\n            <>\n                {name}\n                {extension && <span className=\"chonky-file-entry-description-title-extension\">{extension}</span>}\n            </>\n        );\n    }, [file]);\n};\n\nexport const useThumbnailUrl = (file: Nullable<FileData>) => {\n    const thumbnailGenerator = useSelector(selectThumbnailGenerator);\n    const [thumbnailUrl, setThumbnailUrl] = useState<Nullable<string>>(null);\n    const [thumbnailLoading, setThumbnailLoading] = useState<boolean>(false);\n    const loadingAttempts = useRef(0);\n\n    useEffect(() => {\n        let loadingCancelled = false;\n\n        if (file) {\n            if (thumbnailGenerator) {\n                if (loadingAttempts.current === 0) {\n                    setThumbnailLoading(true);\n                }\n                loadingAttempts.current++;\n                Promise.resolve()\n                    .then(() => thumbnailGenerator(file))\n                    .then((thumbnailUrl: any) => {\n                        if (loadingCancelled) return;\n                        setThumbnailLoading(false);\n\n                        if (thumbnailUrl && typeof thumbnailUrl === 'string') {\n                            setThumbnailUrl(thumbnailUrl);\n                        }\n                    })\n                    .catch(error => {\n                        if (!loadingCancelled) setThumbnailLoading(false);\n                        Logger.error(`User-defined \"thumbnailGenerator\" handler threw an error: ${error.message}`);\n                    });\n            } else if (file.thumbnailUrl) {\n                setThumbnailUrl(file.thumbnailUrl);\n            }\n        }\n\n        return () => {\n            loadingCancelled = true;\n        };\n    }, [file, setThumbnailUrl, setThumbnailLoading, thumbnailGenerator]);\n\n    return { thumbnailUrl, thumbnailLoading };\n};\n\nexport const useFileClickHandlers = (file: Nullable<FileData>, displayIndex: number) => {\n    const dispatch = useDispatch();\n\n    // Prepare base handlers\n    const onMouseClick = useCallback(\n        (event: MouseClickEvent, clickType: 'single' | 'double') => {\n            if (!file) return;\n\n            dispatch(\n                thunkRequestFileAction(ChonkyActions.MouseClickFile, {\n                    clickType,\n                    file,\n                    fileDisplayIndex: displayIndex,\n                    altKey: event.altKey,\n                    ctrlKey: event.ctrlKey,\n                    shiftKey: event.shiftKey,\n                })\n            );\n        },\n        [dispatch, file, displayIndex]\n    );\n    const onKeyboardClick = useCallback(\n        (event: KeyboardClickEvent) => {\n            if (!file) return;\n\n            dispatch(\n                thunkRequestFileAction(ChonkyActions.KeyboardClickFile, {\n                    file,\n                    fileDisplayIndex: displayIndex,\n                    enterKey: event.enterKey,\n                    spaceKey: event.spaceKey,\n                    altKey: event.altKey,\n                    ctrlKey: event.ctrlKey,\n                    shiftKey: event.shiftKey,\n                })\n            );\n        },\n        [dispatch, file, displayIndex]\n    );\n\n    // Prepare single/double click handlers\n    const onSingleClick = useCallback((event: MouseClickEvent) => onMouseClick(event, 'single'), [onMouseClick]);\n    const onDoubleClick = useCallback((event: MouseClickEvent) => onMouseClick(event, 'double'), [onMouseClick]);\n\n    return {\n        onSingleClick,\n        onDoubleClick,\n        onKeyboardClick,\n    };\n};\n","import { useCallback, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Nullable } from 'tsdef';\n\nimport { ChonkyActions } from '../action-definitions/index';\nimport {\n    selectFileActionData,\n    selectFileViewConfig,\n    selectOptionValue,\n    selectParentFolder,\n    selectSelectedFilesForActionCount,\n    selectSortActionId,\n    selectSortOrder,\n} from '../redux/selectors';\nimport { useParamSelector } from '../redux/store';\nimport { thunkRequestFileAction } from '../redux/thunks/dispatchers.thunks';\nimport { ChonkyIconName } from '../types/icons.types';\nimport { CustomVisibilityState } from '../types/action.types';\nimport { SortOrder } from '../types/sort.types';\nimport { FileHelper } from './file-helper';\n\nexport const useFileActionTrigger = (fileActionId: string) => {\n    const dispatch = useDispatch();\n    const fileAction = useParamSelector(selectFileActionData, fileActionId);\n    return useCallback(() => dispatch(thunkRequestFileAction(fileAction, undefined)), [\n        dispatch,\n        fileAction,\n    ]);\n};\n\nexport const useFileActionProps = (\n    fileActionId: string\n): { icon: Nullable<ChonkyIconName | string>; active: boolean; disabled: boolean } => {\n    const parentFolder = useSelector(selectParentFolder);\n    const fileViewConfig = useSelector(selectFileViewConfig);\n\n    const sortActionId = useSelector(selectSortActionId);\n    const sortOrder = useSelector(selectSortOrder);\n\n    const action = useParamSelector(selectFileActionData, fileActionId);\n    // @ts-ignore\n    const optionValue = useParamSelector(selectOptionValue, action?.option?.id);\n\n    const actionSelectionSize = useParamSelector(\n        selectSelectedFilesForActionCount,\n        fileActionId\n    );\n\n    const actionSelectionEmpty = actionSelectionSize === 0;\n\n    return useMemo(() => {\n        if (!action) return { icon: null, active: false, disabled: true };\n\n        let icon = action.button?.icon ?? null;\n        if (action.sortKeySelector) {\n            if (sortActionId === action.id) {\n                if (sortOrder === SortOrder.ASC) {\n                    icon = ChonkyIconName.sortAsc;\n                } else {\n                    icon = ChonkyIconName.sortDesc;\n                }\n            } else {\n                icon = ChonkyIconName.placeholder;\n            }\n        } else if (action.option) {\n            if (optionValue) {\n                icon = ChonkyIconName.toggleOn;\n            } else {\n                icon = ChonkyIconName.toggleOff;\n            }\n        }\n\n        const isSortButtonAndCurrentSort = action.id === sortActionId;\n        const isFileViewButtonAndCurrentView = action.fileViewConfig === fileViewConfig;\n        const isOptionAndEnabled = action.option ? !!optionValue : false;\n\n        let customDisabled = false;\n        let customActive = false;\n        if (action.customVisibility !== undefined) {\n            customDisabled = action.customVisibility() === CustomVisibilityState.Disabled;\n            customActive = action.customVisibility() === CustomVisibilityState.Active;\n        }\n        const active =\n            isSortButtonAndCurrentSort ||\n            isFileViewButtonAndCurrentView ||\n            isOptionAndEnabled ||\n            customActive;\n        \n        let disabled: boolean = (!!action.requiresSelection && actionSelectionEmpty) || customDisabled;\n\n        if (action.id === ChonkyActions.OpenParentFolder.id) {\n            // We treat `open_parent_folder` file action as a special case as it\n            // requires the parent folder to be present to work...\n            disabled = disabled || !FileHelper.isOpenable(parentFolder);\n        }\n\n        return { icon, active, disabled };\n    }, [\n        parentFolder,\n        fileViewConfig,\n        sortActionId,\n        sortOrder,\n        action,\n        optionValue,\n        actionSelectionEmpty,\n    ]);\n};\n","/**\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\n * @copyright 2020\n * @license MIT\n */\n\nimport Button from '@material-ui/core/Button';\nimport React, { useContext } from 'react';\nimport { Nullable } from 'tsdef';\n\nimport { selectFileActionData } from '../../redux/selectors';\nimport { useParamSelector } from '../../redux/store';\nimport { ChonkyIconName } from '../../types/icons.types';\nimport { CustomVisibilityState } from '../../types/action.types';\nimport { useFileActionProps, useFileActionTrigger } from '../../util/file-actions';\nimport { useLocalizedFileActionStrings } from '../../util/i18n';\nimport { ChonkyIconContext } from '../../util/icon-helper';\nimport { c, important, makeGlobalChonkyStyles } from '../../util/styles';\n\nexport interface ToolbarButtonProps {\n    className?: string;\n    text: string;\n    tooltip?: string;\n    active?: boolean;\n    icon?: Nullable<ChonkyIconName | string>;\n    iconOnly?: boolean;\n    onClick?: (event: React.MouseEvent<HTMLButtonElement>) => void;\n    disabled?: boolean;\n    dropdown?: boolean;\n}\n\nexport const ToolbarButton: React.FC<ToolbarButtonProps> = React.memo(props => {\n    const {\n        className: externalClassName,\n        text,\n        tooltip,\n        active,\n        icon,\n        iconOnly,\n        onClick,\n        disabled,\n        dropdown,\n    } = props;\n    const classes = useStyles();\n    const ChonkyIcon = useContext(ChonkyIconContext);\n\n    const iconComponent =\n        icon || iconOnly ? (\n            <div className={iconOnly ? '' : classes.iconWithText}>\n                <ChonkyIcon\n                    icon={icon ? icon : ChonkyIconName.fallbackIcon}\n                    fixedWidth={true}\n                />\n            </div>\n        ) : null;\n\n    const className = c({\n        [externalClassName ?? '']: true,\n        [classes.baseButton]: true,\n        [classes.iconOnlyButton]: iconOnly,\n        [classes.activeButton]: !!active,\n    });\n    return (\n        <Button\n            className={className}\n            onClick={onClick}\n            title={tooltip ? tooltip : text}\n            disabled={disabled || !onClick}\n        >\n            {iconComponent}\n            {text && !iconOnly && <span>{text}</span>}\n            {dropdown && (\n                <div className={classes.iconDropdown}>\n                    <ChonkyIcon\n                        icon={icon ? icon : ChonkyIconName.dropdown}\n                        fixedWidth={true}\n                    />\n                </div>\n            )}\n        </Button>\n    );\n});\n\nconst useStyles = makeGlobalChonkyStyles(theme => ({\n    baseButton: {\n        fontSize: important(theme.toolbar.fontSize),\n        textTransform: important('none'),\n        letterSpacing: important(0),\n        minWidth: important('auto'),\n        lineHeight: theme.toolbar.lineHeight,\n        height: theme.toolbar.size,\n        paddingBottom: important(0),\n        paddingTop: important(0),\n    },\n    iconWithText: {\n        marginRight: 8,\n    },\n    iconOnlyButton: {\n        width: theme.toolbar.size,\n        textAlign: 'center',\n    },\n    iconDropdown: {\n        fontSize: '0.7em',\n        marginLeft: 2,\n        marginTop: 1,\n    },\n    activeButton: {\n        color: important(theme.colors.textActive),\n    },\n}));\n\nexport interface SmartToolbarButtonProps {\n    fileActionId: string;\n}\n\nexport const SmartToolbarButton: React.FC<SmartToolbarButtonProps> = React.memo(\n    props => {\n        const { fileActionId } = props;\n\n        const action = useParamSelector(selectFileActionData, fileActionId);\n        const triggerAction = useFileActionTrigger(fileActionId);\n        const { icon, active, disabled } = useFileActionProps(fileActionId);\n        const { buttonName, buttonTooltip } = useLocalizedFileActionStrings(action);\n\n        if (!action) return null;\n        const { button } = action;\n        if (!button) return null;\n        if (action.customVisibility !== undefined && action.customVisibility() === CustomVisibilityState.Hidden) return null;\n\n        return (\n            <ToolbarButton\n                text={buttonName}\n                tooltip={buttonTooltip}\n                icon={icon}\n                iconOnly={button.iconOnly}\n                active={active}\n                onClick={triggerAction}\n                disabled={disabled}\n            />\n        );\n    }\n);\n","/**\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\n * @copyright 2020\n * @license MIT\n */\n\nimport React, { useContext, useMemo } from 'react';\n\nimport { DndEntryState } from '../../types/file-list.types';\nimport { ChonkyIconName } from '../../types/icons.types';\nimport { useDndHoverOpen, useFileDrop } from '../../util/dnd';\nimport { ChonkyIconContext } from '../../util/icon-helper';\nimport { c, important, makeLocalChonkyStyles } from '../../util/styles';\nimport { useDndIcon } from '../file-list/FileEntry-hooks';\nimport { FolderChainItem } from './FileNavbar-hooks';\nimport { ToolbarButton } from './ToolbarButton';\n\nexport interface FolderChainButtonProps {\n    first: boolean;\n    current: boolean;\n    item: FolderChainItem;\n}\n\nexport const FolderChainButton: React.FC<FolderChainButtonProps> = React.memo(\n    ({ first, current, item }) => {\n        const { file, disabled, onClick } = item;\n        const { dndIsOver, dndCanDrop, drop } = useFileDrop({\n            file,\n            forceDisableDrop: !file || current,\n        });\n        const dndState = useMemo<DndEntryState>(\n            () => ({\n                dndIsOver,\n                dndCanDrop,\n                dndIsDragging: false,\n            }),\n            [dndCanDrop, dndIsOver]\n        );\n        useDndHoverOpen(file, dndState);\n        const dndIconName = useDndIcon(dndState);\n        const ChonkyIcon = useContext(ChonkyIconContext);\n\n        const classes = useStyles(dndState);\n        const className = c({\n            [classes.baseBreadcrumb]: true,\n            [classes.disabledBreadcrumb]: disabled,\n            [classes.currentBreadcrumb]: current,\n        });\n        const text = file ? file.name : 'Loading...';\n        const icon =\n            first && file?.folderChainIcon === undefined\n                ? ChonkyIconName.folder\n                : file?.folderChainIcon;\n\n        return (\n            <div className={classes.buttonContainer} ref={file ? drop : null}>\n                {file && dndIconName && (\n                    <div className={classes.dndIndicator}>\n                        <ChonkyIcon icon={dndIconName} fixedWidth={true} />\n                    </div>\n                )}\n                <ToolbarButton\n                    icon={icon}\n                    className={className}\n                    text={text}\n                    disabled={disabled}\n                    onClick={onClick}\n                />\n            </div>\n        );\n    }\n);\n\nconst useStyles = makeLocalChonkyStyles(theme => ({\n    buttonContainer: {\n        position: 'relative',\n    },\n    baseBreadcrumb: {\n        color: (dndState: DndEntryState) => {\n            let color = theme.palette.text.primary;\n            if (dndState.dndIsOver) {\n                color = dndState.dndCanDrop\n                    ? theme.dnd.canDropColor\n                    : theme.dnd.cannotDropColor;\n            }\n            return important(color);\n        },\n    },\n    disabledBreadcrumb: {\n        // Constant function here is on purpose. Without the function, the color here\n        // does not override the `baseBreadcrumb` color from above.\n        color: () => important(theme.palette.text.disabled),\n    },\n    currentBreadcrumb: {\n        textDecoration: important('underline'),\n    },\n    dndIndicator: {\n        color: (dndState: DndEntryState) =>\n            dndState.dndCanDrop ? theme.dnd.canDropColor : theme.dnd.cannotDropColor,\n        backgroundColor: (dndState: DndEntryState) =>\n            dndState.dndCanDrop ? theme.dnd.canDropMask : theme.dnd.cannotDropMask,\n        lineHeight: `calc(${theme.toolbar.lineHeight} - 6px)`,\n        transform: 'translateX(-50%) translateY(-50%)',\n        borderRadius: theme.toolbar.buttonRadius,\n        height: theme.toolbar.size - 6,\n        width: theme.toolbar.size - 6,\n        boxSizing: 'border-box',\n        position: 'absolute',\n        textAlign: 'center',\n        left: '50%',\n        top: '50%',\n        zIndex: 5,\n    },\n}));\n","/**\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\n * @copyright 2020\n * @license MIT\n */\n\nimport Box from '@material-ui/core/Box';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\nimport React, { ReactElement, useMemo } from 'react';\n\nimport { ChonkyActions } from '../../action-definitions/index';\nimport { important, makeGlobalChonkyStyles } from '../../util/styles';\nimport { useFolderChainItems } from './FileNavbar-hooks';\nimport { FolderChainButton } from './FolderChainButton';\nimport { SmartToolbarButton } from './ToolbarButton';\n\nexport interface FileNavbarProps {}\n\nexport const FileNavbar: React.FC<FileNavbarProps> = React.memo(() => {\n    const classes = useStyles();\n    const folderChainItems = useFolderChainItems();\n\n    const folderChainComponents = useMemo(() => {\n        const components: ReactElement[] = [];\n        for (let i = 0; i < folderChainItems.length; ++i) {\n            const key = `folder-chain-${i}`;\n            const component = (\n                <FolderChainButton\n                    key={key}\n                    first={i === 0}\n                    current={i === folderChainItems.length - 1}\n                    item={folderChainItems[i]}\n                />\n            );\n            components.push(component);\n        }\n        return components;\n    }, [folderChainItems]);\n\n    return (\n        <Box className={classes.navbarWrapper}>\n            <Box className={classes.navbarContainer}>\n                <SmartToolbarButton fileActionId={ChonkyActions.OpenParentFolder.id} />\n                <Breadcrumbs\n                    className={classes.navbarBreadcrumbs}\n                    classes={{ separator: classes.separator }}\n                >\n                    {folderChainComponents}\n                </Breadcrumbs>\n            </Box>\n        </Box>\n    );\n});\n\nconst useStyles = makeGlobalChonkyStyles(theme => ({\n    navbarWrapper: {\n        paddingBottom: theme.margins.rootLayoutMargin,\n    },\n    navbarContainer: {\n        display: 'flex',\n    },\n    upDirectoryButton: {\n        fontSize: important(theme.toolbar.fontSize),\n        height: theme.toolbar.size,\n        width: theme.toolbar.size,\n        padding: '0px !important',\n    },\n    navbarBreadcrumbs: {\n        fontSize: important(theme.toolbar.fontSize),\n        flexGrow: 100,\n    },\n    separator: {\n        marginRight: important(4),\n        marginLeft: important(4),\n    },\n}));\n","/**\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\n * @copyright 2020\n * @license MIT\n */\n\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport React, { useCallback, useContext } from 'react';\nimport { Nullable } from 'tsdef';\n\nimport { selectFileActionData } from '../../redux/selectors';\nimport { useParamSelector } from '../../redux/store';\nimport { ChonkyIconName } from '../../types/icons.types';\nimport { CustomVisibilityState } from '../../types/action.types';\nimport { useFileActionProps, useFileActionTrigger } from '../../util/file-actions';\nimport { useLocalizedFileActionStrings } from '../../util/i18n';\nimport { ChonkyIconContext } from '../../util/icon-helper';\nimport { c, important, makeGlobalChonkyStyles } from '../../util/styles';\n\nexport interface ToolbarDropdownButtonProps {\n    text: string;\n    active?: boolean;\n    icon?: Nullable<ChonkyIconName | string>;\n    onClick?: () => void;\n    disabled?: boolean;\n}\n\nexport const ToolbarDropdownButton = React.forwardRef(\n    (props: ToolbarDropdownButtonProps, ref: React.Ref<HTMLLIElement>) => {\n        const { text, active, icon, onClick, disabled } = props;\n        const classes = useStyles();\n        const ChonkyIcon = useContext(ChonkyIconContext);\n\n        const className = c({\n            [classes.baseButton]: true,\n            [classes.activeButton]: active,\n        });\n        return (\n            <MenuItem\n                ref={ref}\n                className={className}\n                onClick={onClick}\n                disabled={disabled}\n            >\n                {icon && (\n                    <ListItemIcon className={classes.icon}>\n                        <ChonkyIcon icon={icon} fixedWidth={true} />\n                    </ListItemIcon>\n                )}\n                <ListItemText primaryTypographyProps={{ className: classes.text }}>\n                    {text}\n                </ListItemText>\n            </MenuItem>\n        );\n    }\n);\n\nconst useStyles = makeGlobalChonkyStyles(theme => ({\n    baseButton: {\n        lineHeight: important(theme.toolbar.lineHeight),\n        height: important(theme.toolbar.size),\n        minHeight: important('auto'),\n        minWidth: important('auto'),\n        padding: important(20),\n    },\n    icon: {\n        fontSize: important(theme.toolbar.fontSize),\n        minWidth: important('auto'),\n        color: important('inherit'),\n        marginRight: 8,\n    },\n    text: {\n        fontSize: important(theme.toolbar.fontSize),\n    },\n    activeButton: {\n        color: important(theme.colors.textActive),\n    },\n}));\n\nexport interface SmartToolbarDropdownButtonProps {\n    fileActionId: string;\n    onClickFollowUp?: () => void;\n}\n\nexport const SmartToolbarDropdownButton = React.forwardRef(\n    (props: SmartToolbarDropdownButtonProps, ref: React.Ref<HTMLLIElement>) => {\n        const { fileActionId, onClickFollowUp } = props;\n\n        const action = useParamSelector(selectFileActionData, fileActionId);\n        const triggerAction = useFileActionTrigger(fileActionId);\n        const { icon, active, disabled } = useFileActionProps(fileActionId);\n        const { buttonName } = useLocalizedFileActionStrings(action);\n\n        // Combine external click handler with internal one\n        const handleClick = useCallback(() => {\n            triggerAction();\n            if (onClickFollowUp) onClickFollowUp();\n        }, [onClickFollowUp, triggerAction]);\n\n        if (!action) return null;\n        const { button } = action;\n        if (!button) return null;\n        if (action.customVisibility !== undefined && action.customVisibility() === CustomVisibilityState.Hidden) return null;\n\n        return (\n            <ToolbarDropdownButton\n                ref={ref}\n                text={buttonName}\n                icon={icon}\n                onClick={handleClick}\n                active={active}\n                disabled={disabled}\n            />\n        );\n    }\n);\n","/**\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\n * @copyright 2020\n * @license MIT\n */\n\nimport Menu from '@material-ui/core/Menu';\nimport React, { useCallback, useMemo } from 'react';\n\nimport { FileActionGroup } from '../../types/action-menus.types';\nimport { useLocalizedFileActionGroup } from '../../util/i18n';\nimport { important, makeGlobalChonkyStyles } from '../../util/styles';\nimport { ToolbarButton } from './ToolbarButton';\nimport { SmartToolbarDropdownButton } from './ToolbarDropdownButton';\n\nexport type ToolbarDropdownProps = FileActionGroup;\n\nexport const ToolbarDropdown: React.FC<ToolbarDropdownProps> = React.memo(props => {\n    const { name, fileActionIds } = props;\n    const [anchor, setAnchor] = React.useState<null | HTMLElement>(null);\n\n    const handleClick = useCallback(\n        (event: React.MouseEvent<HTMLButtonElement>) => setAnchor(event.currentTarget),\n        [setAnchor]\n    );\n    const handleClose = useCallback(() => setAnchor(null), [setAnchor]);\n\n    const menuItemComponents = useMemo(\n        () =>\n            fileActionIds.map(id => (\n                <SmartToolbarDropdownButton\n                    key={`menu-item-${id}`}\n                    fileActionId={id}\n                    onClickFollowUp={handleClose}\n                />\n            )),\n        [fileActionIds, handleClose]\n    );\n\n    const localizedName = useLocalizedFileActionGroup(name);\n    const classes = useStyles();\n    return (\n        <>\n            <ToolbarButton text={localizedName} onClick={handleClick} dropdown={true} />\n            <Menu\n                autoFocus\n                keepMounted\n                elevation={2}\n                anchorEl={anchor}\n                onClose={handleClose}\n                open={Boolean(anchor)}\n                transitionDuration={150}\n                classes={{ list: classes.dropdownList }}\n            >\n                {menuItemComponents}\n            </Menu>\n        </>\n    );\n});\n\nconst useStyles = makeGlobalChonkyStyles(() => ({\n    dropdownList: {\n        paddingBottom: important(0),\n        paddingTop: important(0),\n    },\n}));\n","/**\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\n * @copyright 2020\n * @license MIT\n */\n\nimport React from 'react';\nimport { useIntl } from 'react-intl';\nimport { useSelector } from 'react-redux';\n\nimport Typography from '@material-ui/core/Typography';\n\nimport { selectHiddenFileCount, selectors, selectSelectionSize } from '../../redux/selectors';\nimport { getI18nId, I18nNamespace } from '../../util/i18n';\nimport { important, makeGlobalChonkyStyles } from '../../util/styles';\n\nexport interface ToolbarInfoProps {}\n\nexport const ToolbarInfo: React.FC<ToolbarInfoProps> = React.memo(() => {\n    const classes = useStyles();\n\n    const displayFileIds = useSelector(selectors.getDisplayFileIds);\n    const selectionSize = useSelector(selectSelectionSize);\n    const hiddenCount = useSelector(selectHiddenFileCount);\n\n    const intl = useIntl();\n    const fileCountString = intl.formatMessage(\n        {\n            id: getI18nId(I18nNamespace.Toolbar, 'visibleFileCount'),\n            defaultMessage: `{fileCount, plural,\n                =0 {# items}\n                one {# item}\n                other {# items}\n            }`,\n        },\n        { fileCount: displayFileIds.length }\n    );\n    const selectedString = intl.formatMessage(\n        {\n            id: getI18nId(I18nNamespace.Toolbar, 'selectedFileCount'),\n            defaultMessage: `{fileCount, plural,\n                =0 {}\n                other {# selected}\n            }`,\n        },\n        { fileCount: selectionSize }\n    );\n    const hiddenString = intl.formatMessage(\n        {\n            id: getI18nId(I18nNamespace.Toolbar, 'hiddenFileCount'),\n            defaultMessage: `{fileCount, plural,\n                =0 {}\n                other {# hidden}\n            }`,\n        },\n        { fileCount: hiddenCount }\n    );\n\n    return (\n        <div className={classes.infoContainer}>\n            <Typography className={classes.infoText} variant=\"body1\">\n                {fileCountString}\n                {(selectedString || hiddenString) && (\n                    <span className={classes.extraInfoSpan}>\n                        (\n                        <span className={classes.selectionSizeText}>\n                            {selectedString}\n                        </span>\n                        {selectedString && hiddenString && ', '}\n                        <span className={classes.hiddenCountText}>{hiddenString}</span>)\n                    </span>\n                )}\n            </Typography>\n        </div>\n    );\n});\n\nconst useStyles = makeGlobalChonkyStyles(theme => ({\n    infoContainer: {\n        height: theme.toolbar.size,\n        display: 'flex',\n    },\n    infoText: {\n        lineHeight: important(theme.toolbar.lineHeight),\n        fontSize: important(theme.toolbar.fontSize),\n        marginLeft: important(12),\n        height: theme.toolbar.size,\n    },\n    extraInfoSpan: {\n        marginRight: important(8),\n        marginLeft: important(8),\n        opacity: 0.8,\n    },\n    selectionSizeText: {\n        color: theme.colors.textActive,\n    },\n    hiddenCountText: {},\n}));\n","/**\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\n * @copyright 2020\n * @license MIT\n */\n\nimport React, { useCallback, useContext, useEffect, useRef, useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport TextField from '@material-ui/core/TextField';\n\nimport { reduxActions } from '../../redux/reducers';\nimport { selectSearchString } from '../../redux/selectors';\nimport { ChonkyIconName } from '../../types/icons.types';\nimport { useDebounce } from '../../util/hooks-helpers';\nimport { getI18nId, I18nNamespace } from '../../util/i18n';\nimport { ChonkyIconContext } from '../../util/icon-helper';\nimport { important, makeGlobalChonkyStyles } from '../../util/styles';\n\nexport interface ToolbarSearchProps {}\n\nexport const ToolbarSearch: React.FC<ToolbarSearchProps> = React.memo(() => {\n    const intl = useIntl();\n    const searchPlaceholderString = intl.formatMessage({\n        id: getI18nId(I18nNamespace.Toolbar, 'searchPlaceholder'),\n        defaultMessage: 'Search',\n    });\n\n    const classes = useStyles();\n    const ChonkyIcon = useContext(ChonkyIconContext);\n\n    const searchInputRef = useRef<HTMLInputElement>();\n\n    const dispatch = useDispatch();\n    const reduxSearchString = useSelector(selectSearchString);\n\n    const [localSearchString, setLocalSearchString] = useState(reduxSearchString);\n    const [debouncedLocalSearchString] = useDebounce(localSearchString, 300);\n    const [showLoadingIndicator, setShowLoadingIndicator] = useState(false);\n\n    useEffect(() => {\n        dispatch(\n            reduxActions.setFocusSearchInput(() => {\n                if (searchInputRef.current) searchInputRef.current.focus();\n            })\n        );\n        return () => {\n            dispatch(reduxActions.setFocusSearchInput(null));\n        };\n    }, [dispatch]);\n\n    useEffect(() => {\n        setShowLoadingIndicator(false);\n        dispatch(reduxActions.setSearchString(debouncedLocalSearchString));\n    }, [debouncedLocalSearchString, dispatch]);\n\n    const handleChange = useCallback((event: React.FormEvent<HTMLInputElement>) => {\n        setShowLoadingIndicator(true);\n        setLocalSearchString(event.currentTarget.value);\n    }, []);\n    const handleKeyUp = useCallback(\n        (event: React.KeyboardEvent<HTMLInputElement>) => {\n            // Remove focus from the search input field when user presses escape.\n            // Note: We use KeyUp instead of KeyPress because some browser plugins can\n            //       intercept KeyPress events with Escape key.\n            //       @see https://stackoverflow.com/a/37461974\n            if (event.key === 'Escape') {\n                setLocalSearchString('');\n                dispatch(reduxActions.setSearchString(''));\n                if (searchInputRef.current) searchInputRef.current.blur();\n            }\n        },\n        [dispatch]\n    );\n\n    return (\n        <TextField\n            className={classes.searchFieldContainer}\n            size=\"small\"\n            variant=\"outlined\"\n            value={localSearchString}\n            placeholder={searchPlaceholderString}\n            onChange={handleChange as any}\n            inputRef={searchInputRef}\n            InputProps={{\n                onKeyUp: handleKeyUp,\n                startAdornment: (\n                    <InputAdornment className={classes.searchIcon} position=\"start\">\n                        <ChonkyIcon\n                            icon={showLoadingIndicator ? ChonkyIconName.loading : ChonkyIconName.search}\n                            spin={showLoadingIndicator}\n                        />\n                    </InputAdornment>\n                ),\n                className: classes.searchFieldInput,\n            }}\n            inputProps={{ className: classes.searchFieldInputInner }}\n        />\n    );\n});\n\nconst useStyles = makeGlobalChonkyStyles(theme => ({\n    searchFieldContainer: {\n        height: theme.toolbar.size,\n        width: 150,\n    },\n    searchIcon: {\n        fontSize: '0.9em',\n        opacity: 0.75,\n    },\n    searchFieldInput: {\n        lineHeight: important(0),\n        padding: important(0),\n        margin: important(0),\n        fontSize: important(theme.toolbar.fontSize),\n        borderRadius: theme.toolbar.buttonRadius,\n        height: theme.toolbar.size - 4,\n        paddingLeft: important(8),\n        marginTop: 2,\n    },\n    searchFieldInputInner: {\n        lineHeight: important(`${theme.toolbar.size - 4}px`),\n        fontSize: important(theme.toolbar.fontSize),\n        height: important(theme.toolbar.size - 4),\n        padding: important([0, 8, 0, 0]),\n        margin: important(0),\n        '-webkit-appearance': 'none',\n    },\n}));\n","import React, { ReactElement, useMemo } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { selectToolbarItems } from '../../redux/selectors';\nimport { makeGlobalChonkyStyles } from '../../util/styles';\nimport { SmartToolbarButton } from './ToolbarButton';\nimport { ToolbarDropdown } from './ToolbarDropdown';\nimport { ToolbarInfo } from './ToolbarInfo';\nimport { ToolbarSearch } from './ToolbarSearch';\n\nexport interface FileToolbarProps {}\n\nexport const FileToolbar: React.FC<FileToolbarProps> = React.memo(() => {\n    const classes = useStyles();\n    const toolbarItems = useSelector(selectToolbarItems);\n\n    const toolbarItemComponents = useMemo(() => {\n        const components: ReactElement[] = [];\n        for (let i = 0; i < toolbarItems.length; ++i) {\n            const item = toolbarItems[i];\n\n            const key = `toolbar-item-${typeof item === 'string' ? item : item.name}`;\n            const component =\n                typeof item === 'string' ? (\n                    <SmartToolbarButton key={key} fileActionId={item} />\n                ) : (\n                    <ToolbarDropdown\n                        key={key}\n                        name={item.name}\n                        fileActionIds={item.fileActionIds}\n                    />\n                );\n            components.push(component);\n        }\n        return components;\n    }, [toolbarItems]);\n\n    return (\n        <div className={classes.toolbarWrapper}>\n            <div className={classes.toolbarContainer}>\n                <div className={classes.toolbarLeft}>\n                    <ToolbarSearch />\n                    <ToolbarInfo />\n                </div>\n                <div className={classes.toolbarRight}>{toolbarItemComponents}</div>\n            </div>\n        </div>\n    );\n});\n\nconst useStyles = makeGlobalChonkyStyles(theme => ({\n    toolbarWrapper: {},\n    toolbarContainer: {\n        flexWrap: 'wrap-reverse',\n        display: 'flex',\n    },\n    toolbarLeft: {\n        paddingBottom: theme.margins.rootLayoutMargin,\n        flexWrap: 'nowrap',\n        flexGrow: 10000,\n        display: 'flex',\n    },\n    toolbarLeftFiller: {\n        flexGrow: 10000,\n    },\n    toolbarRight: {\n        paddingBottom: theme.margins.rootLayoutMargin,\n        flexWrap: 'nowrap',\n        display: 'flex',\n    },\n}));\n","/**\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\n * @copyright 2020\n * @license MIT\n */\n\nimport React, { CSSProperties, useContext } from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { ChonkyIconName } from '../../types/icons.types';\nimport { getI18nId, I18nNamespace } from '../../util/i18n';\nimport { ChonkyIconContext } from '../../util/icon-helper';\nimport { makeGlobalChonkyStyles } from '../../util/styles';\n\nexport interface FileListEmptyProps {\n    width: number;\n    height: number;\n}\n\nexport const FileListEmpty: React.FC<FileListEmptyProps> = props => {\n    const { width, height } = props;\n    const classes = useStyles();\n    const ChonkyIcon = useContext(ChonkyIconContext);\n    const style: CSSProperties = {\n        width,\n        height,\n    };\n\n    const intl = useIntl();\n    const emptyString = intl.formatMessage({\n        id: getI18nId(I18nNamespace.FileList, 'nothingToShow'),\n        defaultMessage: 'Nothing to show',\n    });\n\n    return (\n        <div className={classes.fileListEmpty} style={style}>\n            <div className={classes.fileListEmptyContent}>\n                <ChonkyIcon icon={ChonkyIconName.folderOpen} />\n                &nbsp; {emptyString}\n            </div>\n        </div>\n    );\n};\n\nconst useStyles = makeGlobalChonkyStyles(theme => ({\n    fileListEmpty: {\n        color: theme.palette.text.disabled,\n        position: 'relative',\n        textAlign: 'center',\n        fontSize: '1.2em',\n    },\n    fileListEmptyContent: {\n        transform: 'translateX(-50%) translateY(-50%)',\n        position: 'absolute',\n        left: '50%',\n        top: '50%',\n    },\n}));\n","/**\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\n * @copyright 2020\n * @license MIT\n */\n\nimport React, { useCallback } from 'react';\nimport { AnyObjectWithStringKeys } from 'tsdef';\n\nimport { useClickHandler, useKeyDownHandler } from './ClickableWrapper-hooks';\n\nexport interface MouseClickEvent {\n    altKey: boolean;\n    ctrlKey: boolean;\n    shiftKey: boolean;\n}\nexport type MouseClickEventHandler = (event: MouseClickEvent) => void;\n\nexport interface KeyboardClickEvent {\n    enterKey: boolean;\n    spaceKey: boolean;\n    altKey: boolean;\n    ctrlKey: boolean;\n    shiftKey: boolean;\n}\nexport type KeyboardClickEventHandler = (event: KeyboardClickEvent) => void;\n\nexport interface ClickableWrapperProps {\n    wrapperTag: any;\n    passthroughProps?: any;\n\n    onSingleClick?: MouseClickEventHandler;\n    onDoubleClick?: MouseClickEventHandler;\n    onKeyboardClick?: KeyboardClickEventHandler;\n    setFocused?: (focused: boolean) => void;\n}\n\nexport const ClickableWrapper: React.FC<ClickableWrapperProps> = props => {\n    const {\n        children,\n        wrapperTag: WrapperTag,\n        passthroughProps,\n        onSingleClick,\n        onDoubleClick,\n        onKeyboardClick,\n        setFocused,\n    } = props;\n\n    const handleClick = useClickHandler(onSingleClick, onDoubleClick);\n    const handleKeyDown = useKeyDownHandler(onKeyboardClick);\n\n    const compProps: AnyObjectWithStringKeys = {\n        onFocus: useCallback(() => setFocused && setFocused(true), [setFocused]),\n        onBlur: useCallback(() => setFocused && setFocused(false), [setFocused]),\n    };\n\n    if (onSingleClick || onDoubleClick || onKeyboardClick) {\n        compProps.onClick = handleClick;\n        compProps.onKeyDown = handleKeyDown;\n        compProps.tabIndex = 0;\n    }\n\n    const mergedProps = { ...compProps, ...passthroughProps };\n    return <WrapperTag {...mergedProps}>{children}</WrapperTag>;\n};\n","/**\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\n * @copyright 2020\n * @license MIT\n */\n\nimport React, { useCallback, useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Nilable, Nullable } from 'tsdef';\n\nimport { selectDoubleClickDelay } from '../../redux/selectors';\nimport {\n    KeyboardClickEvent,\n    KeyboardClickEventHandler,\n    MouseClickEvent,\n    MouseClickEventHandler,\n} from './ClickableWrapper';\n\nexport const useClickHandler = (\n    onSingleClick: Nilable<MouseClickEventHandler>,\n    onDoubleClick: Nilable<MouseClickEventHandler>\n) => {\n    const doubleClickDelay = useSelector(selectDoubleClickDelay);\n\n    const counter = useRef({\n        clickCount: 0,\n        clickTimeout: null as Nullable<number>,\n    });\n\n    return useCallback(\n        (event: React.MouseEvent) => {\n            const mouseClickEvent: MouseClickEvent = {\n                altKey: event.altKey,\n                ctrlKey: event.ctrlKey || event.metaKey,\n                shiftKey: event.shiftKey,\n\n            };\n\n            counter.current.clickCount++;\n            if (counter.current.clickCount === 1) {\n                if (onSingleClick) {\n                    event.preventDefault();\n                    onSingleClick(mouseClickEvent);\n                }\n                counter.current.clickCount = 1;\n                // @ts-ignore\n                counter.current.clickTimeout = setTimeout(\n                    () => (counter.current.clickCount = 0),\n                    doubleClickDelay\n                );\n            } else if (counter.current.clickCount === 2) {\n                if (onDoubleClick) {\n                    event.preventDefault();\n                    onDoubleClick(mouseClickEvent);\n                }\n                if (typeof counter.current.clickTimeout === 'number') {\n                    clearTimeout(counter.current.clickTimeout);\n                    counter.current.clickTimeout = null;\n                    counter.current.clickCount = 0;\n                }\n            }\n        },\n        [doubleClickDelay, onSingleClick, onDoubleClick, counter]\n    );\n};\n\nexport const useKeyDownHandler = (onKeyboardClick?: KeyboardClickEventHandler) => {\n    return useCallback(\n        (event: React.KeyboardEvent) => {\n            if (!onKeyboardClick) return;\n\n            const keyboardClickEvent: KeyboardClickEvent = {\n                enterKey: event.nativeEvent.code === 'Enter',\n                spaceKey: event.nativeEvent.code === 'Space',\n                altKey: event.altKey,\n                ctrlKey: event.ctrlKey,\n                shiftKey: event.shiftKey,\n            };\n\n            if (keyboardClickEvent.spaceKey || keyboardClickEvent.enterKey) {\n                event.preventDefault();\n                event.stopPropagation();\n                onKeyboardClick(keyboardClickEvent);\n            }\n        },\n        [onKeyboardClick]\n    );\n};\n","/**\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\n * @copyright 2020\n * @license MIT\n */\n\nimport React from 'react';\nimport { Nullable } from 'tsdef';\n\nimport { FileData } from '../../types/file.types';\nimport { makeLocalChonkyStyles } from '../../util/styles';\nimport { useFileNameComponent, useModifierIconComponents } from './FileEntry-hooks';\n\nexport interface FileEntryNameProps {\n    file: Nullable<FileData>;\n    className?: string;\n}\n\nexport const FileEntryName: React.FC<FileEntryNameProps> = React.memo(({ file, className }) => {\n    const modifierIconComponents = useModifierIconComponents(file);\n    const fileNameComponent = useFileNameComponent(file);\n\n    const classes = useStyles();\n    return (\n        <span className={className} title={file ? file.name : undefined}>\n            {modifierIconComponents.length > 0 && (\n                <span className={classes.modifierIcons}>{modifierIconComponents}</span>\n            )}\n            {fileNameComponent}\n        </span>\n    );\n});\nFileEntryName.displayName = 'FileEntryName';\n\nconst useStyles = makeLocalChonkyStyles(theme => ({\n    modifierIcons: {\n        color: theme.palette.text.hint,\n        position: 'relative',\n        fontSize: '0.775em',\n        paddingRight: 5,\n    },\n}));\n","import React, { useContext } from 'react';\n\nimport { FileEntryProps } from '../../types/file-list.types';\nimport { useLocalizedFileEntryStrings } from '../../util/i18n';\nimport { ChonkyIconContext } from '../../util/icon-helper';\nimport { makeLocalChonkyStyles } from '../../util/styles';\nimport { TextPlaceholder } from '../external/TextPlaceholder';\nimport { useFileEntryHtmlProps, useFileEntryState } from './FileEntry-hooks';\nimport { FileEntryName } from './FileEntryName';\nimport { FileEntryState } from './GridEntryPreview';\n\nexport const CompactEntry: React.FC<FileEntryProps> = React.memo(\n    // @ts-ignore\n    ({ file, selected, focused, dndState }) => {\n        const entryState: FileEntryState = useFileEntryState(file, selected, focused);\n\n        const { fileModDateString, fileSizeString } = useLocalizedFileEntryStrings(\n            file\n        );\n\n        const classes = useStyles(entryState);\n        const ChonkyIcon = useContext(ChonkyIconContext);\n        const fileEntryHtmlProps = useFileEntryHtmlProps(file);\n        return (\n            <div className={classes.listFileEntry} {...fileEntryHtmlProps}>\n                <div className={classes.listFileEntryIcon}>\n                    <ChonkyIcon\n                        icon={entryState.icon}\n                        spin={entryState.iconSpin}\n                        fixedWidth={true}\n                    />\n                </div>\n                <div className={classes.listFileEntryDescription}>\n                    <div\n                        className={classes.listFileEntryName}\n                        title={file ? file.name : undefined}\n                    >\n                        <FileEntryName file={file} />\n                    </div>\n                    <div className={classes.listFileEntryProperties}>\n                        <div className={classes.listFileEntryProperty}>\n                            {file ? (\n                                fileModDateString ?? <span>—</span>\n                            ) : (\n                                <TextPlaceholder minLength={5} maxLength={15} />\n                            )}\n                        </div>\n                        <div className={classes.listFileEntryProperty}>\n                            {file ? (\n                                fileSizeString ?? <span>—</span>\n                            ) : (\n                                <TextPlaceholder minLength={10} maxLength={20} />\n                            )}\n                        </div>\n                    </div>\n                </div>\n                <div className=\"chonky-file-entry-outline\"></div>\n                <div className=\"chonky-file-entry-selection\"></div>\n            </div>\n        );\n    }\n);\n\nconst useStyles = makeLocalChonkyStyles(theme => ({\n    listFileEntry: {\n        fontSize: theme.listFileEntry.fontSize,\n        alignItems: 'center',\n        position: 'relative',\n        display: 'flex',\n        height: '100%',\n    },\n    listFileEntryIcon: {\n        backgroundColor: (state: FileEntryState) => state.color,\n        boxShadow: 'inset rgba(255, 255, 255, 0.5) 0 0 0 999px',\n        borderRadius: theme.listFileEntry.iconBorderRadius,\n        fontSize: theme.listFileEntry.iconFontSize,\n        color: '#fff',\n        padding: 8,\n    },\n    listFileEntryDescription: {\n        flexDirection: 'column',\n        display: 'flex',\n        flexGrow: 1,\n    },\n    listFileEntryName: {\n        padding: [0, 8, 4, 8],\n    },\n    listFileEntryProperties: {\n        fontSize: theme.listFileEntry.propertyFontSize,\n        flexDirection: 'row',\n        display: 'flex',\n    },\n    listFileEntryProperty: {\n        padding: [0, 8],\n        opacity: 0.4,\n    },\n}));\n","import React from 'react';\nimport { Nullable } from 'tsdef';\n\nimport { DndEntryState } from '../../types/file-list.types';\nimport { FileData } from '../../types/file.types';\nimport { useDndHoverOpen, useFileEntryDnD } from '../../util/dnd';\nimport { FileHelper } from '../../util/file-helper';\nimport { makeLocalChonkyStyles } from '../../util/styles';\n\nexport interface DnDFileEntryProps {\n    file: Nullable<FileData>;\n    children: (dndState: DndEntryState) => React.ReactElement;\n}\n\nexport const DnDFileEntry = React.memo(({ file, children }: DnDFileEntryProps) => {\n    const { drop, drag, dndState } = useFileEntryDnD(file);\n\n    useDndHoverOpen(file, dndState);\n    const classes = useStyles();\n    return (\n        <div ref={drop} className={classes.fillParent}>\n            <div\n                ref={FileHelper.isDraggable(file) ? drag : null}\n                className={classes.fillParent}\n            >\n                {children(dndState)}\n            </div>\n        </div>\n    );\n});\n\nexport const useStyles = makeLocalChonkyStyles(() => ({\n    fillParent: {\n        height: '100%',\n    },\n}));\n","/**\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\n * @copyright 2020\n * @license MIT\n */\n\nimport c from 'classnames';\nimport React from 'react';\nimport { Nullable } from 'tsdef';\n\nimport { makeGlobalChonkyStyles } from '../../util/styles';\n\nexport interface FileThumbnailProps {\n    className: string;\n    thumbnailUrl: Nullable<string>;\n}\n\nexport const FileThumbnail: React.FC<FileThumbnailProps> = React.memo(props => {\n    const { className, thumbnailUrl } = props;\n\n    const thumbnailStyle: React.CSSProperties = thumbnailUrl ? { backgroundImage: `url('${thumbnailUrl}')` } : {};\n\n    const classes = useStyles();\n    return <div className={c([className, classes.fileThumbnail])} style={thumbnailStyle} />;\n});\nFileThumbnail.displayName = 'FileThumbnail';\n\nconst useStyles = makeGlobalChonkyStyles(() => ({\n    fileThumbnail: {\n        backgroundRepeat: 'no-repeat',\n        backgroundPosition: 'center',\n        backgroundSize: 'contain',\n    },\n}));\n","/**\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\n * @copyright 2020\n * @license MIT\n */\n\nimport React, { useContext } from 'react';\n\nimport { DndEntryState } from '../../types/file-list.types';\nimport { ChonkyIconContext } from '../../util/icon-helper';\nimport { c, makeLocalChonkyStyles } from '../../util/styles';\nimport { useDndIcon } from './FileEntry-hooks';\n\nexport interface DnDIndicatorProps {\n    className: string;\n    dndState: DndEntryState;\n}\n\nexport const GridEntryDndIndicator: React.FC<DnDIndicatorProps> = React.memo(props => {\n    const { className: externalClassName, dndState } = props;\n    const dndIconName = useDndIcon(dndState);\n    const classes = useStyles(dndState);\n    const ChonkyIcon = useContext(ChonkyIconContext);\n    if (!dndIconName) return null;\n    const className = c({\n        [classes.dndIndicator]: true,\n        [externalClassName]: true,\n    });\n    return (\n        <div className={className}>\n            <ChonkyIcon icon={dndIconName} />\n        </div>\n    );\n});\n\nconst useStyles = makeLocalChonkyStyles(theme => ({\n    dndIndicator: {\n        color: (dndState: DndEntryState) =>\n            dndState.dndIsOver\n                ? dndState.dndCanDrop\n                    ? theme.dnd.canDropColor\n                    : theme.dnd.cannotDropColor\n                : '#000',\n        boxSizing: 'border-box',\n        position: 'absolute',\n        fontSize: '1.2em',\n        opacity: 0.6,\n        padding: 6,\n        '&:before': {\n            borderBottom: '50px solid transparent',\n            borderLeft: '50px solid #fff',\n            position: 'absolute',\n            content: '\"\"',\n            zIndex: -1,\n            left: 0,\n            top: 0,\n        },\n    },\n}));\n","/**\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\n * @copyright 2020\n * @license MIT\n */\n\nimport React, { useContext, useEffect } from 'react';\nimport { Nullable } from 'tsdef';\n\nimport { DndEntryState } from '../../types/file-list.types';\nimport { ChonkyIconName } from '../../types/icons.types';\nimport { ChonkyIconContext } from '../../util/icon-helper';\nimport { c, important, makeLocalChonkyStyles } from '../../util/styles';\nimport { FileThumbnail } from './FileThumbnail';\nimport { GridEntryDndIndicator } from './GridEntryDndIndicator';\n\nexport type FileEntryState = {\n    childrenCount: Nullable<number>;\n    color: string;\n    icon: ChonkyIconName | string;\n    thumbnailUrl: Nullable<string>;\n    iconSpin: boolean;\n    selected: boolean;\n    focused: boolean;\n};\n\nexport interface FileEntryPreviewProps {\n    className?: string;\n    entryState: FileEntryState;\n    dndState: DndEntryState;\n}\n\nexport const GridEntryPreviewFolder: React.FC<FileEntryPreviewProps> = React.memo(props => {\n    const { className: externalClassName, entryState, dndState } = props;\n\n    const folderClasses = useFolderStyles(entryState);\n    const fileClasses = useFileStyles(entryState);\n    const commonClasses = useCommonEntryStyles(entryState);\n    const className = c({\n        [folderClasses.previewFile]: true,\n        [externalClassName || '']: !!externalClassName,\n    });\n    return (\n        <div className={className}>\n            <div className={folderClasses.folderBackSideMid}>\n                <div className={folderClasses.folderBackSideTop} />\n                <div className={folderClasses.folderFrontSide}>\n                    <GridEntryDndIndicator className={fileClasses.dndIndicator} dndState={dndState} />\n                    <div className={c([fileClasses.fileIcon, folderClasses.fileIcon])}>{entryState.childrenCount}</div>\n                    <div className={commonClasses.selectionIndicator}></div>\n                    <FileThumbnail className={fileClasses.thumbnail} thumbnailUrl={entryState.thumbnailUrl} />\n                </div>\n            </div>\n        </div>\n    );\n});\nGridEntryPreviewFolder.displayName = 'GridEntryPreviewFolder';\n\nconst useFolderStyles = makeLocalChonkyStyles(theme => ({\n    previewFile: {\n        borderRadius: theme.gridFileEntry.borderRadius,\n        position: 'relative',\n        overflow: 'hidden',\n    },\n    folderBackSideTop: {\n        backgroundColor: (state: FileEntryState) => state.color,\n        boxShadow: (state: FileEntryState) => {\n            let color = theme.gridFileEntry.folderBackColorTint;\n            if (state.focused) color = 'rgba(0, 0, 0, 0.3)';\n            else if (state.selected) color = 'rgba(0, 153, 255, .4)';\n            return `inset ${color} 0 0 0 999px`;\n        },\n        borderTopLeftRadius: theme.gridFileEntry.borderRadius,\n        borderTopRightRadius: 10,\n        position: 'absolute',\n        right: '60%',\n        height: 13,\n        top: -10,\n        left: 0,\n        '&:after': {\n            borderRightColor: theme.palette.background.paper,\n            borderTopColor: theme.palette.background.paper,\n            borderBottomColor: 'transparent',\n            borderLeftColor: 'transparent',\n            borderWidth: [0, 15, 10, 0],\n            borderStyle: 'solid',\n            position: 'absolute',\n            display: 'block',\n            content: '\"\"',\n            right: 0,\n            top: 0,\n        },\n    },\n    folderBackSideMid: {\n        backgroundColor: (state: FileEntryState) => state.color,\n        boxShadow: (state: FileEntryState) => {\n            let color = theme.gridFileEntry.folderBackColorTint;\n            if (state.focused) color = 'rgba(0, 0, 0, 0.3)';\n            else if (state.selected) color = 'rgba(0, 153, 255, .4)';\n            return `inset ${color} 0 0 0 999px`;\n        },\n        borderTopRightRadius: theme.gridFileEntry.borderRadius,\n        position: 'absolute',\n        bottom: 0,\n        right: 0,\n        left: 0,\n        top: 10,\n    },\n    folderFrontSide: {\n        boxShadow: (state: FileEntryState) => {\n            const shadows: string[] = [];\n            if (state.focused) shadows.push('inset rgba(0, 0, 0, 1) 0 0 0 3px');\n            if (state.selected) shadows.push('inset rgba(0, 153, 255, .65) 0 0 0 3px');\n            shadows.push(`inset ${theme.gridFileEntry.folderFrontColorTint} 0 0 0 999px`);\n            return shadows.join(', ');\n        },\n        backgroundColor: (state: FileEntryState) => state.color,\n        borderRadius: theme.gridFileEntry.borderRadius,\n        position: 'absolute',\n        overflow: 'hidden',\n        bottom: 0,\n        right: 0,\n        left: 0,\n        top: 10,\n    },\n    fileIcon: {\n        fontSize: important(theme.gridFileEntry.childrenCountSize),\n    },\n}));\n\nexport const GridEntryPreviewFile: React.FC<FileEntryPreviewProps> = React.memo(props => {\n    const { className: externalClassName, entryState, dndState } = props;\n\n    const fileClasses = useFileStyles(entryState);\n    const commonClasses = useCommonEntryStyles(entryState);\n    const ChonkyIcon = useContext(ChonkyIconContext);\n    const className = c({\n        [fileClasses.previewFile]: true,\n        [externalClassName || '']: !!externalClassName,\n    });\n    return (\n        <div className={className}>\n            <GridEntryDndIndicator className={fileClasses.dndIndicator} dndState={dndState} />\n            <div className={fileClasses.fileIcon}>\n                <ChonkyIcon icon={entryState.icon} spin={entryState.iconSpin} />\n            </div>\n            <div className={commonClasses.selectionIndicator}></div>\n            <FileThumbnail className={fileClasses.thumbnail} thumbnailUrl={entryState.thumbnailUrl} />\n        </div>\n    );\n});\nGridEntryPreviewFile.displayName = 'GridEntryPreviewFile';\n\nconst useFileStyles = makeLocalChonkyStyles(theme => ({\n    previewFile: {\n        boxShadow: (state: FileEntryState) => {\n            const shadows: string[] = [];\n            if (state.selected) shadows.push('inset rgba(0,153,255, .65) 0 0 0 3px');\n            if (state.focused) shadows.push('inset rgba(0, 0, 0, 1) 0 0 0 3px');\n            shadows.push(`inset ${theme.gridFileEntry.fileColorTint} 0 0 0 999px`);\n            return shadows.join(', ');\n        },\n        backgroundColor: (state: FileEntryState) => state.color,\n        borderRadius: theme.gridFileEntry.borderRadius,\n        position: 'relative',\n        overflow: 'hidden',\n    },\n    dndIndicator: {\n        zIndex: 14,\n    },\n    fileIcon: {\n        transform: 'translateX(-50%) translateY(-50%)',\n        fontSize: theme.gridFileEntry.iconSize,\n        opacity: (state: FileEntryState) => (state.thumbnailUrl && !state.focused ? 0 : 1),\n        color: (state: FileEntryState) =>\n            state.focused ? theme.gridFileEntry.iconColorFocused : theme.gridFileEntry.iconColor,\n        position: 'absolute',\n        left: '50%',\n        zIndex: 12,\n        top: '50%',\n    },\n    thumbnail: {\n        borderRadius: theme.gridFileEntry.borderRadius,\n        position: 'absolute',\n        zIndex: 6,\n        bottom: 5,\n        right: 5,\n        left: 5,\n        top: 5,\n    },\n}));\n\nexport const useCommonEntryStyles = makeLocalChonkyStyles(() => ({\n    selectionIndicator: {\n        display: (state: FileEntryState) => (state.selected ? 'block' : 'none'),\n        background:\n            'repeating-linear-gradient(' +\n            '45deg,' +\n            'rgba(0,153,255,.14),' +\n            'rgba(0,153,255,.14) 10px,' +\n            'rgba(0,153,255,.25) 0,' +\n            'rgba(0,153,255,.25) 20px' +\n            ')',\n        backgroundColor: 'rgba(0, 153, 255, .14)',\n        position: 'absolute',\n        height: '100%',\n        width: '100%',\n        zIndex: 10,\n    },\n    focusIndicator: {\n        display: (state: FileEntryState) => (state.focused ? 'block' : 'none'),\n        boxShadow: 'inset rgba(0, 0, 0, 1) 0 0 0 2px',\n        position: 'absolute',\n        height: '100%',\n        width: '100%',\n        zIndex: 11,\n    },\n}));\n","import React from 'react';\n\nimport { FileEntryProps } from '../../types/file-list.types';\nimport { FileHelper } from '../../util/file-helper';\nimport { c, makeLocalChonkyStyles } from '../../util/styles';\nimport { useFileEntryHtmlProps, useFileEntryState } from './FileEntry-hooks';\nimport { FileEntryName } from './FileEntryName';\nimport { FileEntryState, GridEntryPreviewFile, GridEntryPreviewFolder } from './GridEntryPreview';\n\nexport const GridEntry: React.FC<FileEntryProps> = React.memo(({ file, selected, focused, dndState }) => {\n    const isDirectory = FileHelper.isDirectory(file);\n    const entryState = useFileEntryState(file, selected, focused);\n\n    const classes = useFileEntryStyles(entryState);\n    const fileEntryHtmlProps = useFileEntryHtmlProps(file);\n    const entryClassName = c({\n        [classes.gridFileEntry]: true,\n    });\n    return (\n        <div className={entryClassName} {...fileEntryHtmlProps}>\n            {isDirectory ? (\n                <GridEntryPreviewFolder\n                    className={classes.gridFileEntryPreview}\n                    entryState={entryState}\n                    dndState={dndState}\n                />\n            ) : (\n                <GridEntryPreviewFile\n                    className={classes.gridFileEntryPreview}\n                    entryState={entryState}\n                    dndState={dndState}\n                />\n            )}\n            <div className={classes.gridFileEntryNameContainer}>\n                <FileEntryName className={classes.gridFileEntryName} file={file} />\n            </div>\n        </div>\n    );\n});\nGridEntry.displayName = 'GridEntry';\n\nconst useFileEntryStyles = makeLocalChonkyStyles(theme => ({\n    gridFileEntry: {\n        flexDirection: 'column',\n        display: 'flex',\n        height: '100%',\n    },\n    gridFileEntryPreview: {\n        flexGrow: 1,\n    },\n    gridFileEntryNameContainer: {\n        fontSize: theme.gridFileEntry.fontSize,\n        wordBreak: 'break-word',\n        textAlign: 'center',\n        paddingTop: 5,\n    },\n    gridFileEntryName: {\n        backgroundColor: (state: FileEntryState) => (state.selected ? 'rgba(0,153,255, .25)' : 'transparent'),\n        textDecoration: (state: FileEntryState) => (state.focused ? 'underline' : 'none'),\n        borderRadius: 3,\n        padding: [2, 4],\n    },\n}));\n","import React, { useContext, useMemo } from 'react';\n\nimport { DndEntryState, FileEntryProps } from '../../types/file-list.types';\nimport { useLocalizedFileEntryStrings } from '../../util/i18n';\nimport { ChonkyIconContext } from '../../util/icon-helper';\nimport { c, makeLocalChonkyStyles } from '../../util/styles';\nimport { TextPlaceholder } from '../external/TextPlaceholder';\nimport {\n    useDndIcon,\n    useFileEntryHtmlProps,\n    useFileEntryState,\n} from './FileEntry-hooks';\nimport { FileEntryName } from './FileEntryName';\nimport { FileEntryState, useCommonEntryStyles } from './GridEntryPreview';\n\ninterface StyleState {\n    entryState: FileEntryState;\n    dndState: DndEntryState;\n}\n\nexport const ListEntry: React.FC<FileEntryProps> = React.memo(\n    ({ file, selected, focused, dndState }) => {\n        const entryState: FileEntryState = useFileEntryState(file, selected, focused);\n        const dndIconName = useDndIcon(dndState);\n\n        const { fileModDateString, fileSizeString } = useLocalizedFileEntryStrings(\n            file\n        );\n        const styleState = useMemo<StyleState>(\n            () => ({\n                entryState,\n                dndState,\n            }),\n            [dndState, entryState]\n        );\n        const classes = useStyles(styleState);\n        const commonClasses = useCommonEntryStyles(entryState);\n        const ChonkyIcon = useContext(ChonkyIconContext);\n        const fileEntryHtmlProps = useFileEntryHtmlProps(file);\n        return (\n            <div className={classes.listFileEntry} {...fileEntryHtmlProps}>\n                <div className={commonClasses.focusIndicator}></div>\n                <div\n                    className={c([\n                        commonClasses.selectionIndicator,\n                        classes.listFileEntrySelection,\n                    ])}\n                ></div>\n                <div className={classes.listFileEntryIcon}>\n                    <ChonkyIcon\n                        icon={dndIconName ?? entryState.icon}\n                        spin={dndIconName ? false : entryState.iconSpin}\n                        fixedWidth={true}\n                    />\n                </div>\n                <div\n                    className={classes.listFileEntryName}\n                    title={file ? file.name : undefined}\n                >\n                    <FileEntryName file={file} />\n                </div>\n                <div className={classes.listFileEntryProperty}>\n                    {file ? (\n                        fileModDateString ?? <span>—</span>\n                    ) : (\n                        <TextPlaceholder minLength={5} maxLength={15} />\n                    )}\n                </div>\n                <div className={classes.listFileEntryProperty}>\n                    {file ? (\n                        fileSizeString ?? <span>—</span>\n                    ) : (\n                        <TextPlaceholder minLength={10} maxLength={20} />\n                    )}\n                </div>\n            </div>\n        );\n    }\n);\n\nconst useStyles = makeLocalChonkyStyles(theme => ({\n    listFileEntry: {\n        boxShadow: `inset ${theme.palette.divider} 0 -1px 0`,\n        fontSize: theme.listFileEntry.fontSize,\n        color: ({ dndState }: StyleState) =>\n            dndState.dndIsOver\n                ? dndState.dndCanDrop\n                    ? theme.dnd.canDropColor\n                    : theme.dnd.cannotDropColor\n                : 'inherit',\n        alignItems: 'center',\n        position: 'relative',\n        display: 'flex',\n        height: '100%',\n    },\n    listFileEntrySelection: {\n        opacity: 0.6,\n    },\n    listFileEntryIcon: {\n        color: ({ entryState, dndState }: StyleState) =>\n            dndState.dndIsOver\n                ? dndState.dndCanDrop\n                    ? theme.dnd.canDropColor\n                    : theme.dnd.cannotDropColor\n                : entryState.color,\n        fontSize: theme.listFileEntry.iconFontSize,\n        boxSizing: 'border-box',\n        padding: [2, 4],\n        zIndex: 20,\n    },\n    listFileEntryName: {\n        textOverflow: 'ellipsis',\n        boxSizing: 'border-box',\n        whiteSpace: 'nowrap',\n        overflow: 'hidden',\n        flex: '1 1 300px',\n        paddingLeft: 8,\n        zIndex: 20,\n    },\n    listFileEntryProperty: {\n        fontSize: theme.listFileEntry.propertyFontSize,\n        boxSizing: 'border-box',\n        whiteSpace: 'nowrap',\n        overflow: 'hidden',\n        flex: '0 1 150px',\n        padding: [2, 8],\n        zIndex: 20,\n    },\n}));\n","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Nullable } from 'tsdef';\n\nimport { selectFileData, selectIsDnDDisabled, selectIsFileSelected } from '../../redux/selectors';\nimport { useParamSelector } from '../../redux/store';\nimport { DndEntryState, FileEntryProps } from '../../types/file-list.types';\nimport { FileViewMode } from '../../types/file-view.types';\nimport { FileHelper } from '../../util/file-helper';\nimport { makeGlobalChonkyStyles } from '../../util/styles';\nimport { ClickableWrapper, ClickableWrapperProps } from '../internal/ClickableWrapper';\nimport { CompactEntry } from './CompactEntry';\nimport { DnDFileEntry } from './DnDFileEntry';\nimport { useFileClickHandlers } from './FileEntry-hooks';\nimport { GridEntry } from './GridEntry';\nimport { ListEntry } from './ListEntry';\n\nexport interface SmartFileEntryProps {\n    fileId: Nullable<string>;\n    displayIndex: number;\n    fileViewMode: FileViewMode;\n}\n\nconst disabledDndState: DndEntryState = {\n    dndIsDragging: false,\n    dndIsOver: false,\n    dndCanDrop: false,\n};\n\nexport const SmartFileEntry: React.FC<SmartFileEntryProps> = React.memo(({ fileId, displayIndex, fileViewMode }) => {\n    const classes = useStyles();\n\n    // Basic properties\n    const file = useParamSelector(selectFileData, fileId);\n    const selected = useParamSelector(selectIsFileSelected, fileId);\n    const dndDisabled = useSelector(selectIsDnDDisabled);\n\n    // Clickable wrapper properties\n    const fileClickHandlers = useFileClickHandlers(file, displayIndex);\n    const [focused, setFocused] = useState(false);\n    const clickableWrapperProps: ClickableWrapperProps = {\n        wrapperTag: 'div',\n        passthroughProps: { className: classes.fileEntryClickableWrapper },\n        ...(FileHelper.isClickable(file) ? fileClickHandlers : undefined),\n        setFocused,\n    };\n\n    // File entry properties\n    const fileEntryProps: Omit<FileEntryProps, 'dndState'> = {\n        file,\n        selected,\n        focused,\n    };\n\n    let EntryComponent: React.FC<FileEntryProps>;\n    if (fileViewMode === FileViewMode.List) EntryComponent = ListEntry;\n    else if (fileViewMode === FileViewMode.Compact) EntryComponent = CompactEntry;\n    else EntryComponent = GridEntry;\n\n    return dndDisabled ? (\n        <ClickableWrapper {...clickableWrapperProps}>\n            <EntryComponent {...fileEntryProps} dndState={disabledDndState} />\n        </ClickableWrapper>\n    ) : (\n        <DnDFileEntry file={file}>\n            {dndState => (\n                <ClickableWrapper {...clickableWrapperProps}>\n                    <EntryComponent {...fileEntryProps} dndState={dndState} />\n                </ClickableWrapper>\n            )}\n        </DnDFileEntry>\n    );\n});\nSmartFileEntry.displayName = 'SmartFileEntry';\n\nconst useStyles = makeGlobalChonkyStyles(() => ({\n    fileEntryClickableWrapper: {\n        // We disable default browser outline because Chonky provides its own outline\n        // (which doesn't compromise accessibility, hopefully)\n        outline: 'none !important',\n        position: 'relative',\n        height: '100%',\n    },\n}));\n","/**\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\n * @copyright 2020\n * @license MIT\n */\n\nimport React, { CSSProperties, useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { VariableSizeGrid } from 'react-window';\n\nimport { ChonkyActions } from '../../action-definitions';\nimport { selectFileViewConfig, selectors } from '../../redux/selectors';\nimport { FileViewConfigGrid } from '../../types/file-view.types';\nimport { RootState } from '../../types/redux.types';\nimport { useInstanceVariable } from '../../util/hooks-helpers';\nimport { makeGlobalChonkyStyles, useIsMobileBreakpoint } from '../../util/styles';\nimport { SmartFileEntry } from './FileEntry';\n\nexport interface FileListGridProps {\n    width: number;\n    height: number;\n}\n\ninterface GridConfig {\n    rowCount: number;\n    columnCount: number;\n    gutter: number;\n    rowHeight: number;\n    columnWidth: number;\n}\n\nexport const isMobileDevice = () => {\n    // noinspection JSDeprecatedSymbols\n    return typeof window.orientation !== 'undefined' || navigator.userAgent.indexOf('IEMobile') !== -1;\n};\n\nexport const getGridConfig = (\n    width: number,\n    fileCount: number,\n    viewConfig: FileViewConfigGrid,\n    isMobileBreakpoint: boolean\n): GridConfig => {\n    const gutter = isMobileBreakpoint ? 5 : 8;\n    const scrollbar = isMobileDevice() ? 0 : 18;\n\n    let columnCount: number;\n    let columnWidth: number;\n    if (isMobileBreakpoint) {\n        columnCount = 2;\n        columnWidth = (width - gutter - scrollbar) / columnCount;\n    } else {\n        columnWidth = viewConfig.entryWidth;\n        columnCount = Math.max(1, Math.floor((width - scrollbar) / (columnWidth + gutter)));\n    }\n\n    const rowCount = Math.ceil(fileCount / columnCount);\n\n    return {\n        rowCount,\n        columnCount,\n        gutter,\n        rowHeight: viewConfig.entryHeight,\n        columnWidth,\n    };\n};\n\nexport const GridContainer: React.FC<FileListGridProps> = React.memo(props => {\n    const { width, height } = props;\n\n    const viewConfig = useSelector(selectFileViewConfig) as FileViewConfigGrid;\n    const displayFileIds = useSelector(selectors.getDisplayFileIds);\n    const fileCount = useMemo(() => displayFileIds.length, [displayFileIds]);\n\n    const gridRef = useRef<VariableSizeGrid>();\n    const isMobileBreakpoint = useIsMobileBreakpoint();\n\n    // Whenever the grid config changes at runtime, we call a method on the\n    // `VariableSizeGrid` handle to reset column width/row height cache.\n    // !!! Note that we deliberately update the `gridRef` firsts and update the React\n    //     state AFTER that. This is needed to avoid file entries jumping up/down.\n    const [gridConfig, setGridConfig] = useState(getGridConfig(width, fileCount, viewConfig, isMobileBreakpoint));\n    const gridConfigRef = useRef(gridConfig);\n    useEffect(() => {\n        const oldConf = gridConfigRef.current;\n        const newConf = getGridConfig(width, fileCount, viewConfig, isMobileBreakpoint);\n\n        gridConfigRef.current = newConf;\n        if (gridRef.current) {\n            if (oldConf.rowCount !== newConf.rowCount) {\n                gridRef.current.resetAfterRowIndex(Math.min(oldConf.rowCount, newConf.rowCount) - 1);\n            }\n            if (oldConf.columnCount !== newConf.columnCount) {\n                gridRef.current.resetAfterColumnIndex(Math.min(oldConf.columnCount, newConf.rowCount) - 1);\n            }\n            if (oldConf.columnWidth !== newConf.columnWidth) {\n                gridRef.current.resetAfterIndices({ columnIndex: 0, rowIndex: 0 });\n            }\n        }\n\n        setGridConfig(newConf);\n    }, [setGridConfig, gridConfigRef, isMobileBreakpoint, width, viewConfig, fileCount]);\n\n    const sizers = useMemo(() => {\n        const gc = gridConfigRef;\n        return {\n            getColumnWidth: (index: number) =>\n                gc.current.columnWidth! + (index === gc.current.columnCount - 1 ? 0 : gc.current.gutter),\n            getRowHeight: (index: number) =>\n                gc.current.rowHeight + (index === gc.current.rowCount - 1 ? 0 : gc.current.gutter),\n        };\n    }, [gridConfigRef]);\n\n    const displayFileIdsRef = useInstanceVariable(useSelector(selectors.getDisplayFileIds));\n    const getItemKey = useCallback(\n        (data: { columnIndex: number; rowIndex: number; data: any }) => {\n            const index = data.rowIndex * gridConfigRef.current.columnCount + data.columnIndex;\n\n            return displayFileIdsRef.current[index] ?? `loading-file-${index}`;\n        },\n        [gridConfigRef, displayFileIdsRef]\n    );\n\n    const cellRenderer = useCallback(\n        (data: { rowIndex: number; columnIndex: number; style: CSSProperties }) => {\n            const gc = gridConfigRef;\n            const index = data.rowIndex * gc.current.columnCount + data.columnIndex;\n            const fileId = displayFileIds[index];\n            if (displayFileIds[index] === undefined) return null;\n\n            const styleWithGutter: CSSProperties = {\n                ...data.style,\n                paddingRight: data.columnIndex === gc.current.columnCount - 1 ? 0 : gc.current.gutter,\n                paddingBottom: data.rowIndex === gc.current.rowCount - 1 ? 0 : gc.current.gutter,\n                boxSizing: 'border-box',\n            };\n\n            return (\n                <div style={styleWithGutter}>\n                    <SmartFileEntry fileId={fileId ?? null} displayIndex={index} fileViewMode={viewConfig.mode} />\n                </div>\n            );\n        },\n        [displayFileIds, viewConfig.mode]\n    );\n\n    const classes = useStyles();\n    const gridComponent = useMemo(() => {\n        return (\n            <VariableSizeGrid\n                ref={gridRef as any}\n                className={classes.gridContainer}\n                estimatedRowHeight={gridConfig.rowHeight + gridConfig.gutter}\n                rowHeight={sizers.getRowHeight}\n                estimatedColumnWidth={gridConfig.columnWidth + gridConfig.gutter}\n                columnWidth={sizers.getColumnWidth}\n                columnCount={gridConfig.columnCount}\n                height={height}\n                rowCount={gridConfig.rowCount}\n                width={width}\n                itemKey={getItemKey}\n            >\n                {cellRenderer}\n            </VariableSizeGrid>\n        );\n    }, [\n        classes.gridContainer,\n        gridConfig.rowHeight,\n        gridConfig.gutter,\n        gridConfig.columnWidth,\n        gridConfig.columnCount,\n        gridConfig.rowCount,\n        sizers.getRowHeight,\n        sizers.getColumnWidth,\n        height,\n        width,\n        getItemKey,\n        cellRenderer,\n    ]);\n\n    return gridComponent;\n});\n\nconst useStyles = makeGlobalChonkyStyles(() => ({\n    gridContainer: {},\n}));\n","/**\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\n * @copyright 2020\n * @license MIT\n */\n\nimport React, { CSSProperties, useCallback, useMemo, useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport { FixedSizeList } from 'react-window';\n\nimport { selectFileViewConfig, selectors } from '../../redux/selectors';\nimport { FileViewMode } from '../../types/file-view.types';\nimport { useInstanceVariable } from '../../util/hooks-helpers';\nimport { makeLocalChonkyStyles } from '../../util/styles';\nimport { SmartFileEntry } from './FileEntry';\n\nexport interface FileListListProps {\n    width: number;\n    height: number;\n}\n\nexport const ListContainer: React.FC<FileListListProps> = React.memo(props => {\n    const { width, height } = props;\n\n    const viewConfig = useSelector(selectFileViewConfig);\n\n    const listRef = useRef<FixedSizeList>();\n\n    const displayFileIds = useSelector(selectors.getDisplayFileIds);\n    const displayFileIdsRef = useInstanceVariable(displayFileIds);\n    const getItemKey = useCallback(\n        (index: number) => displayFileIdsRef.current[index] ?? `loading-file-${index}`,\n        [displayFileIdsRef]\n    );\n\n    const classes = useStyles();\n    const listComponent = useMemo(() => {\n        // When entry size is null, we use List view\n        const rowRenderer = (data: { index: number; style: CSSProperties }) => {\n            return (\n                <div style={data.style}>\n                    <SmartFileEntry\n                        fileId={displayFileIds[data.index] ?? null}\n                        displayIndex={data.index}\n                        fileViewMode={FileViewMode.List}\n                    />\n                </div>\n            );\n        };\n\n        return (\n            <FixedSizeList\n                ref={listRef as any}\n                className={classes.listContainer}\n                itemSize={viewConfig.entryHeight}\n                height={height}\n                itemCount={displayFileIds.length}\n                width={width}\n                itemKey={getItemKey}\n            >\n                {rowRenderer}\n            </FixedSizeList>\n        );\n    }, [\n        classes.listContainer,\n        viewConfig.entryHeight,\n        height,\n        displayFileIds,\n        width,\n        getItemKey,\n    ]);\n\n    return listComponent;\n});\n\nconst useStyles = makeLocalChonkyStyles(theme => ({\n    listContainer: {\n        borderTop: `solid 1px ${theme.palette.divider}`,\n    },\n}));\n","import React, { UIEvent, useCallback, useContext, useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { ChonkyActions } from '../../action-definitions/index';\nimport { selectCurrentFolder, selectFileViewConfig, selectors } from '../../redux/selectors';\nimport { FileViewMode } from '../../types/file-view.types';\nimport { ChonkyIconName } from '../../types/icons.types';\nimport { useFileDrop } from '../../util/dnd';\nimport { ChonkyIconContext } from '../../util/icon-helper';\nimport {\n    c, getStripeGradient, makeGlobalChonkyStyles, makeLocalChonkyStyles\n} from '../../util/styles';\nimport { FileListEmpty } from './FileListEmpty';\nimport { GridContainer } from './GridContainer';\nimport { ListContainer } from './ListContainer';\n\nexport interface FileListProps {\n    onScroll?: (e: UIEvent<HTMLDivElement>) => void;\n}\n\ninterface StyleState {\n    dndCanDrop: boolean;\n    dndIsOverCurrent: boolean;\n}\n\nexport const FileList: React.FC<FileListProps> = React.memo((props: FileListProps) => {\n    const displayFileIds = useSelector(selectors.getDisplayFileIds);\n    const viewConfig = useSelector(selectFileViewConfig);\n\n    const currentFolder = useSelector(selectCurrentFolder);\n    const { drop, dndCanDrop, dndIsOverCurrent } = useFileDrop({ file: currentFolder });\n    const styleState = useMemo<StyleState>(() => ({ dndCanDrop, dndIsOverCurrent }), [dndCanDrop, dndIsOverCurrent]);\n\n    const localClasses = useLocalStyles(styleState);\n    const classes = useStyles(viewConfig);\n    const { onScroll } = props;\n\n    // In Chonky v0.x, this field was user-configurable. In Chonky v1.x+, we hardcode\n    // this to `true` to simplify configuration. Users can just wrap Chonky in their\n    // own `div` if they want to have finer control over the height.\n    const fillParentContainer = true;\n\n    const listRenderer = useCallback(\n        ({ width, height }: { width: number; height: number }) => {\n            if (displayFileIds.length === 0) {\n                return <FileListEmpty width={width} height={viewConfig.entryHeight} />;\n            } else if (viewConfig.mode === FileViewMode.List) {\n                return <ListContainer width={width} height={height} />;\n            } else {\n                return <GridContainer width={width} height={height} />;\n            }\n        },\n        [displayFileIds, viewConfig]\n    );\n\n    const ChonkyIcon = useContext(ChonkyIconContext);\n    return (\n        <div onScroll={onScroll} ref={drop} className={c([classes.fileListWrapper, localClasses.fileListWrapper])} role=\"list\">\n            <div className={localClasses.dndDropZone}>\n                <div className={localClasses.dndDropZoneIcon}>\n                    <ChonkyIcon icon={dndCanDrop ? ChonkyIconName.dndCanDrop : ChonkyIconName.dndCannotDrop} />\n                </div>\n            </div>\n            <AutoSizer disableHeight={!fillParentContainer}>{listRenderer}</AutoSizer>\n        </div>\n    );\n});\nFileList.displayName = 'FileList';\n\nconst useLocalStyles = makeLocalChonkyStyles(theme => ({\n    fileListWrapper: {\n        minHeight: ChonkyActions.EnableGridView.fileViewConfig.entryHeight + 2,\n        background: (state: StyleState) =>\n            state.dndIsOverCurrent && state.dndCanDrop\n                ? state.dndCanDrop\n                    ? getStripeGradient(theme.dnd.fileListCanDropMaskOne, theme.dnd.fileListCanDropMaskTwo)\n                    : getStripeGradient(theme.dnd.fileListCannotDropMaskOne, theme.dnd.fileListCannotDropMaskTwo)\n                : 'none',\n    },\n    dndDropZone: {\n        display: (state: StyleState) =>\n            // When we cannot drop, we don't show an indicator at all\n            state.dndIsOverCurrent && state.dndCanDrop ? 'block' : 'none',\n        borderRadius: theme.gridFileEntry.borderRadius,\n        pointerEvents: 'none',\n        position: 'absolute',\n        height: '100%',\n        width: '100%',\n        zIndex: 2,\n    },\n    dndDropZoneIcon: {\n        backgroundColor: (state: StyleState) => (state.dndCanDrop ? theme.dnd.canDropMask : theme.dnd.cannotDropMask),\n        color: (state: StyleState) => (state.dndCanDrop ? theme.dnd.canDropColor : theme.dnd.cannotDropColor),\n        borderRadius: theme.gridFileEntry.borderRadius,\n        transform: 'translateX(-50%) translateY(-50%)',\n        position: 'absolute',\n        textAlign: 'center',\n        lineHeight: '60px',\n        fontSize: '2em',\n        left: '50%',\n        height: 60,\n        top: '50%',\n        width: 60,\n    },\n}));\n\nconst useStyles = makeGlobalChonkyStyles(() => ({\n    fileListWrapper: {\n        height: '100%',\n        maxHeight: '100%',\n    },\n}));\n","/**\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\n * @copyright 2020\n * @license MIT\n */\n\nimport React, { ReactElement, useEffect, useMemo } from 'react';\nimport { useIntl } from 'react-intl';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport Menu from '@material-ui/core/Menu';\n\nimport { reduxActions } from '../../redux/reducers';\nimport { selectContextMenuConfig, selectContextMenuItems } from '../../redux/selectors';\nimport { getI18nId, I18nNamespace } from '../../util/i18n';\nimport { important, makeGlobalChonkyStyles } from '../../util/styles';\nimport { useContextMenuDismisser } from './FileContextMenu-hooks';\nimport { SmartToolbarDropdownButton } from './ToolbarDropdownButton';\n\nexport interface FileContextMenuProps {}\n\nexport const FileContextMenu: React.FC<FileContextMenuProps> = React.memo(() => {\n    const dispatch = useDispatch();\n    useEffect(() => {\n        dispatch(reduxActions.setContextMenuMounted(true));\n        return () => {\n            dispatch(reduxActions.setContextMenuMounted(false));\n        };\n    }, [dispatch]);\n\n    const intl = useIntl();\n    const browserMenuShortcutString = intl.formatMessage(\n        {\n            id: getI18nId(I18nNamespace.FileContextMenu, 'browserMenuShortcut'),\n            defaultMessage: 'Browser menu: {shortcut}',\n        },\n        { shortcut: <strong>Alt + Right Click</strong> }\n    );\n\n    const contextMenuConfig = useSelector(selectContextMenuConfig);\n    const contextMenuItems = useSelector(selectContextMenuItems);\n\n    const hideContextMenu = useContextMenuDismisser();\n    const contextMenuItemComponents = useMemo(() => {\n        const components: ReactElement[] = [];\n        for (let i = 0; i < contextMenuItems.length; ++i) {\n            const item = contextMenuItems[i];\n\n            if (typeof item === 'string') {\n                components.push(\n                    <SmartToolbarDropdownButton\n                        key={`context-menu-item-${item}`}\n                        fileActionId={item}\n                        onClickFollowUp={hideContextMenu}\n                    />\n                );\n            } else {\n                item.fileActionIds.map(id =>\n                    components.push(\n                        <SmartToolbarDropdownButton\n                            key={`context-menu-item-${item.name}-${id}`}\n                            fileActionId={id}\n                            onClickFollowUp={hideContextMenu}\n                        />\n                    )\n                );\n            }\n        }\n        return components;\n    }, [contextMenuItems, hideContextMenu]);\n\n    const anchorPosition = useMemo(\n        () => (contextMenuConfig ? { top: contextMenuConfig.mouseY, left: contextMenuConfig.mouseX } : undefined),\n        [contextMenuConfig]\n    );\n\n    const classes = useStyles();\n    return (\n        <Menu\n            elevation={2}\n            disablePortal\n            onClose={hideContextMenu}\n            transitionDuration={150}\n            open={!!contextMenuConfig}\n            anchorPosition={anchorPosition}\n            anchorReference=\"anchorPosition\"\n            classes={{ list: classes.contextMenuList }}\n        >\n            {contextMenuItemComponents}\n            <ListSubheader component=\"div\" className={classes.browserMenuTooltip}>\n                {browserMenuShortcutString}\n            </ListSubheader>\n        </Menu>\n    );\n});\n\nconst useStyles = makeGlobalChonkyStyles(() => ({\n    contextMenuList: {\n        paddingBottom: important(0),\n        paddingTop: important(0),\n    },\n    browserMenuTooltip: {\n        lineHeight: important('30px'),\n        fontSize: important('0.7em'),\n    },\n}));\n","/**\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\n * @copyright 2020\n * @license MIT\n */\n\nimport React from 'react';\n\nimport { FileBrowserHandle, FileBrowserProps } from '../../types/file-browser.types';\nimport { FileList } from '../file-list/FileList';\nimport { FileBrowser } from './FileBrowser';\nimport { FileContextMenu } from './FileContextMenu';\nimport { FileNavbar } from './FileNavbar';\nimport { FileToolbar } from './FileToolbar';\n\nexport const FullFileBrowser = React.memo(\n    React.forwardRef<FileBrowserHandle, FileBrowserProps>((props, ref) => {\n        const { onScroll } = props\n        return (\n            <FileBrowser ref={ref} {...props}>\n                <FileNavbar />\n                <FileToolbar />\n                <FileList onScroll={onScroll}/>\n                <FileContextMenu/>\n            </FileBrowser>\n        );\n    })\n);\nFullFileBrowser.displayName = 'FullFileBrowser';\n","/**\n *\n */\n\nimport { useCallback, useMemo, useState } from 'react';\n\nimport { ChonkyActions } from '../action-definitions';\nimport { FileActionData } from '../types/action-handler.types';\nimport { FileAction } from '../types/action.types';\nimport { FileArray, FileData } from '../types/file.types';\nimport { FileHelper } from '../util/file-helper';\n\nexport interface CustomFileData extends FileData {\n    parentId?: string;\n    childrenIds?: string[];\n}\nexport interface CustomFileMap<FT extends CustomFileData> {\n    [fileId: string]: FT;\n}\nexport interface FileMapParams<FT extends CustomFileData> {\n    baseFileMap: CustomFileMap<FT>;\n    initialFolderId: string;\n}\n\nexport const useFolderChain = <FT extends CustomFileData>(\n    fileMap: CustomFileMap<FT>,\n    currentFolderId: string\n): FileArray<FT> => {\n    return useMemo(() => {\n        const currentFolder = fileMap[currentFolderId];\n\n        const folderChain = [currentFolder];\n\n        let parentId = currentFolder.parentId;\n        while (parentId) {\n            const parentFile = fileMap[parentId];\n            if (parentFile) {\n                folderChain.unshift(parentFile);\n                parentId = parentFile.parentId;\n            } else {\n                break;\n            }\n        }\n\n        return folderChain;\n    }, [currentFolderId, fileMap]);\n};\n\nexport const useFiles = <FT extends CustomFileData>(\n    fileMap: CustomFileMap<FT>,\n    currentFolderId: string\n): FileArray<FT> => {\n    return useMemo(() => {\n        const currentFolder = fileMap[currentFolderId];\n        const childrenIds = currentFolder.childrenIds!;\n        const files = childrenIds.map((fileId: string) => fileMap[fileId]);\n        return files;\n    }, [currentFolderId, fileMap]);\n};\n\nexport const useFileMapMethods = <FT extends CustomFileData>(\n    baseFileMap: CustomFileMap<FT>,\n    initialFolderId: string\n) => {\n    const [fileMap, setFileMap] = useState(baseFileMap);\n    const [currentFolderId, setCurrentFolderId] = useState(initialFolderId);\n    const resetFileMap = useCallback(() => {\n        setFileMap(baseFileMap);\n        setCurrentFolderId(initialFolderId);\n    }, [baseFileMap, initialFolderId]);\n    const moveFiles = useCallback(\n        (files: FT[], source: FT, destination: FT) =>\n            setFileMap(currentFileMap => {\n                const newFileMap = { ...currentFileMap };\n                const moveFileIds = new Set(files.map(f => f.id));\n\n                // Delete files from their source folder.\n                const newSourceChildrenIds = source.childrenIds!.filter(id => !moveFileIds.has(id));\n                newFileMap[source.id] = {\n                    ...source,\n                    childrenIds: newSourceChildrenIds,\n                    childrenCount: newSourceChildrenIds.length,\n                };\n\n                // Add the files to their destination folder.\n                const newDestinationChildrenIds = [...destination.childrenIds!, ...files.map(f => f.id)];\n                newFileMap[destination.id] = {\n                    ...destination,\n                    childrenIds: newDestinationChildrenIds,\n                    childrenCount: newDestinationChildrenIds.length,\n                };\n\n                // Finally, update the parent folder ID on the files from source folder\n                // ID to the destination folder ID.\n                files.forEach(file => {\n                    newFileMap[file.id] = {\n                        ...file,\n                        parentId: destination.id,\n                    };\n                });\n\n                return newFileMap;\n            }),\n        []\n    );\n\n    const methods = useMemo(\n        () => ({\n            setFileMap,\n            setCurrentFolderId,\n            resetFileMap,\n            moveFiles,\n        }),\n        [setFileMap, setCurrentFolderId, resetFileMap, moveFiles]\n    );\n    return {\n        fileMap,\n        currentFolderId,\n        methods,\n    };\n};\nexport type FileMethods = ReturnType<typeof useFileMapMethods>['methods'];\n\nexport const useFileActionHandler = (methods: FileMethods) => {\n    return useCallback(\n        (data: FileActionData<FileAction>) => {\n            if (data.id === ChonkyActions.OpenFiles.id) {\n                const { targetFile, files } = data.payload;\n                const fileToOpen = targetFile ?? files[0];\n                if (fileToOpen && FileHelper.isDirectory(fileToOpen)) {\n                    methods.setCurrentFolderId(fileToOpen.id);\n                }\n            } else if (data.id === ChonkyActions.MoveFiles.id) {\n                methods.moveFiles(data.payload.files, data.payload.source!, data.payload.destination);\n            }\n        },\n        [methods]\n    );\n};\n\nexport const useFileMap = <FT extends CustomFileData = CustomFileData>({\n    baseFileMap,\n    initialFolderId,\n}: FileMapParams<FT>) => {\n    const { fileMap, currentFolderId, methods } = useFileMapMethods(baseFileMap, initialFolderId);\n    const folderChain = useFolderChain(fileMap, currentFolderId);\n    const files = useFiles(fileMap, currentFolderId);\n    const fileActionHandler = useFileActionHandler(methods as FileMethods);\n\n    const data = {\n        fileMap,\n        currentFolderId,\n        folderChain,\n        files,\n    };\n    return { data, methods, fileActionHandler };\n};\n"],"names":["SortOrder","UNINITIALIZED_SENTINEL","useStaticValue","factory","valueRef","useRef","current","useInstanceVariable","value","ref","useEffect","Logger","error","args","console","warn","debug","formatBullets","bullets","join","FileHelper","isDirectory","file","isDir","isHidden","isSymlink","isEncrypted","isClickable","isOpenable","openable","isSelectable","selectable","isDraggable","draggable","isDroppable","droppable","isDndOpenable","dndOpenable","getModDate","modDate","parseDate","maybeDate","Date","message","isNaN","getTime","getChildrenCount","childrenCount","sanitizeInputArray","mode","rawArray","sanitizedFiles","errorMessages","Array","isArray","nonObjectFileCount","missingFieldFileCount","seenIds","Set","duplicateIds","i","length","item","id","name","has","add","push","size","repeatedIdsString","from","arrayString","itemString","errorMessageString","sanitizedArray","OptionIds","ShowHiddenFiles","ShowFoldersFirst","DarkMode","FileViewMode","ChonkyIconName","selectInstanceId","state","instanceId","selectFileActionMap","fileActionMap","selectFileActionIds","fileActionIds","selectFileActionData","fileActionId","selectToolbarItems","toolbarItems","selectContextMenuItems","contextMenuItems","selectFolderChain","folderChain","selectCurrentFolder","selectParentFolder","selectFileMap","fileMap","selectCleanFileIds","cleanFileIds","selectFileData","fileId","selectHiddenFileIdMap","hiddenFileIdMap","selectHiddenFileCount","Object","keys","selectSearchString","searchString","selectSelectionMap","selectionMap","selectSelectedFileIds","selectSelectionSize","selectIsFileSelected","selectSelectedFiles","map","selectSelectedFilesForActionCount","getSelectedFilesForAction","_getSelectedFilesForA","selectFileViewConfig","fileViewConfig","selectSortActionId","sortActionId","selectSortOrder","sortOrder","selectOptionValue","optionId","optionMap","selectOptionMap","selectThumbnailGenerator","thumbnailGenerator","selectDoubleClickDelay","doubleClickDelay","selectIsDnDDisabled","disableDragAndDrop","selectClearSelectionOnOutsideClick","clearSelectionOnOutsideClick","selectContextMenuMounted","contextMenuMounted","selectContextMenuConfig","contextMenuConfig","getFileActionMap","getOptionMap","getFileMap","getFileIds","fileIds","getCleanFileIds","getSortActionId","getSortOrder","getSearchString","_getLastClick","lastClick","makeGetAction","fileActionSelector","createSelector","makeGetOptionValue","defaultValue","undefined","makeGetFiles","fileIdsSelector","getSortedFileIds","files","sortAction","showFolderFirst","prepareSortKeySelector","selector","sortFunctions","desc","sortKeySelector","ASC","sort","by","getSearcher","cleanFiles","FuzzySearch","caseSensitive","getSearchFilteredFileIds","searcher","search","f","getHiddenFileIdMap","searchFilteredFileIds","showHiddenFiles","searchFilteredFileIdsSet","forEach","selectors","getDisplayFileIds","sortedFileIds","filter","getLastClickIndex","displayFileIds","index","getIsFileSelected","action","requiresSelection","selectedFiles","filters","filteredSelectedFiles","reduce","prevFiles","getSelectedFiles","fileFilter","selectSelectedFilesForAction","thunkUpdateRawFileActions","rawFileActions","disableDefaultFileActions","dispatch","defaultActionsToAdd","disabledActionIds","DefaultFileActions","fileActions","seenActionIds","addToSeen","a","wasNotSeen","fileActionArrays","duplicateFreeArrays","arr","duplicateFreeArray","concat","mergeFileActionsArrays","EssentialFileActions","optionDefaults","option","reduxActions","setRawFileActions","setFileActionsErrorMessages","setFileActions","setOptionDefaults","thunkUpdateToolbarNContextMenuItems","excludedToolbarFileActionIds","ChonkyActions","OpenParentFolder","seenToolbarGroups","seenContextMenuGroups","getGroup","itemArray","seenMap","groupName","group","button","toolbar","contextMenu","updateFileActionMenuItems","thunkUpdateDefaultFileViewActionId","getState","setFileViewConfig","thunkActivateSortAction","order","DESC","setSort","actionId","thunkDispatchFileAction","data","_dispatch","externalFileActionHandler","selectExternalFileActionHandler","Promise","resolve","thunkRequestFileAction","payload","selectedFilesForAction","actionState","contextMenuTriggerFile","config","triggerFileId","selectContextMenuTriggerFile","toggleOption","selectionTransform","prevSelection","hiddenFileIds","newSelection","clearSelection","selectFiles","reset","thunkApplySelectionTransform","effect","maybeEffectPromise","reduxDispatch","getReduxState","then","effectResult","triggerDispatchAfterEffect","I18nNamespace","defineFileAction","__payloadType","hotkeys","errorMessage","Error","findElementAmongAncestors","maybeElement","predicate","parentElement","getValueOrFallback","fallback","desiredType","EssentialActions","MouseClickFile","params","clickType","OpenFiles","targetFile","disableSelection","ctrlKey","toggleSelection","exclusive","setLastClickIndex","fileDisplayIndex","shiftKey","lastClickIndex","rangeStart","rangeEnd","fileIdsToSelect","slice","KeyboardClickFile","enterKey","spaceKey","StartDragNDrop","draggedFile","EndDragNDrop","destination","MoveFiles","ChangeSelection","icon","openParentFolder","iconOnly","parentFolder","OpenFileContextMenu","triggerFile","showContextMenu","mouseX","clientX","mouseY","clientY","DefaultActions","OpenSelection","openFiles","SelectAllFiles","selectAllFiles","ClearSelection","EnableListView","List","entryHeight","list","EnableCompactView","Compact","entryWidth","compact","EnableGridView","Grid","smallThumbnail","SortFilesByName","toLowerCase","SortFilesBySize","SortFilesByDate","ToggleHiddenFiles","ToggleShowFoldersFirst","FocusSearchInput","focusSearchInput","ToggleDarkMode","ExtraActions","CopyFiles","copy","CreateFolder","tooltip","folderCreate","UploadFiles","upload","DownloadFiles","download","DeleteFiles","trash","initialRootState","fileActionsErrorMessages","rawFolderChain","folderChainErrorMessages","rawFiles","filesErrorMessages","searchMode","createSlice","initialState","reducers","setExternalFileActionHandler","setRawFolderChain","setRawFiles","selectedFileId","setSortedFileIds","setHiddenFileIds","setFocusSearchInput","setSearchString","oldValue","setSelectionDisabled","setThumbnailGenerator","setDoubleClickDelay","setDisableDragAndDrop","setClearSelectionOnOutsideClick","setContextMenuMounted","hideContextMenu","actions","rootReducer","reducer","useParamSelector","parametrizedSelector","selectorParams","useCallback","useSelector","useDTE","actionCreator","useDispatch","usePropReduxUpdate","ChonkyIconPlaceholder","React","title","defaultConfig","onFileAction","disableDragAndDropProvider","defaultSortActionId","defaultFileViewActionId","iconComponent","darkMode","i18n","getI18nId","namespace","stringId","getActionI18nId","FileActions","useLocalizedFileActionStrings","intl","useIntl","useMemo","buttonName","buttonTooltip","formatMessage","defaultMessage","_action$button","_action$button2","_action$button3","useLocalizedFileEntryStrings","formatters","useContext","ChonkyFormattersContext","fileModDateString","formatFileModDate","fileSizeString","formatFileSize","defaultFormatters","safeModDate","formatDate","dateStyle","timeStyle","_intl","sizeData","filesize","bits","output","symbol","Math","round","createContext","ChonkyIconContext","VideoExtensions","ImageExtensions","AudioExtensions","ColorsLight","ColorsDark","iconTrie","colourIndex","IconsToExtensions","license","model","database","text","archive","image","video","code","info","key","lock","music","terminal","users","linux","ubuntu","windows","rust","python","nodejs","php","git","adobe","pdf","excel","word","flash","exactTrie","ExactTrie","ignoreCase","pair","extensions","put","colorCode","getIconTrie","lightTheme","colors","debugRed","debugBlue","debugGreen","debugPurple","debugYellow","textActive","fontSizes","rootPrimary","margins","rootLayoutMargin","lineHeight","fontSize","buttonRadius","dnd","canDropColor","cannotDropColor","canDropMask","cannotDropMask","fileListCanDropMaskOne","fileListCanDropMaskTwo","fileListCannotDropMaskOne","fileListCannotDropMaskTwo","dragLayer","border","padding","borderRadius","fileList","desktopGridGutter","mobileGridGutter","gridFileEntry","childrenCountSize","iconColorFocused","iconSize","iconColor","fileColorTint","folderBackColorTint","folderFrontColorTint","listFileEntry","propertyFontSize","iconFontSize","iconBorderRadius","darkThemeOverride","mobileThemeOverride","useIsMobileBreakpoint","useMediaQuery","getStripeGradient","colorOne","colorTwo","makeLocalChonkyStyles","styles","createUseStyles","makeGlobalChonkyStyles","makeStyles","selectorMapping","useStyles","theme","localStyles","globalStyles","localSelector","globalSelector","classes","important","c","classnames","ChonkyBusinessLogicInner","memo","forwardRef","props","store","useStore","useImperativeHandle","getFileSelection","setFileSelection","selection","requestFileAction","useFileBrowserHandle","displayName","ChonkyBusinessLogic","useDndContextAvailable","DndContext","dragDropManager","layerStyles","position","pointerEvents","zIndex","left","top","width","height","getItemStyles","initialCursorOffset","initialFileOffset","currentFileOffset","display","transform","x","y","WebkitTransform","DnDFileListDragLayer","useDragLayer","monitor","getItem","itemType","getItemType","getInitialClientOffset","getInitialSourceClientOffset","getSourceClientOffset","isDragging","selectionSize","style","className","fileDragPreview","boxShadow","palette","divider","backgroundColor","background","color","primary","HotkeyListener","fileAction","hotkeysStr","hotkeyCallback","event","preventDefault","unbind","ChonkyPresentationLayer","children","dndDisabled","handleClickAway","target","element","tagName","hotkeyListenerComponents","dndContextAvailable","contextMenuMountedRef","altKey","fileEntryWrapperDiv","dataset","chonkyFileId","useContextMenuTrigger","ClickAwayListener","onClickAway","Box","chonkyRoot","onContextMenu","paper","touchAction","fontFamily","flexDirection","boxSizing","textAlign","webkitTouchCallout","webkitUserSelect","mozUserSelect","msUserSelect","userSelect","FileBrowser","chonkyInstanceId","preloadedState","configureStore","middleware","getDefaultMiddleware","serializableCheck","devTools","selectionWatcher","watch","unsubscribeCallbacks","subscribe","oldSelection","selectedFilesIds","unsubscribe","useStoreWatchers","useChonkyStore","shortid","generate","isMobileBreakpoint","muiTheme","createMuiTheme","type","merge","combinedTheme","customTheme","chonkyComps","IntlProvider","locale","defaultLocale","Provider","ReduxProvider","ThemeProvider","MuiThemeProvider","DndProvider","backend","HTML5Backend","CustomVisibilityState","useFileDrop","forceDisableDrop","includeChildrenDrops","folderChainRef","mockHook","useHook","useDrop","useDropIfAvailable","accept","drop","_item","canDrop","dropTarget","isOver","shallow","source","prohibitedFileIds","folder","collect","isOverCurrent","dndIsOver","dndIsOverCurrent","dndCanDrop","useDndHoverOpen","dndState","currentFolderRef","timeout","_currentFolderRef$cur","setTimeout","clearTimeout","TextPlaceholder","min","max","placeholderLength","maxLength","minLength","floor","random","whitespace","repeat","textPlaceholder","dangerouslySetInnerHTML","__html","opacity","animationName","animationIterationCount","animationTimingFunction","animationDuration","whiteSpace","overflow","maxWidth","minWidth","useFileEntryHtmlProps","role","useFileEntryState","selected","focused","iconData","getWithCheckpoints","loading","useIconData","useThumbnailUrl","thumbnailUrl","thumbnailLoading","fileColor","iconSpin","useDndIcon","dndIconName","dndCannotDrop","dndIsDragging","dndDragging","useState","setThumbnailUrl","setThumbnailLoading","loadingAttempts","loadingCancelled","useFileActionTrigger","useFileActionProps","optionValue","_action$option","actionSelectionEmpty","active","disabled","sortAsc","sortDesc","placeholder","toggleOn","toggleOff","isSortButtonAndCurrentSort","isFileViewButtonAndCurrentView","isOptionAndEnabled","customDisabled","customActive","customVisibility","Disabled","Active","ToolbarButton","externalClassName","onClick","dropdown","ChonkyIcon","iconWithText","fallbackIcon","fixedWidth","baseButton","iconOnlyButton","activeButton","Button","iconDropdown","textTransform","letterSpacing","paddingBottom","paddingTop","marginRight","marginLeft","marginTop","SmartToolbarButton","triggerAction","Hidden","FolderChainButton","first","baseBreadcrumb","disabledBreadcrumb","currentBreadcrumb","folderChainIcon","buttonContainer","dndIndicator","textDecoration","FileNavbar","folderChainItems","items","folderChainComponents","components","component","navbarWrapper","navbarContainer","Breadcrumbs","navbarBreadcrumbs","separator","upDirectoryButton","flexGrow","ToolbarDropdownButton","MenuItem","ListItemIcon","ListItemText","primaryTypographyProps","minHeight","SmartToolbarDropdownButton","onClickFollowUp","handleClick","ToolbarDropdown","anchor","setAnchor","currentTarget","handleClose","menuItemComponents","localizedName","FileActionGroups","Menu","autoFocus","keepMounted","elevation","anchorEl","onClose","open","Boolean","transitionDuration","dropdownList","ToolbarInfo","hiddenCount","fileCountString","Toolbar","fileCount","selectedString","hiddenString","infoContainer","Typography","infoText","variant","extraInfoSpan","selectionSizeText","hiddenCountText","ToolbarSearch","searchPlaceholderString","searchInputRef","reduxSearchString","localSearchString","setLocalSearchString","debouncedLocalSearchString","delay","debouncedValue","setDebouncedValue","handler","useDebounce","showLoadingIndicator","setShowLoadingIndicator","focus","handleChange","handleKeyUp","blur","TextField","searchFieldContainer","onChange","inputRef","InputProps","onKeyUp","startAdornment","InputAdornment","searchIcon","spin","searchFieldInput","inputProps","searchFieldInputInner","margin","paddingLeft","FileToolbar","toolbarItemComponents","toolbarWrapper","toolbarContainer","toolbarLeft","toolbarRight","flexWrap","toolbarLeftFiller","FileListEmpty","emptyString","FileList","fileListEmpty","fileListEmptyContent","folderOpen","ClickableWrapper","WrapperTag","wrapperTag","passthroughProps","onSingleClick","onDoubleClick","onKeyboardClick","setFocused","counter","clickCount","clickTimeout","mouseClickEvent","metaKey","useClickHandler","handleKeyDown","keyboardClickEvent","nativeEvent","stopPropagation","useKeyDownHandler","compProps","onFocus","onBlur","onKeyDown","tabIndex","mergedProps","FileEntryName","modifierIconComponents","modifierIcons","hidden","symlink","useModifierIconComponents","fileNameComponent","parts","extension","ext","split","substr","useFileNameComponent","hint","paddingRight","CompactEntry","entryState","fileEntryHtmlProps","listFileEntryIcon","listFileEntryDescription","listFileEntryName","listFileEntryProperties","listFileEntryProperty","alignItems","DnDFileEntry","fileRef","getDndStartPayload","reduxState","sourceInstanceId","canDrag","onDragStart","onDragEnd","dropResult","getDropResult","dropEffect","useDrag","useDragIfAvailable","begin","end","drag","preview","getEmptyImage","captureDraggingState","useFileDrag","useFileEntryDnD","fillParent","FileThumbnail","thumbnailStyle","backgroundImage","fileThumbnail","backgroundRepeat","backgroundPosition","backgroundSize","GridEntryDndIndicator","borderBottom","borderLeft","content","GridEntryPreviewFolder","folderClasses","useFolderStyles","fileClasses","useFileStyles","commonClasses","useCommonEntryStyles","previewFile","folderBackSideMid","folderBackSideTop","folderFrontSide","fileIcon","selectionIndicator","thumbnail","borderTopLeftRadius","borderTopRightRadius","right","borderRightColor","borderTopColor","borderBottomColor","borderLeftColor","borderWidth","borderStyle","bottom","shadows","GridEntryPreviewFile","focusIndicator","GridEntry","useFileEntryStyles","entryClassName","gridFileEntryPreview","gridFileEntryNameContainer","gridFileEntryName","wordBreak","ListEntry","styleState","listFileEntrySelection","textOverflow","flex","disabledDndState","SmartFileEntry","EntryComponent","displayIndex","fileViewMode","fileClickHandlers","onMouseClick","useFileClickHandlers","clickableWrapperProps","fileEntryClickableWrapper","fileEntryProps","outline","getGridConfig","viewConfig","columnCount","columnWidth","gutter","scrollbar","window","orientation","navigator","userAgent","indexOf","rowCount","ceil","rowHeight","GridContainer","gridRef","gridConfig","setGridConfig","gridConfigRef","oldConf","newConf","resetAfterRowIndex","resetAfterColumnIndex","resetAfterIndices","columnIndex","rowIndex","sizers","gc","getColumnWidth","getRowHeight","displayFileIdsRef","getItemKey","cellRenderer","styleWithGutter","VariableSizeGrid","gridContainer","estimatedRowHeight","estimatedColumnWidth","itemKey","ListContainer","listRef","FixedSizeList","listContainer","itemSize","itemCount","borderTop","currentFolder","localClasses","useLocalStyles","onScroll","listRenderer","fileListWrapper","dndDropZone","dndDropZoneIcon","AutoSizer","disableHeight","maxHeight","FileContextMenu","browserMenuShortcutString","shortcut","useContextMenuDismisser","contextMenuItemComponents","anchorPosition","disablePortal","anchorReference","contextMenuList","ListSubheader","browserMenuTooltip","FullFileBrowser","useFolderChain","currentFolderId","parentId","parentFile","unshift","useFiles","childrenIds","useFileMapMethods","baseFileMap","initialFolderId","setFileMap","setCurrentFolderId","resetFileMap","moveFiles","currentFileMap","newFileMap","moveFileIds","newSourceChildrenIds","newDestinationChildrenIds","methods","useFileActionHandler","fileToOpen","fileActionHandler"],"mappings":"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BhP,EAAO+C,eAAPoM,EAAexE,WAIhC,CACHkE,WAAAA,EACAC,cAAAA,KAEL,CAAC9O,EAAQ0O,KAGHU,GAA+B,SAACja,OACnCuZ,EAAOC,YACPU,EAAaC,aAAWC,WACvBX,WAAQ,iBACJ,CACHY,kBAAmBH,EAAWI,kBAAkBf,EAAMvZ,GACtDua,eAAgBL,EAAWM,eAAejB,EAAMvZ,MAErD,CAACA,EAAMka,EAAYX,KAGbkB,GAAsC,CAC/CH,kBAAmB,SACff,EACAvZ,OAEM0a,EAAc5a,EAAWkB,WAAWhB,UACtC0a,EACOnB,EAAKoB,WAAWD,EAAa,CAChCE,UAAW,SACXC,UAAW,UAGR,MAGfL,eAAgB,SAACM,EAAkB9a,OAC1BA,GAA6B,iBAAdA,EAAK8C,KAAmB,OAAO,SAG7CiY,EAAWC,EADJhb,EAAK8C,KACc,CAAEmY,MAAM,EAAOC,OAAQ,iBAC/B,MAApBH,EAASI,OACCC,KAAKC,MAAMN,EAAS7b,MAAQ,IAAM,UACjB,OAApB6b,EAASI,OACNC,KAAKC,MAAMN,EAAS7b,WAAU6b,EAASI,OAE3CJ,EAAS7b,UAAS6b,EAASI,SAIhCf,GAA0BkB,gBAAcb,IY5FxCc,GAAoBD,gBAA4ChD,IAEhEkD,GAA4B,CACrC,MACA,MACA,OACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OACA,OACA,OACA,OACA,OACA,MACA,MACA,MACA,MACA,MACA,MACA,OACA,OACA,MACA,MACA,MACA,MACA,QACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,MACA,MACA,KACA,MACA,KACA,MACA,MACA,MACA,MACA,MACA,MACA,OACA,OACA,OACA,OACA,OACA,OACA,MACA,MACA,OACA,KACA,MACA,MACA,OAESC,GAA4B,CACrC,MACA,OACA,MACA,MACA,MACA,OACA,MACA,MACA,MACA,OACA,OACA,MACA,MACA,MACA,MACA,MACA,KACA,MACA,MACA,MACA,MACA,OACA,MACA,MACA,KACA,MACA,OACA,QACA,OACA,QACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OACA,MACA,MACA,OACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OACA,MACA,MACA,MACA,MACA,MACA,OACA,MACA,MACA,OACA,OACA,MACA,OACA,MACA,OACA,MACA,MACA,MACA,MACA,OAESC,GAA4B,CACrC,OACA,MACA,MACA,MACA,OACA,OACA,KACA,MACA,MACA,MACA,QACA,YACA,YACA,YACA,MACA,OACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OACA,MACA,MACA,OACA,MACA,MACA,OACA,OACA,MACA,MACA,MACA,KACA,KACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OACA,MACA,MACA,MACA,MACA,OACA,MACA,MAESC,GAAwB,CACjC,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAESC,GAAuB,CAChC,OACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA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"}